{
    "docs": [
        {
            "location": "/", 
            "text": "This is my notes for semester 5 of Dawson's Computer Science program. It consists, among other things, of PHP, Java, Android and Git.", 
            "title": "Home"
        }, 
        {
            "location": "/PHP/introduction/", 
            "text": "Introduction\n\n\nWe will have three projects. One a web scraping one, one a speed reading (heavy js) and a combined android/php web app for students.\n\n\nHistory\n\n\n\n\n1996 - PHP first release\n\n\nPerl, C\n\n\n\n\n\n\nLarabel -\n really popular\n\n\n2017 - PHP 7.1\n~ 00 - Java\n\n\n\n\nClient side\n\n\n\n\nWeb browser\n\n\nHTML\n\n\nCSS\n\n\nJS\n\n\n\n\nServer side\n\n\n\n\nDatabase (ex: Oracle)\n\n\nMySQL\n\n\nPostgres (using this one)\n\n\n\n\nWeb Server\n\n\n\n\nIIS (ASP.NET)\n\n\nApache\n\n\nNGING (using this one)\n\n\n\n\nNGinx will tell the PHP interpreter to interpret the file, and the interpreter will create an html based on the request.\n\n\nDevelopment Environment\n\n\n\n\nVirtual Machine\n\n\nLinux Ubuntu\n\n\nNGINX\n\n\npostgres\n\n\n\n\nLab and Home setup\n\n\n\n\nVagrant\n\n\nPreprovision VM so that each vagrant box is exactly the same\n\n\n\n\n\n\nHomestead\n\n\nVagrant box preprovisioned with recommended \"Stack\" for \nphp-laravel\n, which has above\n\n\n\n\n\n\nDocker\n\n\nLighter than the Vagrant engine\n\n\nHowever, only available on Windows 10 and we have systems in Windows 7 \ud83d\ude22\n\n\n\n\n\n\n\n\nThis will all be completely headless (no GUI).\n\n\nHello PHP\n\n\nExample 1 - \nHTML \n PHP embedded index.php \n\n\n!DOCTYPE html\n\n\nhtml\n\n\n    \nhead\n\n\n    \n/head\n\n\n    \nbody\n\n\n        \np\n Plain HTML \n/p\n\n\n        \np\n\n\n            \n?php\n \necho\n \nHello World\n;\n \n?\n\n\n        \n/p\n\n\n    \n/body\n\n\n\n\n\nExample 2 - \nOnly PHP\n\n\n?php\n \n    \necho\n \n!DOCTYPE html\n;\n\n    \necho\n \nhtml\n;\n\n\n?\n\n\n\n\n\nVariables\n\n\n\n\nWeakly typed =\n \nNo decorations\n\n\n\n\n| Datatypes |\n| interger |\n| floatingpoint |\n| string |\n| boolean |\n| array |\n\n\nVariable Naming\n\n\n\n\nStart with $\n\n\nnext char must be letter or _\n\n\nonly alphanumeric and _\n\n\ncase sensitive (\nexcept functions\n)\n\n\n\n\nExample 3 - \nUsing Variables\n\n\n?php\n \n    \n$quantity\n \n=\n \n50\n;\n\n    \n$price\n \n=\n \n119.50\n;\n\n    \n$tax\n \n=\n \n0.01\n;\n\n    \n$total\n \n=\n \n(\n$quantity\n \n*\n \n$price\n)\n \n*\n \n(\n1\n \n+\n \n$tax\n);\n\n    \n$total\n \n=\n \nnumber_format\n(\n$total\n,\n2\n);\n\n    \necho\n \np\nThe total is \n.\n$total\n.\n/p\n\n\n?\n\n\n\n\n\nOperators\n\n\n\n\n*\n \n/\n \n%\n\n\n++\n \n--\n\n\n+\n \n-\n\n\n**\n (power)\n\n\n=\n\n\n+=\n\n\n.=\n (concatenation)\n\n\n\n\n|\n\n\nxor\n (exclusive or)\n\n\n==\n equals (value)\n\n\n===\n identity (value and type)\n\n\n!=\n \n\n\n!==\n\n\n \n\n\n= \n=\n \n\n\n==\n like compareto, negative 0 positive\n\n\n??\n null", 
            "title": "Introduction"
        }, 
        {
            "location": "/PHP/introduction/#introduction", 
            "text": "We will have three projects. One a web scraping one, one a speed reading (heavy js) and a combined android/php web app for students.", 
            "title": "Introduction"
        }, 
        {
            "location": "/PHP/introduction/#history", 
            "text": "1996 - PHP first release  Perl, C    Larabel -  really popular  2017 - PHP 7.1\n~ 00 - Java", 
            "title": "History"
        }, 
        {
            "location": "/PHP/introduction/#client-side", 
            "text": "Web browser  HTML  CSS  JS", 
            "title": "Client side"
        }, 
        {
            "location": "/PHP/introduction/#server-side", 
            "text": "Database (ex: Oracle)  MySQL  Postgres (using this one)", 
            "title": "Server side"
        }, 
        {
            "location": "/PHP/introduction/#web-server", 
            "text": "IIS (ASP.NET)  Apache  NGING (using this one)   NGinx will tell the PHP interpreter to interpret the file, and the interpreter will create an html based on the request.", 
            "title": "Web Server"
        }, 
        {
            "location": "/PHP/introduction/#development-environment", 
            "text": "Virtual Machine  Linux Ubuntu  NGINX  postgres", 
            "title": "Development Environment"
        }, 
        {
            "location": "/PHP/introduction/#lab-and-home-setup", 
            "text": "Vagrant  Preprovision VM so that each vagrant box is exactly the same    Homestead  Vagrant box preprovisioned with recommended \"Stack\" for  php-laravel , which has above    Docker  Lighter than the Vagrant engine  However, only available on Windows 10 and we have systems in Windows 7 \ud83d\ude22     This will all be completely headless (no GUI).", 
            "title": "Lab and Home setup"
        }, 
        {
            "location": "/PHP/introduction/#hello-php", 
            "text": "", 
            "title": "Hello PHP"
        }, 
        {
            "location": "/PHP/introduction/#example-1-html-php-embedded-indexphp", 
            "text": "!DOCTYPE html  html       head       /head       body           p  Plain HTML  /p           p               ?php   echo   Hello World ;   ?           /p       /body", 
            "title": "Example 1 - HTML &amp; PHP embedded index.php "
        }, 
        {
            "location": "/PHP/introduction/#example-2-only-php", 
            "text": "?php  \n     echo   !DOCTYPE html ; \n     echo   html ;  ?", 
            "title": "Example 2 - Only PHP"
        }, 
        {
            "location": "/PHP/introduction/#variables", 
            "text": "Weakly typed =   No decorations   | Datatypes |\n| interger |\n| floatingpoint |\n| string |\n| boolean |\n| array |", 
            "title": "Variables"
        }, 
        {
            "location": "/PHP/introduction/#variable-naming", 
            "text": "Start with $  next char must be letter or _  only alphanumeric and _  case sensitive ( except functions )", 
            "title": "Variable Naming"
        }, 
        {
            "location": "/PHP/introduction/#example-3-using-variables", 
            "text": "?php  \n     $quantity   =   50 ; \n     $price   =   119.50 ; \n     $tax   =   0.01 ; \n     $total   =   ( $quantity   *   $price )   *   ( 1   +   $tax ); \n     $total   =   number_format ( $total , 2 ); \n     echo   p The total is  . $total . /p  ?", 
            "title": "Example 3 - Using Variables"
        }, 
        {
            "location": "/PHP/introduction/#operators", 
            "text": "*   /   %  ++   --  +   -  **  (power)  =  +=  .=  (concatenation)   |  xor  (exclusive or)  ==  equals (value)  ===  identity (value and type)  !=    !==     =  =    ==  like compareto, negative 0 positive  ??  null", 
            "title": "Operators"
        }, 
        {
            "location": "/PHP/outline/", 
            "text": "COURSE OUTLINE \nInternet Application Development III\n\n\n\n\nNumber: 420-524-DW \n\n\nPonderation: \n\n\nCredits: 3\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\nSuccessful completion of all Year 2 420.A0 courses\n\n\n\n\nCo-requisites\n\n\n\n\n\n\n420-517-DW Software Development Project \u2013 Java III\n\n\n\n\n\n\n420-518-DW Mobile Software Development - Android\n\n\n\n\n\n\n420-544-DW Data Communications \n Networking\n\n\n\n\n\n\n\n\nNote\n\n\nYou must pass this course as well as the three co-requisite courses in order to progress to the sixth semester of the Computer Science Technology Program.\n\n\n\n\nDescription\n\n\nThe student will be introduced to the concepts and techniques of\nserver-side Web programming. The student will use PHP, JavaScript, and a\ndatabase to create dynamic Web applications, and Web APIs to respond to\nAJAX queries. In addition to direct PHP programming, the student is\nintroduced to a PHP framework.\n\n\nSTATEMENTS OF COMPETENCE\n\n\n\n\n\n\nUse an object-oriented development approach (016T)\n\n\n\n\n\n\nProduce algorithms (016W)\n\n\n\n\n\n\nOrganize and use data (0170)\n\n\n\n\n\n\nAssure the quality of an application (0177)\n\n\n\n\n\n\nContacting Teachers\n\n\nJaya Nilakantan 3F.22 contact via MIO\n\n\nTeacher's schedule will be posted outside the office by the end of the\nfirst week of classes.\n\n\nCourse Objectives\n\n\nUpon successful completion of the course the student will be able to:\n\n\n\n\n\n\nDescribe the PHP language and environment (016W, 0170)\n\n\n\n\n\n\nUse PHP classes and objects (016T)\n\n\n\n\n\n\nAdd dynamic content to Web pages using PHP script files and embedded\n    \n PHP statements (016T, 016W)\n\n\n\n\n\n\nWrite server-side PHP scripts to generate HTML responses to\n    \n user queries. (016T, 016W)\n\n\n\n\n\n\nWrite PHP programs to perform server-side processing of user input\n    \n from Web pages with forms. (016T, 016W, 0170)\n\n\n\n\n\n\nDevelop Web APIs using PHP and a database (0170)\n\n\n\n\n\n\nDevelop Web applications using PHP, JavaScript, and a\n    \n database (0170)\n\n\n\n\n\n\nUnderstand and prevent web application security risks (0177)\n\n\n\n\n\n\nDevelop and test Web applications using a PHP framework (016T, 0177)\n\n\n\n\n\n\nCourse Methodology\n\n\nThe course will consist of two 1\u00bd-hour lectures and one 3-hour lab\nsession per week. Concepts and techniques will be presented in lectures\nand practical exercises that apply the concepts and techniques will be\ngiven in the lab sessions.\n\n\nRequired readings\n\n\nReadings will be assigned from:\n\n\n\n\n\n\nOfficial PHP documentation at \nwww.php.net\n\n\n\n\n\n\nDocumentation of the PHP framework\n\n\n\n\n\n\nPHP The Right Way \nhttp://www.phptherightway.com\n\n\n\n\n\n\nSurvive the Deep End: PHP Security\n    \nhttp://phpsecurity.readthedocs.io/en/latest\n\n\n\n\n\n\nAssessment of student performance\n\n\nMidterm Examination Duration\n\n\n\n\n1 \n hours Worth: 30% (Week 7 or 8)\n\n\n\n\nFinal Examination Duration\n\n\n\n\n\n\n3 hours Worth: 40% (Exam period)\n\n\n\n\n\n\nAssignments/ProjectsWorth: 30%\n\n\n\n\n\n\nCourse Outline\n\n\n\n\n\n\nConfigure PHP 1\n\n\n\n\n\n\nSet up a development server\n\n\n\n\n\n\nSet up the PHP environment with the php.ini file\n\n\n\n\n\n\n\n\n\n\nDescribe PHP language basics 2\n\n\n\n\n\n\nDescribe the PHP language and programming environment\n\n\n\n\n\n\nDescribe the basic syntax of the PHP language\n\n\n\n\n\n\nUnderstand PHP variable basics (variables, constants, numeric,\n\n\n\n\nstrings), naming rules and conventions\n\n\n\n\n\n\n\n\nUnderstand how PHP and HTML interact\n\n\n\n\n\n\nRecognize PHP control flow constructs: operators, conditionals,\n\n\n\n\nloops\n\n\n\n\n\n\n\n\n\n\n\n\nUse PHP arrays 1\n\n\n\n\n\n\nCreate and use numerically indexed arrays\n\n\n\n\n\n\nCreate and use associative arrays\n\n\n\n\n\n\nCreate and use multidimensional arrays\n\n\n\n\n\n\nUse foreach looping structure\n\n\n\n\n\n\nUse array functions\n\n\n\n\n\n\n\n\n\n\nDevelop PHP programs to receive and process input from HTML forms 3\n\n\n\n\n\n\nReview http protocol\n\n\n\n\n\n\nCreate a one-part form (both HTML and PHP in one file)\n\n\n\n\n\n\nCreate a two-part form (HTML and PHP are separate files)\n\n\n\n\n\n\nRetrieve submitted data from a variety of element types: text boxes,\n\n\n\n\ntext areas, checkboxes, radio buttons, drop-down lists, submit\nbuttons\n\n\n\n\n\n\n\n\nSanitize and validate input at client and server\n\n\n\n\n\n\nPrevent XSS and Cross-site Request Forgery attacks\n\n\n\n\n\n\nRedisplay a form after PHP validation errors (sticky forms)\n\n\n\n\n\n\nUnderstand and implement redirect\n\n\n\n\n\n\n\n\n\n\nCreate reusable code blocks by defining and calling functions 1\n\n\n\n\n\n\nDefine and call user-defined functions with return values\n\n\n\n\n\n\nDescribe the scope of identifiers in PHP\n\n\n\n\n\n\nUse local, global, static and references to variables\n\n\n\n\n\n\nUse call by value and call by reference to pass arguments\n\n\n\n\n\n\nUse the Include and Require statements\n\n\n\n\n\n\n\n\n\n\nUse PHP Classes and Objects 4\n\n\n\n\n\n\nCreate classes with properties, methods, constants\n\n\n\n\n\n\nDefine constructors and destructors\n\n\n\n\n\n\nUnderstand inheritance and polymorphism\n\n\n\n\n\n\nDefine static class members, and describe late static binding\n\n\n\n\n\n\nCompare and contrast PHP with Java and C# in terms of Access\n\n\n\n\nModifiers, Abstract Classes, Interfaces, and Namespaces\n\n\n\n\n\n\n\n\nCompare and clone objects\n\n\n\n\n\n\nPerform exception handling\n\n\n\n\n\n\nUnderstand and use magic methods\n\n\n\n\n\n\n\n\n\n\nAccess and populate a database using PHP 3\n\n\n\n\n\n\nConnect to and query a database with PHP Data Objects (PDO)\n\n\n\n\n\n\nPerform error handling\n\n\n\n\n\n\nPrevent SQL injection\n\n\n\n\n\n\nuse cURL and DOM traversal to scrape web pages and populate a\n\n\n\n\ndatabase\n\n\n\n\n\n\n\n\n\n\n\n\nMidterm Exam 1\n\n\n\n\n\n\nUnderstand and use state maintenance techniques 3\n\n\n\n\n\n\nExplore output buffering and browser caching\n\n\n\n\n\n\nMaintain state using query string\n\n\n\n\n\n\nImplement simple pagination\n\n\n\n\n\n\nManage cookies with PHP: set, access, and destroy a cookie\n\n\n\n\n\n\nUse sessions: start a session, end a session, manage session\n\n\n\n\nsecurity\n\n\n\n\n\n\n\n\nUnderstand and implement best practices in authentication\n\n\n\n\n\n\n\n\n\n\nUsing AJAX 2\n\n\n\n\n\n\nReview Javascript and JQuery client-side implementation of AJAX\n\n\n\n\n\n\nUnderstand the server-side techniques and principles used in AJAX\n\n\n\n\n\n\nCompose XML and JSON documents\n\n\n\n\n\n\nRead and traverse XML and JSON documents\n\n\n\n\n\n\n\n\n\n\nExplore web security considerations 4\n\n\n\n\n\n\nDescribe XSS, CSRF, and Session Fixation attacks\n\n\n\n\n\n\nImplement basic security measures in PHP code\n\n\n\n\n\n\n\n\n\n\nUse a PHP framework for web development 5\n\n\n\n\n\n\nUnderstand the basics of the MVC pattern\n\n\n\n\n\n\nDescribe URL routing in an MVC application\n\n\n\n\n\n\nDescribe the modular directory layout\n\n\n\n\n\n\nUnderstand purpose of a template engine, and implement views\n\n\n\n\n\n\nUnderstand and implement database migrations\n\n\n\n\n\n\nImplement models and controllers\n\n\n\n\n\n\nUnderstand the authentication mechanisms provided by the framework\n\n\n\n\n\n\nUse the framework to implement web pages and web APIs\n\n\n\n\n\n\n\n\n\n\nProgram and course rules and regulations\n\n\n\n\nWarning\n\n\nFor 420 career program courses, students must receive at least 50% on the assignment component and at least 60% on the examination component in order to obtain a passing grade for the course. Failure to do so will result in a maximum grade of 50 (the lower of 50 or the grade earned). For the purpose of this rule, quizzes are considered exams.\n\n\n\n\nAssignments are due at the due date specified by the instructor.\nAssignments received after this time are late. Assignments will not be\naccepted after due date set by instructor. In exceptional circumstances,\nsuch as illness, etc. labs submitted late will be graded provided that\nthe student has received an extension from the instructor in advance.\n\n\nEach student must submit their own individual answers to assignments,\nand shared solutions are not acceptable. Students must protect their\nwork from being easily copied by others by introducing uniqueness into\ntheir work in the choice of images used, the display styles used in the\npresentation of documents, the originality of the written descriptive\npassages, and by placing digital signatures on their original images.\n\n\nStudents are reminded that they are responsible for all material\npresented in the lecture and during the lab, and are expected to obtain\nmaterial they have missed.\n\n\nStudents must follow exactly the instructions in the lab exercises about\nhow and where to store all computer files in order for their work to be\naccepted and properly evaluated.\n\n\nDAWSON COLLEGE COMPUTER SCIENCE DEPARTMENT  POLICIES\n\n\n1. ACADEMIC INTEGRITY\n\n\nThe Computer Science Department adheres to the Dawson College Academic\nConduct policy. Students have an obligation to inform themselves of all\naspects of this policy. According to ISEP, the teacher is required to\nreport to the Sector Dean all cases of cheating and plagiarism affecting\na student\u2019s grade. (ISEP Section V-C) Students may appeal any decision\nof the teacher regarding cheating and plagiarism according to the\nmethods established by the College. The penalty for cheating or\nplagiarism may range from a zero on the work to a failure in the course.\n\n\n2. ATTENDANCE AND LATENESS\n\n\nStudents are responsible for all material covered in classes and labs,\nwhether or not they are present. Students have an obligation to arrive\non time and to remain for the duration of scheduled classes, labs and\nactivities. Students who disregard this obligation may be asked to leave\nthe class, lab or activity. Students should refer to the Institutional\nStudent Evaluation Policy\n\n\n(ISEP section IV-C) regarding attendance.\n\n\n3. RELIGIOUS HOLIDAY OBSERVANCE\n\n\nClass period(s) may be cancelled in order that the teacher can observe\nreligious holidays. Any material missed as a result, will be made up\nduring labs, class periods and alternate tutorial sessions.\n\n\nStudents, who intend to observe religious holidays, must inform their\nteachers in writing as prescribed in the ISEP Policy on Religious\nObservances (ISEP Section IV-D). Students absent from classes because of\nobservance of religious holidays will not be penalized. It must be\nemphasized, however, that this College policy should not be interpreted\nto mean that a student can receive credit for work not performed. It is\nthe student\u2019s responsibility to fulfill the requirements of the\nalternative arrangement.\n\n\n4. SOFTWARE\n\n\nThe Computer Science Department forbids the use of the computer labs it\nuses to make any copies of any software without the explicit\nauthorization of the Department. Apart from any legal action that might\narise from such unauthorized copying, the Computer Science Department\nreserves the right to discipline any student involved in such activity.\n\n\nStudents who borrow software from the College and fail to return it will\nbe placed on the defaulter list and be subject to the appropriate\npenalties.\n\n\nViruses are programs that attach themselves to a computer system without\nthe permission of those to whom the system belongs. They are\ndeliberately written to be, at worst, harmful (e.g. destroying the\ncontents of disks) and, at best, bothersome (e.g. disturbing the image\nshown on the screen). They can cause serious losses of time and effort\nfor students, staff and faculty. Any student involved in the deliberate\nspreading of viruses is subject to the most severe penalties prescribed\nby College regulations, apart from any legal action that might arise\nfrom such acts.\n\n\n5. LITERACY\n\n\nThe Computer Science Department recognizes that literacy in all its\nforms (read, written, spoken) is essential to our students in their\ncareers.\n\n\nTeachers may choose to incorporate a literacy component into the marking\nscheme for any piece of work. Teachers may use their discretion to\ninsist that any piece of work submitted for credit is revised by the\nstudent if it is unsatisfactory with regard to literacy.\n\n\nTeachers will inform all students in their courses of this policy at the\nbeginning of each semester either by including it in the course\ndescription or otherwise.\n\n\n6. CELL PHONES\n\n\nThe use of cell phones in all Computer Science lectures, labs and exams\nis prohibited.\n\n\n7. PORTABLE COMPUTERS\n\n\nThe use of portable computers in all Computer Science lectures for\npurposes other than note-taking is prohibited.\n\n\n8. STUDENT CONDUCT\n\n\nEveryone has the right to a safe and non-violent environment. Students\nare obliged to conduct themselves as stated in the Student Code of\nConduct and in the ISEP section on the roles and responsibilities of\nstudents. (ISEP section II-D)\n\n\n9. PROFESSIONAL CONDUCT POLICY\n\n\nStudents who are enrolled in the Computer Science Technology careers\nprogram must conduct themselves according to the Professional Conduct\nPolicy as described in the Program Handbook\n\n\n10. INTENSIVE COURSE CONFLICTS\n\n\nIf a student is attending an intensive course, the student must inform\nthe teacher, within the first two weeks of class, of the specific dates\nof any anticipated absences.\n\n\n11. ISEP\n\n\nThe Institutional Student Evaluation Policy (ISEP) is designed to\npromote equitable and effective evaluation of student learning and is\ntherefore a crucial policy to read and understand. The policy describes\nthe rights and obligations of students, faculty, departments, programs,\nand the College administration with regard to evaluation in all your\ncourses, including grade reviews and resolution of academic grievance.\nThe ISEP is available on the Dawson website.", 
            "title": "Outline"
        }, 
        {
            "location": "/PHP/outline/#course-outline-internet-application-development-iii", 
            "text": "Number: 420-524-DW   Ponderation:   Credits: 3", 
            "title": "COURSE OUTLINE Internet Application Development III"
        }, 
        {
            "location": "/PHP/outline/#prerequisites", 
            "text": "Successful completion of all Year 2 420.A0 courses", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/PHP/outline/#co-requisites", 
            "text": "420-517-DW Software Development Project \u2013 Java III    420-518-DW Mobile Software Development - Android    420-544-DW Data Communications   Networking     Note  You must pass this course as well as the three co-requisite courses in order to progress to the sixth semester of the Computer Science Technology Program.", 
            "title": "Co-requisites"
        }, 
        {
            "location": "/PHP/outline/#description", 
            "text": "The student will be introduced to the concepts and techniques of\nserver-side Web programming. The student will use PHP, JavaScript, and a\ndatabase to create dynamic Web applications, and Web APIs to respond to\nAJAX queries. In addition to direct PHP programming, the student is\nintroduced to a PHP framework.", 
            "title": "Description"
        }, 
        {
            "location": "/PHP/outline/#statements-of-competence", 
            "text": "Use an object-oriented development approach (016T)    Produce algorithms (016W)    Organize and use data (0170)    Assure the quality of an application (0177)", 
            "title": "STATEMENTS OF COMPETENCE"
        }, 
        {
            "location": "/PHP/outline/#contacting-teachers", 
            "text": "Jaya Nilakantan 3F.22 contact via MIO  Teacher's schedule will be posted outside the office by the end of the\nfirst week of classes.", 
            "title": "Contacting Teachers"
        }, 
        {
            "location": "/PHP/outline/#course-objectives", 
            "text": "Upon successful completion of the course the student will be able to:    Describe the PHP language and environment (016W, 0170)    Use PHP classes and objects (016T)    Add dynamic content to Web pages using PHP script files and embedded\n      PHP statements (016T, 016W)    Write server-side PHP scripts to generate HTML responses to\n      user queries. (016T, 016W)    Write PHP programs to perform server-side processing of user input\n      from Web pages with forms. (016T, 016W, 0170)    Develop Web APIs using PHP and a database (0170)    Develop Web applications using PHP, JavaScript, and a\n      database (0170)    Understand and prevent web application security risks (0177)    Develop and test Web applications using a PHP framework (016T, 0177)", 
            "title": "Course Objectives"
        }, 
        {
            "location": "/PHP/outline/#course-methodology", 
            "text": "The course will consist of two 1\u00bd-hour lectures and one 3-hour lab\nsession per week. Concepts and techniques will be presented in lectures\nand practical exercises that apply the concepts and techniques will be\ngiven in the lab sessions.", 
            "title": "Course Methodology"
        }, 
        {
            "location": "/PHP/outline/#required-readings", 
            "text": "Readings will be assigned from:    Official PHP documentation at  www.php.net    Documentation of the PHP framework    PHP The Right Way  http://www.phptherightway.com    Survive the Deep End: PHP Security\n     http://phpsecurity.readthedocs.io/en/latest", 
            "title": "Required readings"
        }, 
        {
            "location": "/PHP/outline/#assessment-of-student-performance", 
            "text": "", 
            "title": "Assessment of student performance"
        }, 
        {
            "location": "/PHP/outline/#midterm-examination-duration", 
            "text": "1   hours Worth: 30% (Week 7 or 8)", 
            "title": "Midterm Examination Duration"
        }, 
        {
            "location": "/PHP/outline/#final-examination-duration", 
            "text": "3 hours Worth: 40% (Exam period)    Assignments/ProjectsWorth: 30%", 
            "title": "Final Examination Duration"
        }, 
        {
            "location": "/PHP/outline/#course-outline", 
            "text": "Configure PHP 1    Set up a development server    Set up the PHP environment with the php.ini file      Describe PHP language basics 2    Describe the PHP language and programming environment    Describe the basic syntax of the PHP language    Understand PHP variable basics (variables, constants, numeric,   strings), naming rules and conventions     Understand how PHP and HTML interact    Recognize PHP control flow constructs: operators, conditionals,   loops       Use PHP arrays 1    Create and use numerically indexed arrays    Create and use associative arrays    Create and use multidimensional arrays    Use foreach looping structure    Use array functions      Develop PHP programs to receive and process input from HTML forms 3    Review http protocol    Create a one-part form (both HTML and PHP in one file)    Create a two-part form (HTML and PHP are separate files)    Retrieve submitted data from a variety of element types: text boxes,   text areas, checkboxes, radio buttons, drop-down lists, submit\nbuttons     Sanitize and validate input at client and server    Prevent XSS and Cross-site Request Forgery attacks    Redisplay a form after PHP validation errors (sticky forms)    Understand and implement redirect      Create reusable code blocks by defining and calling functions 1    Define and call user-defined functions with return values    Describe the scope of identifiers in PHP    Use local, global, static and references to variables    Use call by value and call by reference to pass arguments    Use the Include and Require statements      Use PHP Classes and Objects 4    Create classes with properties, methods, constants    Define constructors and destructors    Understand inheritance and polymorphism    Define static class members, and describe late static binding    Compare and contrast PHP with Java and C# in terms of Access   Modifiers, Abstract Classes, Interfaces, and Namespaces     Compare and clone objects    Perform exception handling    Understand and use magic methods      Access and populate a database using PHP 3    Connect to and query a database with PHP Data Objects (PDO)    Perform error handling    Prevent SQL injection    use cURL and DOM traversal to scrape web pages and populate a   database       Midterm Exam 1    Understand and use state maintenance techniques 3    Explore output buffering and browser caching    Maintain state using query string    Implement simple pagination    Manage cookies with PHP: set, access, and destroy a cookie    Use sessions: start a session, end a session, manage session   security     Understand and implement best practices in authentication      Using AJAX 2    Review Javascript and JQuery client-side implementation of AJAX    Understand the server-side techniques and principles used in AJAX    Compose XML and JSON documents    Read and traverse XML and JSON documents      Explore web security considerations 4    Describe XSS, CSRF, and Session Fixation attacks    Implement basic security measures in PHP code      Use a PHP framework for web development 5    Understand the basics of the MVC pattern    Describe URL routing in an MVC application    Describe the modular directory layout    Understand purpose of a template engine, and implement views    Understand and implement database migrations    Implement models and controllers    Understand the authentication mechanisms provided by the framework    Use the framework to implement web pages and web APIs", 
            "title": "Course Outline"
        }, 
        {
            "location": "/PHP/outline/#program-and-course-rules-and-regulations", 
            "text": "Warning  For 420 career program courses, students must receive at least 50% on the assignment component and at least 60% on the examination component in order to obtain a passing grade for the course. Failure to do so will result in a maximum grade of 50 (the lower of 50 or the grade earned). For the purpose of this rule, quizzes are considered exams.   Assignments are due at the due date specified by the instructor.\nAssignments received after this time are late. Assignments will not be\naccepted after due date set by instructor. In exceptional circumstances,\nsuch as illness, etc. labs submitted late will be graded provided that\nthe student has received an extension from the instructor in advance.  Each student must submit their own individual answers to assignments,\nand shared solutions are not acceptable. Students must protect their\nwork from being easily copied by others by introducing uniqueness into\ntheir work in the choice of images used, the display styles used in the\npresentation of documents, the originality of the written descriptive\npassages, and by placing digital signatures on their original images.  Students are reminded that they are responsible for all material\npresented in the lecture and during the lab, and are expected to obtain\nmaterial they have missed.  Students must follow exactly the instructions in the lab exercises about\nhow and where to store all computer files in order for their work to be\naccepted and properly evaluated.", 
            "title": "Program and course rules and regulations"
        }, 
        {
            "location": "/PHP/outline/#dawson-college-computer-science-department-policies", 
            "text": "", 
            "title": "DAWSON COLLEGE COMPUTER SCIENCE DEPARTMENT  POLICIES"
        }, 
        {
            "location": "/PHP/outline/#1-academic-integrity", 
            "text": "The Computer Science Department adheres to the Dawson College Academic\nConduct policy. Students have an obligation to inform themselves of all\naspects of this policy. According to ISEP, the teacher is required to\nreport to the Sector Dean all cases of cheating and plagiarism affecting\na student\u2019s grade. (ISEP Section V-C) Students may appeal any decision\nof the teacher regarding cheating and plagiarism according to the\nmethods established by the College. The penalty for cheating or\nplagiarism may range from a zero on the work to a failure in the course.", 
            "title": "1. ACADEMIC INTEGRITY"
        }, 
        {
            "location": "/PHP/outline/#2-attendance-and-lateness", 
            "text": "Students are responsible for all material covered in classes and labs,\nwhether or not they are present. Students have an obligation to arrive\non time and to remain for the duration of scheduled classes, labs and\nactivities. Students who disregard this obligation may be asked to leave\nthe class, lab or activity. Students should refer to the Institutional\nStudent Evaluation Policy  (ISEP section IV-C) regarding attendance.", 
            "title": "2. ATTENDANCE AND LATENESS"
        }, 
        {
            "location": "/PHP/outline/#3-religious-holiday-observance", 
            "text": "Class period(s) may be cancelled in order that the teacher can observe\nreligious holidays. Any material missed as a result, will be made up\nduring labs, class periods and alternate tutorial sessions.  Students, who intend to observe religious holidays, must inform their\nteachers in writing as prescribed in the ISEP Policy on Religious\nObservances (ISEP Section IV-D). Students absent from classes because of\nobservance of religious holidays will not be penalized. It must be\nemphasized, however, that this College policy should not be interpreted\nto mean that a student can receive credit for work not performed. It is\nthe student\u2019s responsibility to fulfill the requirements of the\nalternative arrangement.", 
            "title": "3. RELIGIOUS HOLIDAY OBSERVANCE"
        }, 
        {
            "location": "/PHP/outline/#4-software", 
            "text": "The Computer Science Department forbids the use of the computer labs it\nuses to make any copies of any software without the explicit\nauthorization of the Department. Apart from any legal action that might\narise from such unauthorized copying, the Computer Science Department\nreserves the right to discipline any student involved in such activity.  Students who borrow software from the College and fail to return it will\nbe placed on the defaulter list and be subject to the appropriate\npenalties.  Viruses are programs that attach themselves to a computer system without\nthe permission of those to whom the system belongs. They are\ndeliberately written to be, at worst, harmful (e.g. destroying the\ncontents of disks) and, at best, bothersome (e.g. disturbing the image\nshown on the screen). They can cause serious losses of time and effort\nfor students, staff and faculty. Any student involved in the deliberate\nspreading of viruses is subject to the most severe penalties prescribed\nby College regulations, apart from any legal action that might arise\nfrom such acts.", 
            "title": "4. SOFTWARE"
        }, 
        {
            "location": "/PHP/outline/#5-literacy", 
            "text": "The Computer Science Department recognizes that literacy in all its\nforms (read, written, spoken) is essential to our students in their\ncareers.  Teachers may choose to incorporate a literacy component into the marking\nscheme for any piece of work. Teachers may use their discretion to\ninsist that any piece of work submitted for credit is revised by the\nstudent if it is unsatisfactory with regard to literacy.  Teachers will inform all students in their courses of this policy at the\nbeginning of each semester either by including it in the course\ndescription or otherwise.", 
            "title": "5. LITERACY"
        }, 
        {
            "location": "/PHP/outline/#6-cell-phones", 
            "text": "The use of cell phones in all Computer Science lectures, labs and exams\nis prohibited.", 
            "title": "6. CELL PHONES"
        }, 
        {
            "location": "/PHP/outline/#7-portable-computers", 
            "text": "The use of portable computers in all Computer Science lectures for\npurposes other than note-taking is prohibited.", 
            "title": "7. PORTABLE COMPUTERS"
        }, 
        {
            "location": "/PHP/outline/#8-student-conduct", 
            "text": "Everyone has the right to a safe and non-violent environment. Students\nare obliged to conduct themselves as stated in the Student Code of\nConduct and in the ISEP section on the roles and responsibilities of\nstudents. (ISEP section II-D)", 
            "title": "8. STUDENT CONDUCT"
        }, 
        {
            "location": "/PHP/outline/#9-professional-conduct-policy", 
            "text": "Students who are enrolled in the Computer Science Technology careers\nprogram must conduct themselves according to the Professional Conduct\nPolicy as described in the Program Handbook", 
            "title": "9. PROFESSIONAL CONDUCT POLICY"
        }, 
        {
            "location": "/PHP/outline/#10-intensive-course-conflicts", 
            "text": "If a student is attending an intensive course, the student must inform\nthe teacher, within the first two weeks of class, of the specific dates\nof any anticipated absences.", 
            "title": "10. INTENSIVE COURSE CONFLICTS"
        }, 
        {
            "location": "/PHP/outline/#11-isep", 
            "text": "The Institutional Student Evaluation Policy (ISEP) is designed to\npromote equitable and effective evaluation of student learning and is\ntherefore a crucial policy to read and understand. The policy describes\nthe rights and obligations of students, faculty, departments, programs,\nand the College administration with regard to evaluation in all your\ncourses, including grade reviews and resolution of academic grievance.\nThe ISEP is available on the Dawson website.", 
            "title": "11. ISEP"
        }, 
        {
            "location": "/PHP/labs/getting-started/", 
            "text": "Note\n\n\nI personally be using my own Ubuntu system and not a VM. You are free to do whichever you wish, but the VM environment below can be quite slow.\n\n\n\n\nIntroduction to Vagrant and PHP with text editor, Home setup\n\n\nPart 1 \u2013 Vagrant virtual machine provisioning\n\n\nWe are using Vagrant in this course to ensure all students have the same\nvirtual machine configured on all lab computers and at home. Vagrant is\na tool that greatly helps sharing Virtual Machines with the exact same\nconfiguration. The vagrant box that we use is Homestead, which is\nrecommended by Laravel (a PHP framework that we will use later in the\nsemester).\n\n\nHomestead has the following development stack preinstalled: Ubuntu\nLinux, NginX web server, PostGres database, PHP.\n\n\nIn the first part of the lab, we will explore our system, make sure that\nwe can boot the virtual machine on the lab workstation and execute a\nbasic PHP script.\n\n\nCreate the Homestead folder\n\n\nCopy the folder \nS:\\\\CompSci\\\\524\\\\Homestead to your H: drive\n. You should\nnow have H:\\Homestead directory with the same contents as\n\nS:\\\\CompSci\\\\524\\\\Homestead\n.\n\n\n**Create the shared folder\n\n\nOne of the really nice features of Vagrant is how easy it is to get both\nthe host system (Windows 10 machine) and the virtual machine (Ubuntu) to\nsee and share the same directory.\n\n\nCreate a folder called PHPCode in your H: drive. You will save all your\nlabs and projects in this folder. Create the following directories\nwithin PHPCode to match the lab setup:\n\n\n\n\n\n\n\n\nlabs\n\n\n\n\n\n\nbadresto\n\n\n\n\n\n\nreader\n\n\n\n\n\n\ndawson\n\n\n\n\n\n\nnews\n\n\n\n\n\n\ntodo\n\n\n\n\n\n\n\n\n(spoiler: these are some of the labs and projects you\u2019ll be working on\nthis semester!)\n\n\nGet your ssh keys\n\n\nCheck if you already have a .ssh folder in your home directory (H: drive\nshould be setup as your $HOME in the labs). If you have an .ssh\ndirectory, you have already generated ssh keys (probably for git). If\nnot:\n\n\nOpen a Git Bash console in your H drive (right-click in Windows\nExplorer, Git Bash Here)\n\n\nMake sure you are in H: \n pwd\n\n\nRun these commands:\n\n$ mkdir -p .ssh \n \ncd\n .ssh\n\n\n\n$ ssh-keygen -t rsa -b \n4096\n -C \nyouremail@address.here\n\n\n\nPress enter to save the key in \n/h/.ssh/id\\_rsa\n\n\nBoot the virtual machine configured for the PHP course\n\n\nYou will be doing this every lab:\n\n\nOpen a Git Bash window in \nH:/Homestead\n (right-click in explorer). This\nopens a Bash shell emulator on your Window system.\n\n\nMake sure you are in \n/h/Homestead\n\n\nRun this command:\n\n$ vagrant up\n\n\n\nWhen this command finishes (a few minutes) your Virtual Machine is up\nand running!!\n\n\nSSH into the virtual machine\n\n\nOur Ubuntu VM is headless \u2013 meaning that we don\u2019t have a GUI interface\nto Linux. Yay Command line only\n\n\nWhenever you want to log into the booted VM (e.g., to check the\nconfiguration or access the database), type in this command from your\nGit Bash window in \nH:\\\\Homestead\n.\n\n\n$ vagrant ssh\n\n\nYou are now in the VM!\n\n\ncd\n to the Code directory \n-\ngt\n; you are now in the PHPCode shared folder\nSo the \nH:/PHPCode\n folder in Windows is the same as the\n\n/home/vagrant/Code\n folder in the VM.\n\n\n\n\nNOTE: there is a known Vagrant bug where you may not see the command\nprompt while \nssh\n-ing with vagrant \nssh\n. If that is that case, exit and\ntry \nssh vagrant@192.168.10.10\n, with password \nvagrant\n\n\n\n\nThis \u201cmagic\u201d of the shared directory is courtesy of the \nHomestead.yaml\n\nfile. If you open it in Notepad++ (or use less or nano or vim from the\nLinux side), you\u2019ll see a section that indicates the folder mapping.\n\n\nRun a simple script\n\n\nOnce the VM is up and running, we can run PHP scripts.\n\n\nCopy \nS:/CompSci/524/lab0\n to your \nH:/PHPCode/labs folder\n.\n\n\nOpen a browser (hint: Firefox is my favourite), and go to\n\nhttp://labs.app/lab0\n\n\nYou should see a page that contains output of the PHP configuration on\nthe VM. Don\u2019t worry too much about the content, if you see it, you know\nyour VM is serving up your PHP files as required.\n\n\nHow does this work?\n\n\nAll the lab computers have been set to associate certain hostnames to\nitself: you can see this in the file\n\n\nC:/Windows/System32/drivers/etc/hosts\n\n\nNotice, for example, that the host labs.app is associated with the IP\naddress \n192.168.10.10\n (in fact all hostnames are associated with this IP\naddress). The hosts file enables you to override the DNS for a domain on\nthat machine. Your machine will look at the IP address provided\n(\n192.168.10.10\n) instead of going through a DNS. This IP address\n(\n192.168\n) is in the private IP address range, so we can map with no\nworries.\n\n\nNow look at \nH:/Homestead/Homestead.yaml\n: you will see that the IP\naddress is the one being used by you Vagrant VM 9and its NginX web\nserver. Further down, you see that the sites are associated with\ndifferent folders in VM; these folders are all in the shared\n\n/home/vagrant/Code\n folder (which is your \nH:/PHPCode\n folder)\n\n\nIf you open the \nlab0/index.php file\n, you will a single line in the php\ntags \n\u2013 phpinfo()\n is the function that outputs the PHP configuration.\n\n\nNginX, the web server, is configured by default to return \nindex.html\n,\n\nindex.html\n directly, or interpret \nindex.php\n through the PHP interpreter.\nThat\u2019s what happened when you browsed to \nlabs.app/lab0\n.\n\n\nCreate and debug your own PHP Script\n\n\nCreate a folder \nH:\\\\PHPCode\\\\labs\\\\lab1\n (or in the Linux VM\n\nCode/labs/lab1\n in the VM), and write a PHP script named index.php that\nwill create the output as shown in the image, using a text editor like\nNotepad++ or Atom.\n\n\n\n\n\n\n use HTML5\n    tags, including doctype and html tag\n\n\n\n\n\n\nthe php code will fill in the contents of a table, with echo\u2019s\n    within a nested loop\n\n\n\n\n\n\nno styling is required\n\n\n\n\n\n\nrecall: PHP variable names start with $; for loops look pretty much\n    the same as java.\n\n\n\n\n\n\nPHP coding\n    conventions\n\n    use the \u201cEgyptian brackets\u201d/\u201dK\nR style braces\u201d in control structures\n    \u2013 which means the opening brace is written on the same line as the\n    conditional clause and the closing brace is always written on its\n    own line.\n\n\n\n\n\n\n\n\nE.g.:\n\n\nif ($a != 2) {\n\n\n$a = 2;\n\n\n}\n\n\n(As an aside, this is also the\n \n*common Java style\n*\n).\n\n\n\n\nTesting the PHP Script\n\n\nBrowse to \nhttp://labs.app/lab1\n. Since we\nnamed the file index.php, NginX will open it by default. If you named it\nsomething else, write it in the address bar.\n\n\n\nThe results of the program should appear!\n\n\nRecall: Firefox (as well as the other major browsers) come with a suite\nof developer tools. Open the menu in Firefox, select Developer and\nToggle Tools (or Ctrl+Shift+I). You will see the http messages and other\ninformation that is \nvery\n useful when debugging web applications.\n\n\nShutting down the VM\n\n\nUse the command vagrant halt to gracefully shutdown your VM. Note that\nthe VM is subject to deep-freeze, so any changes anywhere except the\nshared folder will be lost the next time you log in.\n\n\nSOLVING INTERMITTENT 502 BAD GATEWAY ISSUES\n\n\nIf you are victim, you may have to make sure that nginx and php config\nmatch:\n\n\nGo to \n/etc/php/7.1/fpm/pool.d/\n , edit \nwww.conf\n (use \nsudo nano\n) and edit\nthe line \nlisten = /run/php/php7.1-fpm.sock\n to\n\nlisten = var/run/php/php7.1-fpm.sock\n\n\nExit and save the file, then run \nsudo service php7.1-fpm restart\n\n\nSetting up your laptop/home system\n\n\nThe following instructions are provided for a Windows 7.1+ syste, If you\nare running Linux or IOS, the steps will be simpler. See this\n\nlink\n, and compare to the notes\nbelow.\n\n\n\n\n\n\nmake sure your BIOS/UEFI supports hardware virtualization and it is\n    enabled\n\n\n\n\n\n\nmake sure HyperV is disabled (Control panel - uninstall a program \u2013\n    program and features \u2013 turn Windows features on/off \u2013\n    uncheck HyperV)\n\n\n\n\n\n\ninstall Git for Windows to have gitbash:\n    \nhttps://git-for-windows.github.io\n\n\n\n\nchoose default install options (select Windows\n    Explorer Integration. Select \nUse Git from the Windows Command\n    Prompt\n radio button so that Git can be run from the\n    command line.)\n\n\n\n\n\n\n\n\ninstall VirtualBox 5.1.x (latest version) :\n    \nhttps://www.virtualbox.org/wiki/Downloads\n\n\n\n\n\n\ninstall Vagrant 1.9.x (latest version):\n    \nhttps://www.vagrantup.com/downloads.html\n\n\n\n\n\n\nif desired, setup your hosts to be the same as school\n\n\n\n\n\n\nopen Notepad as admin\n\n\n\n\n\n\nEdit C:/Windows/System32/drivers/etc/hosts (nb: make sure Notepad is\n    looking at all files, not just .txt)\n\n\n\n\n\n\nAdd to the end:\n\n\n\n\n\n\n192.168.10.10 dawson.app\n\n192.168.10.10 news.app\n\n192.168.10.10 todo.app\n\n192.168.10.10 labs.app\n\n192.168.10.10 reader.app\n\n192.168.10.10 badresto.app\n\n\n1.  get your ssh keys, if required. Follow the steps in the lab above to\n    check if they exist in the $HOME directory\n\n\n\n\n\n\ndecide where you want your Homestead and PHPCode directories and\n    make them\n\n\n\n\n\n\nIn the containing directory:\n\n\n\n\n\n\nopen gitbash\n\n\n\n\n\n\nrun the following commands:\n\n$ vagrant box add laravel/homestead\n\n\n\n$ git clone https://github.com/laravel/homestead.git Homestead\n\n\n\n$ \ncd\n Homestead\n\n\n\n$ git checkout v5.4.0\n\n\n\n$ bash init.sh\n\n\n\n\n\nedit the \nHomestead/Homestead.yaml\n file (look at the one you have in\nyour \nH:\n drive)\n\n\n\n\n\n\n\n\nin the folders section, provide to mapping to the PHPCode folder you\n    created in step 8. e.g.,\n\n\n\n\n\n\nfolders:\n\n\n\n\nmap: \nh:/PHPCode\n\n\n\n\nto: \n/home/vagrant/Code\n\n\n\n\nif you added the sites to the \netc/hosts\n files, also add them to\n    the \nHomestead.yaml\n. For example:\n\nsites:\n\n- map: labs.app\n\n\n\n\n\nto: \n/home/vagrant/Code/labs\n\n\n\n\n\n\neach time you want to boot up:\nvagrant up\n\n\n\n\n\n\nto ssh in: either \nvagrant ssh\n or \nssh vagrant@192.168.10.10\n, with\n    password \nvagrant\n\n\n\n\n\n\nto shut down: \nvagrant halt", 
            "title": "Getting started"
        }, 
        {
            "location": "/PHP/labs/getting-started/#introduction-to-vagrant-and-php-with-text-editor-home-setup", 
            "text": "", 
            "title": "Introduction to Vagrant and PHP with text editor, Home setup"
        }, 
        {
            "location": "/PHP/labs/getting-started/#part-1-vagrant-virtual-machine-provisioning", 
            "text": "We are using Vagrant in this course to ensure all students have the same\nvirtual machine configured on all lab computers and at home. Vagrant is\na tool that greatly helps sharing Virtual Machines with the exact same\nconfiguration. The vagrant box that we use is Homestead, which is\nrecommended by Laravel (a PHP framework that we will use later in the\nsemester).  Homestead has the following development stack preinstalled: Ubuntu\nLinux, NginX web server, PostGres database, PHP.  In the first part of the lab, we will explore our system, make sure that\nwe can boot the virtual machine on the lab workstation and execute a\nbasic PHP script.", 
            "title": "Part 1 \u2013 Vagrant virtual machine provisioning"
        }, 
        {
            "location": "/PHP/labs/getting-started/#create-the-homestead-folder", 
            "text": "Copy the folder  S:\\\\CompSci\\\\524\\\\Homestead to your H: drive . You should\nnow have H:\\Homestead directory with the same contents as S:\\\\CompSci\\\\524\\\\Homestead .  **Create the shared folder  One of the really nice features of Vagrant is how easy it is to get both\nthe host system (Windows 10 machine) and the virtual machine (Ubuntu) to\nsee and share the same directory.  Create a folder called PHPCode in your H: drive. You will save all your\nlabs and projects in this folder. Create the following directories\nwithin PHPCode to match the lab setup:     labs    badresto    reader    dawson    news    todo     (spoiler: these are some of the labs and projects you\u2019ll be working on\nthis semester!)", 
            "title": "Create the Homestead folder"
        }, 
        {
            "location": "/PHP/labs/getting-started/#get-your-ssh-keys", 
            "text": "Check if you already have a .ssh folder in your home directory (H: drive\nshould be setup as your $HOME in the labs). If you have an .ssh\ndirectory, you have already generated ssh keys (probably for git). If\nnot:  Open a Git Bash console in your H drive (right-click in Windows\nExplorer, Git Bash Here)  Make sure you are in H:   pwd  Run these commands: $ mkdir -p .ssh    cd  .ssh  $ ssh-keygen -t rsa -b  4096  -C  youremail@address.here  \nPress enter to save the key in  /h/.ssh/id\\_rsa", 
            "title": "Get your ssh keys"
        }, 
        {
            "location": "/PHP/labs/getting-started/#boot-the-virtual-machine-configured-for-the-php-course", 
            "text": "You will be doing this every lab:  Open a Git Bash window in  H:/Homestead  (right-click in explorer). This\nopens a Bash shell emulator on your Window system.  Make sure you are in  /h/Homestead  Run this command: $ vagrant up  When this command finishes (a few minutes) your Virtual Machine is up\nand running!!", 
            "title": "Boot the virtual machine configured for the PHP course"
        }, 
        {
            "location": "/PHP/labs/getting-started/#ssh-into-the-virtual-machine", 
            "text": "Our Ubuntu VM is headless \u2013 meaning that we don\u2019t have a GUI interface\nto Linux. Yay Command line only  Whenever you want to log into the booted VM (e.g., to check the\nconfiguration or access the database), type in this command from your\nGit Bash window in  H:\\\\Homestead .  $ vagrant ssh \nYou are now in the VM!  cd  to the Code directory  - gt ; you are now in the PHPCode shared folder\nSo the  H:/PHPCode  folder in Windows is the same as the /home/vagrant/Code  folder in the VM.   NOTE: there is a known Vagrant bug where you may not see the command\nprompt while  ssh -ing with vagrant  ssh . If that is that case, exit and\ntry  ssh vagrant@192.168.10.10 , with password  vagrant   This \u201cmagic\u201d of the shared directory is courtesy of the  Homestead.yaml \nfile. If you open it in Notepad++ (or use less or nano or vim from the\nLinux side), you\u2019ll see a section that indicates the folder mapping.", 
            "title": "SSH into the virtual machine"
        }, 
        {
            "location": "/PHP/labs/getting-started/#run-a-simple-script", 
            "text": "Once the VM is up and running, we can run PHP scripts.  Copy  S:/CompSci/524/lab0  to your  H:/PHPCode/labs folder .  Open a browser (hint: Firefox is my favourite), and go to http://labs.app/lab0  You should see a page that contains output of the PHP configuration on\nthe VM. Don\u2019t worry too much about the content, if you see it, you know\nyour VM is serving up your PHP files as required.  How does this work?  All the lab computers have been set to associate certain hostnames to\nitself: you can see this in the file  C:/Windows/System32/drivers/etc/hosts  Notice, for example, that the host labs.app is associated with the IP\naddress  192.168.10.10  (in fact all hostnames are associated with this IP\naddress). The hosts file enables you to override the DNS for a domain on\nthat machine. Your machine will look at the IP address provided\n( 192.168.10.10 ) instead of going through a DNS. This IP address\n( 192.168 ) is in the private IP address range, so we can map with no\nworries.  Now look at  H:/Homestead/Homestead.yaml : you will see that the IP\naddress is the one being used by you Vagrant VM 9and its NginX web\nserver. Further down, you see that the sites are associated with\ndifferent folders in VM; these folders are all in the shared /home/vagrant/Code  folder (which is your  H:/PHPCode  folder)  If you open the  lab0/index.php file , you will a single line in the php\ntags  \u2013 phpinfo()  is the function that outputs the PHP configuration.  NginX, the web server, is configured by default to return  index.html , index.html  directly, or interpret  index.php  through the PHP interpreter.\nThat\u2019s what happened when you browsed to  labs.app/lab0 .", 
            "title": "Run a simple script"
        }, 
        {
            "location": "/PHP/labs/getting-started/#create-and-debug-your-own-php-script", 
            "text": "Create a folder  H:\\\\PHPCode\\\\labs\\\\lab1  (or in the Linux VM Code/labs/lab1  in the VM), and write a PHP script named index.php that\nwill create the output as shown in the image, using a text editor like\nNotepad++ or Atom.     use HTML5\n    tags, including doctype and html tag    the php code will fill in the contents of a table, with echo\u2019s\n    within a nested loop    no styling is required    recall: PHP variable names start with $; for loops look pretty much\n    the same as java.    PHP coding\n    conventions \n    use the \u201cEgyptian brackets\u201d/\u201dK R style braces\u201d in control structures\n    \u2013 which means the opening brace is written on the same line as the\n    conditional clause and the closing brace is always written on its\n    own line.     E.g.:  if ($a != 2) {  $a = 2;  }  (As an aside, this is also the   *common Java style\n* ).", 
            "title": "Create and debug your own PHP Script"
        }, 
        {
            "location": "/PHP/labs/getting-started/#testing-the-php-script", 
            "text": "Browse to  http://labs.app/lab1 . Since we\nnamed the file index.php, NginX will open it by default. If you named it\nsomething else, write it in the address bar.  \nThe results of the program should appear!  Recall: Firefox (as well as the other major browsers) come with a suite\nof developer tools. Open the menu in Firefox, select Developer and\nToggle Tools (or Ctrl+Shift+I). You will see the http messages and other\ninformation that is  very  useful when debugging web applications.", 
            "title": "Testing the PHP Script"
        }, 
        {
            "location": "/PHP/labs/getting-started/#shutting-down-the-vm", 
            "text": "Use the command vagrant halt to gracefully shutdown your VM. Note that\nthe VM is subject to deep-freeze, so any changes anywhere except the\nshared folder will be lost the next time you log in.", 
            "title": "Shutting down the VM"
        }, 
        {
            "location": "/PHP/labs/getting-started/#solving-intermittent-502-bad-gateway-issues", 
            "text": "If you are victim, you may have to make sure that nginx and php config\nmatch:  Go to  /etc/php/7.1/fpm/pool.d/  , edit  www.conf  (use  sudo nano ) and edit\nthe line  listen = /run/php/php7.1-fpm.sock  to listen = var/run/php/php7.1-fpm.sock  Exit and save the file, then run  sudo service php7.1-fpm restart", 
            "title": "SOLVING INTERMITTENT 502 BAD GATEWAY ISSUES"
        }, 
        {
            "location": "/PHP/labs/getting-started/#setting-up-your-laptophome-system", 
            "text": "The following instructions are provided for a Windows 7.1+ syste, If you\nare running Linux or IOS, the steps will be simpler. See this link , and compare to the notes\nbelow.    make sure your BIOS/UEFI supports hardware virtualization and it is\n    enabled    make sure HyperV is disabled (Control panel - uninstall a program \u2013\n    program and features \u2013 turn Windows features on/off \u2013\n    uncheck HyperV)    install Git for Windows to have gitbash:\n     https://git-for-windows.github.io   choose default install options (select Windows\n    Explorer Integration. Select  Use Git from the Windows Command\n    Prompt  radio button so that Git can be run from the\n    command line.)     install VirtualBox 5.1.x (latest version) :\n     https://www.virtualbox.org/wiki/Downloads    install Vagrant 1.9.x (latest version):\n     https://www.vagrantup.com/downloads.html    if desired, setup your hosts to be the same as school    open Notepad as admin    Edit C:/Windows/System32/drivers/etc/hosts (nb: make sure Notepad is\n    looking at all files, not just .txt)    Add to the end:    192.168.10.10 dawson.app\n\n192.168.10.10 news.app\n\n192.168.10.10 todo.app\n\n192.168.10.10 labs.app\n\n192.168.10.10 reader.app\n\n192.168.10.10 badresto.app \n1.  get your ssh keys, if required. Follow the steps in the lab above to\n    check if they exist in the $HOME directory    decide where you want your Homestead and PHPCode directories and\n    make them    In the containing directory:    open gitbash    run the following commands: $ vagrant box add laravel/homestead  $ git clone https://github.com/laravel/homestead.git Homestead  $  cd  Homestead  $ git checkout v5.4.0  $ bash init.sh   edit the  Homestead/Homestead.yaml  file (look at the one you have in\nyour  H:  drive)     in the folders section, provide to mapping to the PHPCode folder you\n    created in step 8. e.g.,    folders:   map:  h:/PHPCode   to:  /home/vagrant/Code   if you added the sites to the  etc/hosts  files, also add them to\n    the  Homestead.yaml . For example: sites:\n\n- map: labs.app   to:  /home/vagrant/Code/labs    each time you want to boot up: vagrant up    to ssh in: either  vagrant ssh  or  ssh vagrant@192.168.10.10 , with\n    password  vagrant    to shut down:  vagrant halt", 
            "title": "Setting up your laptop/home system"
        }
    ]
}
{
    "docs": [
        {
            "location": "/", 
            "text": "CompSci HQ \nfor all things confusing\n\n\nIntroduction\n\n\nWelcome to the wiki! \ud83c\udf89\n\n\nThese are my notes for Semester 5 of Dawson's Computer Science program. It consists, among other things, of PHP, Java, Android and Git.\n\n\nThis is a work in progress! To contribute or any other issues, ask \n@sirMerr", 
            "title": "Home"
        }, 
        {
            "location": "/#compsci-hq-for-all-things-confusing", 
            "text": "", 
            "title": "CompSci HQ for all things confusing"
        }, 
        {
            "location": "/#introduction", 
            "text": "Welcome to the wiki! \ud83c\udf89  These are my notes for Semester 5 of Dawson's Computer Science program. It consists, among other things, of PHP, Java, Android and Git.  This is a work in progress! To contribute or any other issues, ask  @sirMerr", 
            "title": "Introduction"
        }, 
        {
            "location": "/how-to-document/", 
            "text": "You have a few options. \nMake sure you have permissions\n with the Wiki repo here: \nhttps://github.com/Jogogoplay/hq\n if using that one.\n\n\nMake a pull request\n\n\n\n\nAdd \n.md\n files to \n./docs\n (on Github or locally)\n\n\nAdd the path to \npages\n in \n./mkdocs.yml\n\n\nMake a pull request\n\n\nSempai \n@sirmerr\n or others will deploy it\n\n\n\n\nDeploy it yourself\n\n\nInstall MkDocs\n\n\nBefore installing \nMkDocs\n, you need to make sure you have Python and \npip\n\n\u2013 the Python package manager \u2013 up and running. You can verify if you're already\ngood to go with the following commands:\n\n\n1\n2\n3\n4\npython --version\n\n# Python 2.7.13\n\npip --version\n\n# pip 9.0.1\n\n\n\n\n\n\n\nInstalling and verifying MkDocs is as simple as:\n\n\n1\n2\npip install mkdocs \n mkdocs --version\n\n# mkdocs, version 0.16.0\n\n\n\n\n\n\n\nInstalling Material\n\n\nusing pip\n\n\nMaterial can be installed with \npip\n:\n\n\n1\npip install mkdocs-material\n\n\n\n\n\n\nAdd Docs Locally\n\n\nclone repo\n\n\n1\ngit clone git@github.com:Jogogoplay/hq.git`\n\n\n\n\n\n\nadd docs\n\n\n\n\nAdd \n.md\n files to \n./docs\n    \n\n\nAdd the path to \npages\n in \n./mkdocs.yml\n\n\n\n\nserve locally\n\n\n1\nmkdocs serve\n\n\n\n\nYou can verify at \nhttp://127.0.0.1:8000/\n (default) if you're scurred\n\n\ndeploy to gh-pages\n\n\n1\nmkdocs gh-deploy\n\n\n\n\nVoila! You're the best writer ever! Check your work at \nhttps://jogogoplay.github.io/\n\n\nMaking your own docs\n\n\nCheck out \nhttp://squidfunk.github.io/mkdocs-material/\n to start your own Mkdocs-material project! Otherwise, look above to contribute to mine or to clone it.\n\n\nBelow is my \nmkdocs.yml\n configuration file. Replace \nFiracode\n with your own font or remove if not needed, but otherwise this has all you need to have all the extensions and setup (you still need to install mkdocs, instructions above or at the \nmkdocs-material site\n)\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\nsite_name: CompSci HQ\nsite_description: \nNotes for Semester 5 of Computer Science at Dawson\n\nsite_author: \nTiffany\n\nsite_url: \nhttps://sirmerr.github.io/compsci-notes/\n\nsite_favicon: \nimages/favicon.ico\n\n\n# Documentation and theme\ntheme: \nmaterial\n\n\n# Options\nextra:\n  palette:\n    primary: \nblue-grey\n\n    accent: \nblue\n\n  font:\n    text: \nFiracode\n\n    code: \nFiracode\n\n\n# Extensions\nmarkdown_extensions:\n  - admonition\n  - codehilite(guess_lang=false, linenums=true)\n  - toc(permalink=true)\n  - pymdownx.arithmatex\n  - pymdownx.betterem(smart_enable=all)\n  - pymdownx.caret\n  - pymdownx.critic\n  - pymdownx.emoji:\n      emoji_generator: !!python/name:pymdownx.emoji.to_svg\n  - pymdownx.inlinehilite\n  - pymdownx.magiclink\n  - pymdownx.mark\n  - pymdownx.smartsymbols\n  - pymdownx.superfences\n  - pymdownx.tasklist(custom_checkbox=true)\n  - pymdownx.tilde", 
            "title": "How to document"
        }, 
        {
            "location": "/how-to-document/#make-a-pull-request", 
            "text": "Add  .md  files to  ./docs  (on Github or locally)  Add the path to  pages  in  ./mkdocs.yml  Make a pull request  Sempai  @sirmerr  or others will deploy it", 
            "title": "Make a pull request"
        }, 
        {
            "location": "/how-to-document/#deploy-it-yourself", 
            "text": "", 
            "title": "Deploy it yourself"
        }, 
        {
            "location": "/how-to-document/#install-mkdocs", 
            "text": "Before installing  MkDocs , you need to make sure you have Python and  pip \n\u2013 the Python package manager \u2013 up and running. You can verify if you're already\ngood to go with the following commands:  1\n2\n3\n4 python --version # Python 2.7.13 \npip --version # pip 9.0.1    Installing and verifying MkDocs is as simple as:  1\n2 pip install mkdocs   mkdocs --version # mkdocs, version 0.16.0", 
            "title": "Install MkDocs"
        }, 
        {
            "location": "/how-to-document/#installing-material", 
            "text": "", 
            "title": "Installing Material"
        }, 
        {
            "location": "/how-to-document/#using-pip", 
            "text": "Material can be installed with  pip :  1 pip install mkdocs-material", 
            "title": "using pip"
        }, 
        {
            "location": "/how-to-document/#add-docs-locally", 
            "text": "", 
            "title": "Add Docs Locally"
        }, 
        {
            "location": "/how-to-document/#clone-repo", 
            "text": "1 git clone git@github.com:Jogogoplay/hq.git`", 
            "title": "clone repo"
        }, 
        {
            "location": "/how-to-document/#add-docs", 
            "text": "Add  .md  files to  ./docs       Add the path to  pages  in  ./mkdocs.yml", 
            "title": "add docs"
        }, 
        {
            "location": "/how-to-document/#serve-locally", 
            "text": "1 mkdocs serve  \nYou can verify at  http://127.0.0.1:8000/  (default) if you're scurred", 
            "title": "serve locally"
        }, 
        {
            "location": "/how-to-document/#deploy-to-gh-pages", 
            "text": "1 mkdocs gh-deploy  \nVoila! You're the best writer ever! Check your work at  https://jogogoplay.github.io/", 
            "title": "deploy to gh-pages"
        }, 
        {
            "location": "/how-to-document/#making-your-own-docs", 
            "text": "Check out  http://squidfunk.github.io/mkdocs-material/  to start your own Mkdocs-material project! Otherwise, look above to contribute to mine or to clone it.  Below is my  mkdocs.yml  configuration file. Replace  Firacode  with your own font or remove if not needed, but otherwise this has all you need to have all the extensions and setup (you still need to install mkdocs, instructions above or at the  mkdocs-material site )   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36 site_name: CompSci HQ\nsite_description:  Notes for Semester 5 of Computer Science at Dawson \nsite_author:  Tiffany \nsite_url:  https://sirmerr.github.io/compsci-notes/ \nsite_favicon:  images/favicon.ico \n\n# Documentation and theme\ntheme:  material \n\n# Options\nextra:\n  palette:\n    primary:  blue-grey \n    accent:  blue \n  font:\n    text:  Firacode \n    code:  Firacode \n\n# Extensions\nmarkdown_extensions:\n  - admonition\n  - codehilite(guess_lang=false, linenums=true)\n  - toc(permalink=true)\n  - pymdownx.arithmatex\n  - pymdownx.betterem(smart_enable=all)\n  - pymdownx.caret\n  - pymdownx.critic\n  - pymdownx.emoji:\n      emoji_generator: !!python/name:pymdownx.emoji.to_svg\n  - pymdownx.inlinehilite\n  - pymdownx.magiclink\n  - pymdownx.mark\n  - pymdownx.smartsymbols\n  - pymdownx.superfences\n  - pymdownx.tasklist(custom_checkbox=true)\n  - pymdownx.tilde", 
            "title": "Making your own docs"
        }, 
        {
            "location": "/Data and Communications/introduction/", 
            "text": "DTE \n DCE\n\n\n\n\ndata terminal equipment\n\n\ndata communications equipment\n\n\n\n\nNetwork Utilities\n\n\nProtocol and Pinging\n\n\nSet of rules governing sending and receiving packets\n\n\nPing\n\n\nPing can be used for diagnosing if a website is down or for self diagnosis.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n$ ping \n127\n.0.0.1\n$ ping localhost\n\n// Response\n\n64\n bytes from \n127\n.0.0.1: \nicmp_seq\n=\n0\n \nttl\n=\n64\n \ntime\n=\n0\n.053 ms\n\n64\n bytes from \n127\n.0.0.1: \nicmp_seq\n=\n1\n \nttl\n=\n64\n \ntime\n=\n0\n.044 ms\n^C\n--- localhost ping statistics ---\n\n2\n packets transmitted, \n2\n packets received, \n0\n.0% packet loss\nround-trip min/avg/max/stddev \n=\n \n0\n.044/0.049/0.053/0.004 ms\n\n\n\n\n\n\ntimeout\n\n\nMore time elapsed between an event and a response event than expected\n\n\n127.0.0.1 and localhost\n\n\nThis refers to yourself. So if you ping that, you're pinging yourself. \n\n\nFQDN\n\n\nFully Qualified Domain Name \n \nwww\n like from \nwww.microsoft.com\n\n* It's not 1 machine for 1 FQDN\n* It's possible to have more than 1 FQDN on a machine\n* Opposite also possible, common for big sites\n\n\nDNS\n\n\n\n\nImportant service that serves as a resolver. \n\n\nYou take a FQDN, give it to DNS to resolve and it gives an ip number. \n\n\nYou can do the inverse too.\n\n\nIP# = DNS(FQDN)\n\n\n\n\ntracert\n\n\nstrace route\n\n\nShows router path from sender to receiver \n looked pinging with increasing TTLs (time to live)\n\n\npathping\n\n\nipconfig\n\n\n\n\nTells you a lot about yourself. \n\n\n/all\n is all information\n\n\n/displaydns\n cacheing\n\n\n/flushdns\n casheing\n\n\n/release\n -- gave up DHCP lease\n\n\nDynamic Host Configuration Protocol\n\n\n\n\n\n\n/reverse\n\n\n\n\nnetstat\n\n\n\n\n-e\n\n\n-a\n\n\nInfo on TCP activity\n\n\nTCP is an important protocol\n\n\n\n\n\n\nAdvanced\n\n\n\n\nroute print\n\n\n1\n2\nrouting\ntable info\n\n\n\n\n\n\nIdentifiers\n\n\n\n\n\n\n\n\nLevels\n\n\nIdentifiers\n\n\n\n\n\n\n\n\n\n\n7\n\n\n6\n\n\n\n\n\n\n6\n\n\nFQDN\n\n\n\n\n\n\n5\n\n\n\n\n\n\n\n\n\n\n^ dns v\n\n\n\n\n\n\n4\n\n\nport #\n\n\n\n\n\n\n3\n\n\nIP #\n\n\n\n\n\n\n\n\n^ arp v\n\n\n\n\n\n\n2\n\n\n\n\n\n\n\n\n1\n\n\nMAC address", 
            "title": "Introduction"
        }, 
        {
            "location": "/Data and Communications/introduction/#dte-dce", 
            "text": "data terminal equipment  data communications equipment", 
            "title": "DTE &amp; DCE"
        }, 
        {
            "location": "/Data and Communications/introduction/#network-utilities", 
            "text": "", 
            "title": "Network Utilities"
        }, 
        {
            "location": "/Data and Communications/introduction/#protocol-and-pinging", 
            "text": "Set of rules governing sending and receiving packets", 
            "title": "Protocol and Pinging"
        }, 
        {
            "location": "/Data and Communications/introduction/#ping", 
            "text": "Ping can be used for diagnosing if a website is down or for self diagnosis.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 $ ping  127 .0.0.1\n$ ping localhost\n\n// Response 64  bytes from  127 .0.0.1:  icmp_seq = 0   ttl = 64   time = 0 .053 ms 64  bytes from  127 .0.0.1:  icmp_seq = 1   ttl = 64   time = 0 .044 ms\n^C\n--- localhost ping statistics --- 2  packets transmitted,  2  packets received,  0 .0% packet loss\nround-trip min/avg/max/stddev  =   0 .044/0.049/0.053/0.004 ms", 
            "title": "Ping"
        }, 
        {
            "location": "/Data and Communications/introduction/#timeout", 
            "text": "More time elapsed between an event and a response event than expected", 
            "title": "timeout"
        }, 
        {
            "location": "/Data and Communications/introduction/#127001-and-localhost", 
            "text": "This refers to yourself. So if you ping that, you're pinging yourself.", 
            "title": "127.0.0.1 and localhost"
        }, 
        {
            "location": "/Data and Communications/introduction/#fqdn", 
            "text": "Fully Qualified Domain Name    www  like from  www.microsoft.com \n* It's not 1 machine for 1 FQDN\n* It's possible to have more than 1 FQDN on a machine\n* Opposite also possible, common for big sites", 
            "title": "FQDN"
        }, 
        {
            "location": "/Data and Communications/introduction/#dns", 
            "text": "Important service that serves as a resolver.   You take a FQDN, give it to DNS to resolve and it gives an ip number.   You can do the inverse too.  IP# = DNS(FQDN)", 
            "title": "DNS"
        }, 
        {
            "location": "/Data and Communications/introduction/#tracert", 
            "text": "", 
            "title": "tracert"
        }, 
        {
            "location": "/Data and Communications/introduction/#strace-route", 
            "text": "Shows router path from sender to receiver   looked pinging with increasing TTLs (time to live)", 
            "title": "strace route"
        }, 
        {
            "location": "/Data and Communications/introduction/#pathping", 
            "text": "", 
            "title": "pathping"
        }, 
        {
            "location": "/Data and Communications/introduction/#ipconfig", 
            "text": "Tells you a lot about yourself.   /all  is all information  /displaydns  cacheing  /flushdns  casheing  /release  -- gave up DHCP lease  Dynamic Host Configuration Protocol    /reverse", 
            "title": "ipconfig"
        }, 
        {
            "location": "/Data and Communications/introduction/#netstat", 
            "text": "-e  -a  Info on TCP activity  TCP is an important protocol    Advanced", 
            "title": "netstat"
        }, 
        {
            "location": "/Data and Communications/introduction/#route-print", 
            "text": "1\n2 routing\ntable info", 
            "title": "route print"
        }, 
        {
            "location": "/Data and Communications/introduction/#identifiers", 
            "text": "Levels  Identifiers      7  6    6  FQDN    5      ^ dns v    4  port #    3  IP #     ^ arp v    2     1  MAC address", 
            "title": "Identifiers"
        }, 
        {
            "location": "/Internet App Dev III/introduction/", 
            "text": "We will have three projects. One a web scraping one, one a speed reading (heavy js) and a combined android/php web app for students.\n\n\nHistory\n\n\n\n\n1996 - PHP first release\n\n\nPerl, C\n\n\n\n\n\n\nLarabel -\n really popular\n\n\n2017 - PHP 7.1\n~ 00 - Java\n\n\n\n\nClient side\n\n\n\n\nWeb browser\n\n\nHTML\n\n\nCSS\n\n\nJS\n\n\n\n\nServer side\n\n\n\n\nDatabase (ex: Oracle)\n\n\nMySQL\n\n\nPostgres (using this one)\n\n\n\n\nWeb Server\n\n\n\n\nIIS (ASP.NET)\n\n\nApache\n\n\nNGING (using this one)\n\n\n\n\nNGinx will tell the PHP interpreter to interpret the file, and the interpreter will create an html based on the request.\n\n\nDevelopment Environment\n\n\n\n\nVirtual Machine\n\n\nLinux Ubuntu\n\n\nNGINX\n\n\npostgres\n\n\n\n\nLab and Home setup\n\n\n\n\nVagrant\n\n\nPreprovision VM so that each vagrant box is exactly the same\n\n\n\n\n\n\nHomestead\n\n\nVagrant box preprovisioned with recommended \"Stack\" for \nphp-laravel\n, which has above\n\n\n\n\n\n\nDocker\n\n\nLighter than the Vagrant engine\n\n\nHowever, only available on Windows 10 and we have systems in Windows 7 \ud83d\ude22\n\n\n\n\n\n\n\n\nThis will all be completely headless (no GUI).\n\n\nHello PHP\n\n\nexample 1 - \nHTML \n PHP embedded index.php \n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n!DOCTYPE html\n\n\nhtml\n\n\n    \nhead\n\n\n    \n/head\n\n\n    \nbody\n\n\n        \np\n Plain HTML \n/p\n\n\n        \np\n\n\n            \n?php\n \necho\n \nHello World\n;\n \n?\n\n\n        \n/p\n\n\n    \n/body\n\n\n\n\n\n\n\nexample 2 - \nOnly PHP\n\n\n1\n2\n3\n4\n?php\n \n    \necho\n \n!DOCTYPE html\n;\n\n    \necho\n \nhtml\n;\n\n\n?\n\n\n\n\n\n\n\nVariables\n\n\n\n\nWeakly typed =\n \nNo decorations\n\n\n\n\n| Datatypes |\n| interger |\n| floatingpoint |\n| string |\n| boolean |\n| array |\n\n\nVariable Naming\n\n\n\n\nStart with $\n\n\nnext char must be letter or _\n\n\nonly alphanumeric and _\n\n\ncase sensitive (\nexcept functions\n)\n\n\n\n\nexample 3 - \nUsing Variables\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n?php\n \n    \n$quantity\n \n=\n \n50\n;\n\n    \n$price\n \n=\n \n119.50\n;\n\n    \n$tax\n \n=\n \n0.01\n;\n\n    \n$total\n \n=\n \n(\n$quantity\n \n*\n \n$price\n)\n \n*\n \n(\n1\n \n+\n \n$tax\n);\n\n    \n$total\n \n=\n \nnumber_format\n(\n$total\n,\n2\n);\n\n    \necho\n \np\nThe total is \n.\n$total\n.\n/p\n\n\n?\n\n\n\n\n\n\n\nOperators\n\n\n\n\n*\n \n/\n \n%\n\n\n++\n \n--\n\n\n+\n \n-\n\n\n**\n (power)\n\n\n=\n\n\n+=\n\n\n.=\n (concatenation)\n\n\n\n\n|\n\n\nxor\n (exclusive or)\n\n\n==\n equals (value)\n\n\n===\n identity (value and type)\n\n\n!=\n \n\n\n!==\n\n\n \n\n\n= \n=\n \n\n\n==\n like compareto, negative 0 positive\n\n\n??\n null \n\n\n\n\n\n\nLesson 2 [August 25]\n\n\n\n\n\n\n\n\nDisplay \n write to http response message\n\n\n\n\n\n\necho $num1, $num2\n\n\n\n\nlanguage construct\n\n\nno return -\n slightly more efficient than\n\n\n\n\n\n\nprint $num;\n\n\nlanguage construct\n\n\n1 param only\n\n\nalways returns 1\n\n\n\n\n\n\nvar_dump($value)\n \n detailed dump of the variable (type, contents)\n\n\n\n\nType Juggling\n\n\n\n\nscalar type\n\n\nnumerics\n\n\nboolean\n\n\nstring\n\n\n\n\n\n\n\n\nnumeric\n \n \nstring\n:\n\n\nexample 4: substr()\n\n\n1\n2\n$num = 12345 * 100;\n\n\necho substr($num,3,1)\n\n\n\n\n\n\n\nsubstr(var,startIndex,lengthWanted)\n\n\n\n\nCan go from number to string\n\n\nGoing to a string to a number is also done automatically, but less straightforward.\n\n\n\n\nString\n \n \nNumeric\n\n\n\n\nIf \nstring\n starts with value numeric data, that part will be converted\n\n\nElse \n converts to \n0\n\n\n\n\nValid numeric data\n- no . or E and fits in \nPHP_INT_MAX\n =\n converts to \nint\n\n- otherwise \nfloat\n\n\nexample 5: number + string\n\n\n1\n2\n3\n4\n5\n6\n7\n// + is arithmetic operator\n\n\n// \n10.5\n converted\n\n\n$num = 1 + \n10.5\n;      // = 11.5\n\n\n$num = 1 + \n1.3e3\n;     // = 1301 float\n\n\n$num = 1 + \nbob 3\n;     // = 1\n\n\n$num = 1 + \n10pigs\n;    // = 11\n\n\n$num = 1 + \n10pigs10\n;  // = 11\n\n\n\n\n\n\n\nString conersion when treating a variable as a string\n\n1\necho $num, // string parameter\n\n\n\n\n\nnumeric to string\n* boolean to string\n    - true TRUE is converted to \"1\"\n    - false is converted to \"\"\n* array to string\n    - \"Array\"\n* object to string\n    - __toString invoked if exists, else \"Object\"\n\n\nString literals and Variables\n\n\n\n\n'hello'\n \n single quote\n\n\npreserves content\n\n\nonly 2 escape sequences \n\\\\\n \n\\\n\n\nmost performant\n\n\n\n\n\n\nhello\n \n doublequotes\n\n\nmany escape sequences \n\\n\n \n\\t\n \n\\$\n\n\nvariable interpolation\n\n\nexpanded to its value\n\n\n\n\n\n\nless performant\n\n\n\n\n\n\n\n\nexample 6: single vs double quotes\n\n\n1\n2\n3\n4\n$user = \nJaya\n;\n\n\necho \nHi $user\n; // Hi $user\n\n\necho \nHi $user\n; // Hi Jaya\n\n\necho \nHi\n, $user;\n\n\n\n\n\n\n\nVariable rules\n\n\n\n\nnever declared\n\n\ndo not have to be initialized\n\n\ndefault value depending on the context\n\n\n\n\n\n\n\n\nexample 7: uninitialialized variable behaviour\n\n\n1\n2\n3\n4\n5\n6\n7\nif ($test); // $test not initialied then FALSE\n\n\n\n$num = 1 + $test // numeric is 0\n\n\n\necho $test // \n\n\n\n$test[0] // array is empty array\n\n\n\n\n\n\n\nexample 8: initialized variable behaviour\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n$juice = \napple\n;\n\n\n$beverage = \njuice\n;\n\n\necho \nI drank $juice juice\n; // I drank apple juice\n\n\n\n// $juices is not an initialized variable =\n \n\n\necho \nI drank juice made of $juices\n;\n\n\n\n// Variable, no spaces\n\n\necho \nI drank ... {$juice}s\n;\n\n\n\n// You can have $ outside the brackets and\n\n\n// have a more complex expression inside them.\n\n\n// You could have it evaluate to string \n\n\n// =\n name of variable\n\n\necho \nI drank ... ${juice}s\n\n\n\necho \nI drank ${$beverage}s\n // I drank apples\n\n\necho \nI drank $$beverage\n // I drank apple\n\n\n\n\n\n\n\nDOC\n\n\n\n\nsingle quote\n\n\ndouble quote\n\n\nHEREDOC \n long double quoted string\n\n\nNOWDOC \n long single quoted string\n\n\n\n\nexample 9: DOC\n\n\n1\n2\n3\n4\n5\n6\n$str = \n DOC // name the string\n\n\n    --------\\t // string content after\n\n\n    --------\\n // name of the string\n\n\n    --stuff-\n\n\nDOC; // has to be separate line alone\n\n\n// end with name of Heredoc\n\n\n\n\n\n\n\nexample 10: DOC with single quotes\n\n\n1\n2\n3\n4\n$str = \nDOC\n // NOWDOC has single quotes\n\n\n    ----\n\n\n    ----\n\n\nDOC;\n\n\n\n\n\n\n\nManipulating string\n\n\n\n\n0 indexed\n\n\naccess like a numerically indexed array\n\n\n$str[10]\n returns string with 11\nth\n charater read\n\n\n$str[100000]\n warning string offset\n\n\nwrite is padded with space until reach character\n\n\n\n\n\n\n\n\nString functions\n\n\n\n\nstrcmp ($str1, $str2)\n -- dictionary order\n\n\ntrim\n\n\nstrlen\n\n\nstrtolower\n\n\nsubstr\n\n\nucwords\n\n\n\n\nCompare String with numeric\n\n\n\n\n==\n, \n!=\n, \n \n type juggling\n\n\n, \n=\n, \n, \n=\n \n type juggling\n\n\n===\n, \n!==\n \n identical\n\n\n\n\nexample 11\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nA54321\n \n \n5670X\n // TRUE\n\n\n// both have non-numeric\n\n\n// compare with dictionary order\n\n\n\n54321\n \n \n5678\n // TRUE (both are numeric)\n\n\n\n6 cards\n \n \n55 cards\n // TRUE\n\n\n// both haven non-numeric\n\n\n// compare with dictionary order\n\n\n\n6cards\n \n 55 // type juggling =\n FALSE", 
            "title": "Introduction"
        }, 
        {
            "location": "/Internet App Dev III/introduction/#history", 
            "text": "1996 - PHP first release  Perl, C    Larabel -  really popular  2017 - PHP 7.1\n~ 00 - Java", 
            "title": "History"
        }, 
        {
            "location": "/Internet App Dev III/introduction/#client-side", 
            "text": "Web browser  HTML  CSS  JS", 
            "title": "Client side"
        }, 
        {
            "location": "/Internet App Dev III/introduction/#server-side", 
            "text": "Database (ex: Oracle)  MySQL  Postgres (using this one)", 
            "title": "Server side"
        }, 
        {
            "location": "/Internet App Dev III/introduction/#web-server", 
            "text": "IIS (ASP.NET)  Apache  NGING (using this one)   NGinx will tell the PHP interpreter to interpret the file, and the interpreter will create an html based on the request.", 
            "title": "Web Server"
        }, 
        {
            "location": "/Internet App Dev III/introduction/#development-environment", 
            "text": "Virtual Machine  Linux Ubuntu  NGINX  postgres", 
            "title": "Development Environment"
        }, 
        {
            "location": "/Internet App Dev III/introduction/#lab-and-home-setup", 
            "text": "Vagrant  Preprovision VM so that each vagrant box is exactly the same    Homestead  Vagrant box preprovisioned with recommended \"Stack\" for  php-laravel , which has above    Docker  Lighter than the Vagrant engine  However, only available on Windows 10 and we have systems in Windows 7 \ud83d\ude22     This will all be completely headless (no GUI).", 
            "title": "Lab and Home setup"
        }, 
        {
            "location": "/Internet App Dev III/introduction/#hello-php", 
            "text": "", 
            "title": "Hello PHP"
        }, 
        {
            "location": "/Internet App Dev III/introduction/#example-1-html-php-embedded-indexphp", 
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 !DOCTYPE html  html       head       /head       body           p  Plain HTML  /p           p               ?php   echo   Hello World ;   ?           /p       /body", 
            "title": "example 1 - HTML &amp; PHP embedded index.php "
        }, 
        {
            "location": "/Internet App Dev III/introduction/#example-2-only-php", 
            "text": "1\n2\n3\n4 ?php  \n     echo   !DOCTYPE html ; \n     echo   html ;  ?", 
            "title": "example 2 - Only PHP"
        }, 
        {
            "location": "/Internet App Dev III/introduction/#variables", 
            "text": "Weakly typed =   No decorations   | Datatypes |\n| interger |\n| floatingpoint |\n| string |\n| boolean |\n| array |", 
            "title": "Variables"
        }, 
        {
            "location": "/Internet App Dev III/introduction/#variable-naming", 
            "text": "Start with $  next char must be letter or _  only alphanumeric and _  case sensitive ( except functions )", 
            "title": "Variable Naming"
        }, 
        {
            "location": "/Internet App Dev III/introduction/#example-3-using-variables", 
            "text": "1\n2\n3\n4\n5\n6\n7\n8 ?php  \n     $quantity   =   50 ; \n     $price   =   119.50 ; \n     $tax   =   0.01 ; \n     $total   =   ( $quantity   *   $price )   *   ( 1   +   $tax ); \n     $total   =   number_format ( $total , 2 ); \n     echo   p The total is  . $total . /p  ?", 
            "title": "example 3 - Using Variables"
        }, 
        {
            "location": "/Internet App Dev III/introduction/#operators", 
            "text": "*   /   %  ++   --  +   -  **  (power)  =  +=  .=  (concatenation)   |  xor  (exclusive or)  ==  equals (value)  ===  identity (value and type)  !=    !==     =  =    ==  like compareto, negative 0 positive  ??  null     Lesson 2 [August 25]     Display   write to http response message    echo $num1, $num2   language construct  no return -  slightly more efficient than    print $num;  language construct  1 param only  always returns 1    var_dump($value)    detailed dump of the variable (type, contents)", 
            "title": "Operators"
        }, 
        {
            "location": "/Internet App Dev III/introduction/#type-juggling", 
            "text": "scalar type  numerics  boolean  string", 
            "title": "Type Juggling"
        }, 
        {
            "location": "/Internet App Dev III/introduction/#numeric-string", 
            "text": "", 
            "title": "numeric --&gt; string:"
        }, 
        {
            "location": "/Internet App Dev III/introduction/#example-4-substr", 
            "text": "1\n2 $num = 12345 * 100;  echo substr($num,3,1)    substr(var,startIndex,lengthWanted)   Can go from number to string  Going to a string to a number is also done automatically, but less straightforward.", 
            "title": "example 4: substr()"
        }, 
        {
            "location": "/Internet App Dev III/introduction/#string-numeric", 
            "text": "If  string  starts with value numeric data, that part will be converted  Else   converts to  0   Valid numeric data\n- no . or E and fits in  PHP_INT_MAX  =  converts to  int \n- otherwise  float", 
            "title": "String --&gt; Numeric"
        }, 
        {
            "location": "/Internet App Dev III/introduction/#example-5-number-string", 
            "text": "1\n2\n3\n4\n5\n6\n7 // + is arithmetic operator  //  10.5  converted  $num = 1 +  10.5 ;      // = 11.5  $num = 1 +  1.3e3 ;     // = 1301 float  $num = 1 +  bob 3 ;     // = 1  $num = 1 +  10pigs ;    // = 11  $num = 1 +  10pigs10 ;  // = 11    String conersion when treating a variable as a string 1 echo $num, // string parameter   \nnumeric to string\n* boolean to string\n    - true TRUE is converted to \"1\"\n    - false is converted to \"\"\n* array to string\n    - \"Array\"\n* object to string\n    - __toString invoked if exists, else \"Object\"", 
            "title": "example 5: number + string"
        }, 
        {
            "location": "/Internet App Dev III/introduction/#string-literals-and-variables", 
            "text": "'hello'    single quote  preserves content  only 2 escape sequences  \\\\   \\  most performant    hello    doublequotes  many escape sequences  \\n   \\t   \\$  variable interpolation  expanded to its value    less performant", 
            "title": "String literals and Variables"
        }, 
        {
            "location": "/Internet App Dev III/introduction/#example-6-single-vs-double-quotes", 
            "text": "1\n2\n3\n4 $user =  Jaya ;  echo  Hi $user ; // Hi $user  echo  Hi $user ; // Hi Jaya  echo  Hi , $user;", 
            "title": "example 6: single vs double quotes"
        }, 
        {
            "location": "/Internet App Dev III/introduction/#variable-rules", 
            "text": "never declared  do not have to be initialized  default value depending on the context", 
            "title": "Variable rules"
        }, 
        {
            "location": "/Internet App Dev III/introduction/#example-7-uninitialialized-variable-behaviour", 
            "text": "1\n2\n3\n4\n5\n6\n7 if ($test); // $test not initialied then FALSE  $num = 1 + $test // numeric is 0  echo $test //   $test[0] // array is empty array", 
            "title": "example 7: uninitialialized variable behaviour"
        }, 
        {
            "location": "/Internet App Dev III/introduction/#example-8-initialized-variable-behaviour", 
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 $juice =  apple ;  $beverage =  juice ;  echo  I drank $juice juice ; // I drank apple juice  // $juices is not an initialized variable =    echo  I drank juice made of $juices ;  // Variable, no spaces  echo  I drank ... {$juice}s ;  // You can have $ outside the brackets and  // have a more complex expression inside them.  // You could have it evaluate to string   // =  name of variable  echo  I drank ... ${juice}s  echo  I drank ${$beverage}s  // I drank apples  echo  I drank $$beverage  // I drank apple", 
            "title": "example 8: initialized variable behaviour"
        }, 
        {
            "location": "/Internet App Dev III/introduction/#doc", 
            "text": "single quote  double quote  HEREDOC   long double quoted string  NOWDOC   long single quoted string", 
            "title": "DOC"
        }, 
        {
            "location": "/Internet App Dev III/introduction/#example-9-doc", 
            "text": "1\n2\n3\n4\n5\n6 $str =   DOC // name the string      --------\\t // string content after      --------\\n // name of the string      --stuff-  DOC; // has to be separate line alone  // end with name of Heredoc", 
            "title": "example 9: DOC"
        }, 
        {
            "location": "/Internet App Dev III/introduction/#example-10-doc-with-single-quotes", 
            "text": "1\n2\n3\n4 $str =  DOC  // NOWDOC has single quotes      ----      ----  DOC;", 
            "title": "example 10: DOC with single quotes"
        }, 
        {
            "location": "/Internet App Dev III/introduction/#manipulating-string", 
            "text": "0 indexed  access like a numerically indexed array  $str[10]  returns string with 11 th  charater read  $str[100000]  warning string offset  write is padded with space until reach character", 
            "title": "Manipulating string"
        }, 
        {
            "location": "/Internet App Dev III/introduction/#string-functions", 
            "text": "strcmp ($str1, $str2)  -- dictionary order  trim  strlen  strtolower  substr  ucwords", 
            "title": "String functions"
        }, 
        {
            "location": "/Internet App Dev III/introduction/#compare-string-with-numeric", 
            "text": "== ,  != ,     type juggling  ,  = ,  ,  =    type juggling  === ,  !==    identical", 
            "title": "Compare String with numeric"
        }, 
        {
            "location": "/Internet App Dev III/introduction/#example-11", 
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 A54321     5670X  // TRUE  // both have non-numeric  // compare with dictionary order  54321     5678  // TRUE (both are numeric)  6 cards     55 cards  // TRUE  // both haven non-numeric  // compare with dictionary order  6cards    55 // type juggling =  FALSE", 
            "title": "example 11"
        }, 
        {
            "location": "/Internet App Dev III/outline/", 
            "text": "COURSE OUTLINE \nInternet Application Development III\n\n\n\n\nNumber: 420-524-DW \n\n\nPonderation: \n\n\nCredits: 3\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\nSuccessful completion of all Year 2 420.A0 courses\n\n\n\n\nCo-requisites\n\n\n\n\n\n\n420-517-DW Software Development Project \u2013 Java III\n\n\n\n\n\n\n420-518-DW Mobile Software Development - Android\n\n\n\n\n\n\n420-544-DW Data Communications \n Networking\n\n\n\n\n\n\n\n\nNote\n\n\nYou must pass this course as well as the three co-requisite courses in order to progress to the sixth semester of the Computer Science Technology Program.\n\n\n\n\nDescription\n\n\nThe student will be introduced to the concepts and techniques of\nserver-side Web programming. The student will use PHP, JavaScript, and a\ndatabase to create dynamic Web applications, and Web APIs to respond to\nAJAX queries. In addition to direct PHP programming, the student is\nintroduced to a PHP framework.\n\n\nSTATEMENTS OF COMPETENCE\n\n\n\n\n\n\nUse an object-oriented development approach (016T)\n\n\n\n\n\n\nProduce algorithms (016W)\n\n\n\n\n\n\nOrganize and use data (0170)\n\n\n\n\n\n\nAssure the quality of an application (0177)\n\n\n\n\n\n\nContacting Teachers\n\n\nJaya Nilakantan 3F.22 contact via MIO\n\n\nTeacher's schedule will be posted outside the office by the end of the\nfirst week of classes.\n\n\nCourse Objectives\n\n\nUpon successful completion of the course the student will be able to:\n\n\n\n\n\n\nDescribe the PHP language and environment (016W, 0170)\n\n\n\n\n\n\nUse PHP classes and objects (016T)\n\n\n\n\n\n\nAdd dynamic content to Web pages using PHP script files and embedded\n    \n PHP statements (016T, 016W)\n\n\n\n\n\n\nWrite server-side PHP scripts to generate HTML responses to\n    \n user queries. (016T, 016W)\n\n\n\n\n\n\nWrite PHP programs to perform server-side processing of user input\n    \n from Web pages with forms. (016T, 016W, 0170)\n\n\n\n\n\n\nDevelop Web APIs using PHP and a database (0170)\n\n\n\n\n\n\nDevelop Web applications using PHP, JavaScript, and a\n    \n database (0170)\n\n\n\n\n\n\nUnderstand and prevent web application security risks (0177)\n\n\n\n\n\n\nDevelop and test Web applications using a PHP framework (016T, 0177)\n\n\n\n\n\n\nCourse Methodology\n\n\nThe course will consist of two 1\u00bd-hour lectures and one 3-hour lab\nsession per week. Concepts and techniques will be presented in lectures\nand practical exercises that apply the concepts and techniques will be\ngiven in the lab sessions.\n\n\nRequired readings\n\n\nReadings will be assigned from:\n\n\n\n\n\n\nOfficial PHP documentation at \nwww.php.net\n\n\n\n\n\n\nDocumentation of the PHP framework\n\n\n\n\n\n\nPHP The Right Way \nhttp://www.phptherightway.com\n\n\n\n\n\n\nSurvive the Deep End: PHP Security\n    \nhttp://phpsecurity.readthedocs.io/en/latest\n\n\n\n\n\n\nAssessment of student performance\n\n\nMidterm Examination Duration\n\n\n\n\n1 \n hours Worth: 30% (Week 7 or 8)\n\n\n\n\nFinal Examination Duration\n\n\n\n\n\n\n3 hours Worth: 40% (Exam period)\n\n\n\n\n\n\nAssignments/ProjectsWorth: 30%\n\n\n\n\n\n\nCourse Outline\n\n\n\n\n\n\nConfigure PHP 1\n\n\n\n\n\n\nSet up a development server\n\n\n\n\n\n\nSet up the PHP environment with the php.ini file\n\n\n\n\n\n\n\n\n\n\nDescribe PHP language basics 2\n\n\n\n\n\n\nDescribe the PHP language and programming environment\n\n\n\n\n\n\nDescribe the basic syntax of the PHP language\n\n\n\n\n\n\nUnderstand PHP variable basics (variables, constants, numeric,\n\n\n\n\nstrings), naming rules and conventions\n\n\n\n\n\n\n\n\nUnderstand how PHP and HTML interact\n\n\n\n\n\n\nRecognize PHP control flow constructs: operators, conditionals,\n\n\n\n\nloops\n\n\n\n\n\n\n\n\n\n\n\n\nUse PHP arrays 1\n\n\n\n\n\n\nCreate and use numerically indexed arrays\n\n\n\n\n\n\nCreate and use associative arrays\n\n\n\n\n\n\nCreate and use multidimensional arrays\n\n\n\n\n\n\nUse foreach looping structure\n\n\n\n\n\n\nUse array functions\n\n\n\n\n\n\n\n\n\n\nDevelop PHP programs to receive and process input from HTML forms 3\n\n\n\n\n\n\nReview http protocol\n\n\n\n\n\n\nCreate a one-part form (both HTML and PHP in one file)\n\n\n\n\n\n\nCreate a two-part form (HTML and PHP are separate files)\n\n\n\n\n\n\nRetrieve submitted data from a variety of element types: text boxes,\n\n\n\n\ntext areas, checkboxes, radio buttons, drop-down lists, submit\nbuttons\n\n\n\n\n\n\n\n\nSanitize and validate input at client and server\n\n\n\n\n\n\nPrevent XSS and Cross-site Request Forgery attacks\n\n\n\n\n\n\nRedisplay a form after PHP validation errors (sticky forms)\n\n\n\n\n\n\nUnderstand and implement redirect\n\n\n\n\n\n\n\n\n\n\nCreate reusable code blocks by defining and calling functions 1\n\n\n\n\n\n\nDefine and call user-defined functions with return values\n\n\n\n\n\n\nDescribe the scope of identifiers in PHP\n\n\n\n\n\n\nUse local, global, static and references to variables\n\n\n\n\n\n\nUse call by value and call by reference to pass arguments\n\n\n\n\n\n\nUse the Include and Require statements\n\n\n\n\n\n\n\n\n\n\nUse PHP Classes and Objects 4\n\n\n\n\n\n\nCreate classes with properties, methods, constants\n\n\n\n\n\n\nDefine constructors and destructors\n\n\n\n\n\n\nUnderstand inheritance and polymorphism\n\n\n\n\n\n\nDefine static class members, and describe late static binding\n\n\n\n\n\n\nCompare and contrast PHP with Java and C# in terms of Access\n\n\n\n\nModifiers, Abstract Classes, Interfaces, and Namespaces\n\n\n\n\n\n\n\n\nCompare and clone objects\n\n\n\n\n\n\nPerform exception handling\n\n\n\n\n\n\nUnderstand and use magic methods\n\n\n\n\n\n\n\n\n\n\nAccess and populate a database using PHP 3\n\n\n\n\n\n\nConnect to and query a database with PHP Data Objects (PDO)\n\n\n\n\n\n\nPerform error handling\n\n\n\n\n\n\nPrevent SQL injection\n\n\n\n\n\n\nuse cURL and DOM traversal to scrape web pages and populate a\n\n\n\n\ndatabase\n\n\n\n\n\n\n\n\n\n\n\n\nMidterm Exam 1\n\n\n\n\n\n\nUnderstand and use state maintenance techniques 3\n\n\n\n\n\n\nExplore output buffering and browser caching\n\n\n\n\n\n\nMaintain state using query string\n\n\n\n\n\n\nImplement simple pagination\n\n\n\n\n\n\nManage cookies with PHP: set, access, and destroy a cookie\n\n\n\n\n\n\nUse sessions: start a session, end a session, manage session\n\n\n\n\nsecurity\n\n\n\n\n\n\n\n\nUnderstand and implement best practices in authentication\n\n\n\n\n\n\n\n\n\n\nUsing AJAX 2\n\n\n\n\n\n\nReview Javascript and JQuery client-side implementation of AJAX\n\n\n\n\n\n\nUnderstand the server-side techniques and principles used in AJAX\n\n\n\n\n\n\nCompose XML and JSON documents\n\n\n\n\n\n\nRead and traverse XML and JSON documents\n\n\n\n\n\n\n\n\n\n\nExplore web security considerations 4\n\n\n\n\n\n\nDescribe XSS, CSRF, and Session Fixation attacks\n\n\n\n\n\n\nImplement basic security measures in PHP code\n\n\n\n\n\n\n\n\n\n\nUse a PHP framework for web development 5\n\n\n\n\n\n\nUnderstand the basics of the MVC pattern\n\n\n\n\n\n\nDescribe URL routing in an MVC application\n\n\n\n\n\n\nDescribe the modular directory layout\n\n\n\n\n\n\nUnderstand purpose of a template engine, and implement views\n\n\n\n\n\n\nUnderstand and implement database migrations\n\n\n\n\n\n\nImplement models and controllers\n\n\n\n\n\n\nUnderstand the authentication mechanisms provided by the framework\n\n\n\n\n\n\nUse the framework to implement web pages and web APIs\n\n\n\n\n\n\n\n\n\n\nProgram and course rules and regulations\n\n\n\n\nWarning\n\n\nFor 420 career program courses, students must receive at least 50% on the assignment component and at least 60% on the examination component in order to obtain a passing grade for the course. Failure to do so will result in a maximum grade of 50 (the lower of 50 or the grade earned). For the purpose of this rule, quizzes are considered exams.\n\n\n\n\nAssignments are due at the due date specified by the instructor.\nAssignments received after this time are late. Assignments will not be\naccepted after due date set by instructor. In exceptional circumstances,\nsuch as illness, etc. labs submitted late will be graded provided that\nthe student has received an extension from the instructor in advance.\n\n\nEach student must submit their own individual answers to assignments,\nand shared solutions are not acceptable. Students must protect their\nwork from being easily copied by others by introducing uniqueness into\ntheir work in the choice of images used, the display styles used in the\npresentation of documents, the originality of the written descriptive\npassages, and by placing digital signatures on their original images.\n\n\nStudents are reminded that they are responsible for all material\npresented in the lecture and during the lab, and are expected to obtain\nmaterial they have missed.\n\n\nStudents must follow exactly the instructions in the lab exercises about\nhow and where to store all computer files in order for their work to be\naccepted and properly evaluated.\n\n\nDAWSON COLLEGE COMPUTER SCIENCE DEPARTMENT  POLICIES\n\n\n1. ACADEMIC INTEGRITY\n\n\nThe Computer Science Department adheres to the Dawson College Academic\nConduct policy. Students have an obligation to inform themselves of all\naspects of this policy. According to ISEP, the teacher is required to\nreport to the Sector Dean all cases of cheating and plagiarism affecting\na student\u2019s grade. (ISEP Section V-C) Students may appeal any decision\nof the teacher regarding cheating and plagiarism according to the\nmethods established by the College. The penalty for cheating or\nplagiarism may range from a zero on the work to a failure in the course.\n\n\n2. ATTENDANCE AND LATENESS\n\n\nStudents are responsible for all material covered in classes and labs,\nwhether or not they are present. Students have an obligation to arrive\non time and to remain for the duration of scheduled classes, labs and\nactivities. Students who disregard this obligation may be asked to leave\nthe class, lab or activity. Students should refer to the Institutional\nStudent Evaluation Policy\n\n\n(ISEP section IV-C) regarding attendance.\n\n\n3. RELIGIOUS HOLIDAY OBSERVANCE\n\n\nClass period(s) may be cancelled in order that the teacher can observe\nreligious holidays. Any material missed as a result, will be made up\nduring labs, class periods and alternate tutorial sessions.\n\n\nStudents, who intend to observe religious holidays, must inform their\nteachers in writing as prescribed in the ISEP Policy on Religious\nObservances (ISEP Section IV-D). Students absent from classes because of\nobservance of religious holidays will not be penalized. It must be\nemphasized, however, that this College policy should not be interpreted\nto mean that a student can receive credit for work not performed. It is\nthe student\u2019s responsibility to fulfill the requirements of the\nalternative arrangement.\n\n\n4. SOFTWARE\n\n\nThe Computer Science Department forbids the use of the computer labs it\nuses to make any copies of any software without the explicit\nauthorization of the Department. Apart from any legal action that might\narise from such unauthorized copying, the Computer Science Department\nreserves the right to discipline any student involved in such activity.\n\n\nStudents who borrow software from the College and fail to return it will\nbe placed on the defaulter list and be subject to the appropriate\npenalties.\n\n\nViruses are programs that attach themselves to a computer system without\nthe permission of those to whom the system belongs. They are\ndeliberately written to be, at worst, harmful (e.g. destroying the\ncontents of disks) and, at best, bothersome (e.g. disturbing the image\nshown on the screen). They can cause serious losses of time and effort\nfor students, staff and faculty. Any student involved in the deliberate\nspreading of viruses is subject to the most severe penalties prescribed\nby College regulations, apart from any legal action that might arise\nfrom such acts.\n\n\n5. LITERACY\n\n\nThe Computer Science Department recognizes that literacy in all its\nforms (read, written, spoken) is essential to our students in their\ncareers.\n\n\nTeachers may choose to incorporate a literacy component into the marking\nscheme for any piece of work. Teachers may use their discretion to\ninsist that any piece of work submitted for credit is revised by the\nstudent if it is unsatisfactory with regard to literacy.\n\n\nTeachers will inform all students in their courses of this policy at the\nbeginning of each semester either by including it in the course\ndescription or otherwise.\n\n\n6. CELL PHONES\n\n\nThe use of cell phones in all Computer Science lectures, labs and exams\nis prohibited.\n\n\n7. PORTABLE COMPUTERS\n\n\nThe use of portable computers in all Computer Science lectures for\npurposes other than note-taking is prohibited.\n\n\n8. STUDENT CONDUCT\n\n\nEveryone has the right to a safe and non-violent environment. Students\nare obliged to conduct themselves as stated in the Student Code of\nConduct and in the ISEP section on the roles and responsibilities of\nstudents. (ISEP section II-D)\n\n\n9. PROFESSIONAL CONDUCT POLICY\n\n\nStudents who are enrolled in the Computer Science Technology careers\nprogram must conduct themselves according to the Professional Conduct\nPolicy as described in the Program Handbook\n\n\n10. INTENSIVE COURSE CONFLICTS\n\n\nIf a student is attending an intensive course, the student must inform\nthe teacher, within the first two weeks of class, of the specific dates\nof any anticipated absences.\n\n\n11. ISEP\n\n\nThe Institutional Student Evaluation Policy (ISEP) is designed to\npromote equitable and effective evaluation of student learning and is\ntherefore a crucial policy to read and understand. The policy describes\nthe rights and obligations of students, faculty, departments, programs,\nand the College administration with regard to evaluation in all your\ncourses, including grade reviews and resolution of academic grievance.\nThe ISEP is available on the Dawson website.", 
            "title": "Outline"
        }, 
        {
            "location": "/Internet App Dev III/outline/#course-outline-internet-application-development-iii", 
            "text": "Number: 420-524-DW   Ponderation:   Credits: 3", 
            "title": "COURSE OUTLINE Internet Application Development III"
        }, 
        {
            "location": "/Internet App Dev III/outline/#prerequisites", 
            "text": "Successful completion of all Year 2 420.A0 courses", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/Internet App Dev III/outline/#co-requisites", 
            "text": "420-517-DW Software Development Project \u2013 Java III    420-518-DW Mobile Software Development - Android    420-544-DW Data Communications   Networking     Note  You must pass this course as well as the three co-requisite courses in order to progress to the sixth semester of the Computer Science Technology Program.", 
            "title": "Co-requisites"
        }, 
        {
            "location": "/Internet App Dev III/outline/#description", 
            "text": "The student will be introduced to the concepts and techniques of\nserver-side Web programming. The student will use PHP, JavaScript, and a\ndatabase to create dynamic Web applications, and Web APIs to respond to\nAJAX queries. In addition to direct PHP programming, the student is\nintroduced to a PHP framework.", 
            "title": "Description"
        }, 
        {
            "location": "/Internet App Dev III/outline/#statements-of-competence", 
            "text": "Use an object-oriented development approach (016T)    Produce algorithms (016W)    Organize and use data (0170)    Assure the quality of an application (0177)", 
            "title": "STATEMENTS OF COMPETENCE"
        }, 
        {
            "location": "/Internet App Dev III/outline/#contacting-teachers", 
            "text": "Jaya Nilakantan 3F.22 contact via MIO  Teacher's schedule will be posted outside the office by the end of the\nfirst week of classes.", 
            "title": "Contacting Teachers"
        }, 
        {
            "location": "/Internet App Dev III/outline/#course-objectives", 
            "text": "Upon successful completion of the course the student will be able to:    Describe the PHP language and environment (016W, 0170)    Use PHP classes and objects (016T)    Add dynamic content to Web pages using PHP script files and embedded\n      PHP statements (016T, 016W)    Write server-side PHP scripts to generate HTML responses to\n      user queries. (016T, 016W)    Write PHP programs to perform server-side processing of user input\n      from Web pages with forms. (016T, 016W, 0170)    Develop Web APIs using PHP and a database (0170)    Develop Web applications using PHP, JavaScript, and a\n      database (0170)    Understand and prevent web application security risks (0177)    Develop and test Web applications using a PHP framework (016T, 0177)", 
            "title": "Course Objectives"
        }, 
        {
            "location": "/Internet App Dev III/outline/#course-methodology", 
            "text": "The course will consist of two 1\u00bd-hour lectures and one 3-hour lab\nsession per week. Concepts and techniques will be presented in lectures\nand practical exercises that apply the concepts and techniques will be\ngiven in the lab sessions.", 
            "title": "Course Methodology"
        }, 
        {
            "location": "/Internet App Dev III/outline/#required-readings", 
            "text": "Readings will be assigned from:    Official PHP documentation at  www.php.net    Documentation of the PHP framework    PHP The Right Way  http://www.phptherightway.com    Survive the Deep End: PHP Security\n     http://phpsecurity.readthedocs.io/en/latest", 
            "title": "Required readings"
        }, 
        {
            "location": "/Internet App Dev III/outline/#assessment-of-student-performance", 
            "text": "", 
            "title": "Assessment of student performance"
        }, 
        {
            "location": "/Internet App Dev III/outline/#midterm-examination-duration", 
            "text": "1   hours Worth: 30% (Week 7 or 8)", 
            "title": "Midterm Examination Duration"
        }, 
        {
            "location": "/Internet App Dev III/outline/#final-examination-duration", 
            "text": "3 hours Worth: 40% (Exam period)    Assignments/ProjectsWorth: 30%", 
            "title": "Final Examination Duration"
        }, 
        {
            "location": "/Internet App Dev III/outline/#course-outline", 
            "text": "Configure PHP 1    Set up a development server    Set up the PHP environment with the php.ini file      Describe PHP language basics 2    Describe the PHP language and programming environment    Describe the basic syntax of the PHP language    Understand PHP variable basics (variables, constants, numeric,   strings), naming rules and conventions     Understand how PHP and HTML interact    Recognize PHP control flow constructs: operators, conditionals,   loops       Use PHP arrays 1    Create and use numerically indexed arrays    Create and use associative arrays    Create and use multidimensional arrays    Use foreach looping structure    Use array functions      Develop PHP programs to receive and process input from HTML forms 3    Review http protocol    Create a one-part form (both HTML and PHP in one file)    Create a two-part form (HTML and PHP are separate files)    Retrieve submitted data from a variety of element types: text boxes,   text areas, checkboxes, radio buttons, drop-down lists, submit\nbuttons     Sanitize and validate input at client and server    Prevent XSS and Cross-site Request Forgery attacks    Redisplay a form after PHP validation errors (sticky forms)    Understand and implement redirect      Create reusable code blocks by defining and calling functions 1    Define and call user-defined functions with return values    Describe the scope of identifiers in PHP    Use local, global, static and references to variables    Use call by value and call by reference to pass arguments    Use the Include and Require statements      Use PHP Classes and Objects 4    Create classes with properties, methods, constants    Define constructors and destructors    Understand inheritance and polymorphism    Define static class members, and describe late static binding    Compare and contrast PHP with Java and C# in terms of Access   Modifiers, Abstract Classes, Interfaces, and Namespaces     Compare and clone objects    Perform exception handling    Understand and use magic methods      Access and populate a database using PHP 3    Connect to and query a database with PHP Data Objects (PDO)    Perform error handling    Prevent SQL injection    use cURL and DOM traversal to scrape web pages and populate a   database       Midterm Exam 1    Understand and use state maintenance techniques 3    Explore output buffering and browser caching    Maintain state using query string    Implement simple pagination    Manage cookies with PHP: set, access, and destroy a cookie    Use sessions: start a session, end a session, manage session   security     Understand and implement best practices in authentication      Using AJAX 2    Review Javascript and JQuery client-side implementation of AJAX    Understand the server-side techniques and principles used in AJAX    Compose XML and JSON documents    Read and traverse XML and JSON documents      Explore web security considerations 4    Describe XSS, CSRF, and Session Fixation attacks    Implement basic security measures in PHP code      Use a PHP framework for web development 5    Understand the basics of the MVC pattern    Describe URL routing in an MVC application    Describe the modular directory layout    Understand purpose of a template engine, and implement views    Understand and implement database migrations    Implement models and controllers    Understand the authentication mechanisms provided by the framework    Use the framework to implement web pages and web APIs", 
            "title": "Course Outline"
        }, 
        {
            "location": "/Internet App Dev III/outline/#program-and-course-rules-and-regulations", 
            "text": "Warning  For 420 career program courses, students must receive at least 50% on the assignment component and at least 60% on the examination component in order to obtain a passing grade for the course. Failure to do so will result in a maximum grade of 50 (the lower of 50 or the grade earned). For the purpose of this rule, quizzes are considered exams.   Assignments are due at the due date specified by the instructor.\nAssignments received after this time are late. Assignments will not be\naccepted after due date set by instructor. In exceptional circumstances,\nsuch as illness, etc. labs submitted late will be graded provided that\nthe student has received an extension from the instructor in advance.  Each student must submit their own individual answers to assignments,\nand shared solutions are not acceptable. Students must protect their\nwork from being easily copied by others by introducing uniqueness into\ntheir work in the choice of images used, the display styles used in the\npresentation of documents, the originality of the written descriptive\npassages, and by placing digital signatures on their original images.  Students are reminded that they are responsible for all material\npresented in the lecture and during the lab, and are expected to obtain\nmaterial they have missed.  Students must follow exactly the instructions in the lab exercises about\nhow and where to store all computer files in order for their work to be\naccepted and properly evaluated.", 
            "title": "Program and course rules and regulations"
        }, 
        {
            "location": "/Internet App Dev III/outline/#dawson-college-computer-science-department-policies", 
            "text": "", 
            "title": "DAWSON COLLEGE COMPUTER SCIENCE DEPARTMENT  POLICIES"
        }, 
        {
            "location": "/Internet App Dev III/outline/#1-academic-integrity", 
            "text": "The Computer Science Department adheres to the Dawson College Academic\nConduct policy. Students have an obligation to inform themselves of all\naspects of this policy. According to ISEP, the teacher is required to\nreport to the Sector Dean all cases of cheating and plagiarism affecting\na student\u2019s grade. (ISEP Section V-C) Students may appeal any decision\nof the teacher regarding cheating and plagiarism according to the\nmethods established by the College. The penalty for cheating or\nplagiarism may range from a zero on the work to a failure in the course.", 
            "title": "1. ACADEMIC INTEGRITY"
        }, 
        {
            "location": "/Internet App Dev III/outline/#2-attendance-and-lateness", 
            "text": "Students are responsible for all material covered in classes and labs,\nwhether or not they are present. Students have an obligation to arrive\non time and to remain for the duration of scheduled classes, labs and\nactivities. Students who disregard this obligation may be asked to leave\nthe class, lab or activity. Students should refer to the Institutional\nStudent Evaluation Policy  (ISEP section IV-C) regarding attendance.", 
            "title": "2. ATTENDANCE AND LATENESS"
        }, 
        {
            "location": "/Internet App Dev III/outline/#3-religious-holiday-observance", 
            "text": "Class period(s) may be cancelled in order that the teacher can observe\nreligious holidays. Any material missed as a result, will be made up\nduring labs, class periods and alternate tutorial sessions.  Students, who intend to observe religious holidays, must inform their\nteachers in writing as prescribed in the ISEP Policy on Religious\nObservances (ISEP Section IV-D). Students absent from classes because of\nobservance of religious holidays will not be penalized. It must be\nemphasized, however, that this College policy should not be interpreted\nto mean that a student can receive credit for work not performed. It is\nthe student\u2019s responsibility to fulfill the requirements of the\nalternative arrangement.", 
            "title": "3. RELIGIOUS HOLIDAY OBSERVANCE"
        }, 
        {
            "location": "/Internet App Dev III/outline/#4-software", 
            "text": "The Computer Science Department forbids the use of the computer labs it\nuses to make any copies of any software without the explicit\nauthorization of the Department. Apart from any legal action that might\narise from such unauthorized copying, the Computer Science Department\nreserves the right to discipline any student involved in such activity.  Students who borrow software from the College and fail to return it will\nbe placed on the defaulter list and be subject to the appropriate\npenalties.  Viruses are programs that attach themselves to a computer system without\nthe permission of those to whom the system belongs. They are\ndeliberately written to be, at worst, harmful (e.g. destroying the\ncontents of disks) and, at best, bothersome (e.g. disturbing the image\nshown on the screen). They can cause serious losses of time and effort\nfor students, staff and faculty. Any student involved in the deliberate\nspreading of viruses is subject to the most severe penalties prescribed\nby College regulations, apart from any legal action that might arise\nfrom such acts.", 
            "title": "4. SOFTWARE"
        }, 
        {
            "location": "/Internet App Dev III/outline/#5-literacy", 
            "text": "The Computer Science Department recognizes that literacy in all its\nforms (read, written, spoken) is essential to our students in their\ncareers.  Teachers may choose to incorporate a literacy component into the marking\nscheme for any piece of work. Teachers may use their discretion to\ninsist that any piece of work submitted for credit is revised by the\nstudent if it is unsatisfactory with regard to literacy.  Teachers will inform all students in their courses of this policy at the\nbeginning of each semester either by including it in the course\ndescription or otherwise.", 
            "title": "5. LITERACY"
        }, 
        {
            "location": "/Internet App Dev III/outline/#6-cell-phones", 
            "text": "The use of cell phones in all Computer Science lectures, labs and exams\nis prohibited.", 
            "title": "6. CELL PHONES"
        }, 
        {
            "location": "/Internet App Dev III/outline/#7-portable-computers", 
            "text": "The use of portable computers in all Computer Science lectures for\npurposes other than note-taking is prohibited.", 
            "title": "7. PORTABLE COMPUTERS"
        }, 
        {
            "location": "/Internet App Dev III/outline/#8-student-conduct", 
            "text": "Everyone has the right to a safe and non-violent environment. Students\nare obliged to conduct themselves as stated in the Student Code of\nConduct and in the ISEP section on the roles and responsibilities of\nstudents. (ISEP section II-D)", 
            "title": "8. STUDENT CONDUCT"
        }, 
        {
            "location": "/Internet App Dev III/outline/#9-professional-conduct-policy", 
            "text": "Students who are enrolled in the Computer Science Technology careers\nprogram must conduct themselves according to the Professional Conduct\nPolicy as described in the Program Handbook", 
            "title": "9. PROFESSIONAL CONDUCT POLICY"
        }, 
        {
            "location": "/Internet App Dev III/outline/#10-intensive-course-conflicts", 
            "text": "If a student is attending an intensive course, the student must inform\nthe teacher, within the first two weeks of class, of the specific dates\nof any anticipated absences.", 
            "title": "10. INTENSIVE COURSE CONFLICTS"
        }, 
        {
            "location": "/Internet App Dev III/outline/#11-isep", 
            "text": "The Institutional Student Evaluation Policy (ISEP) is designed to\npromote equitable and effective evaluation of student learning and is\ntherefore a crucial policy to read and understand. The policy describes\nthe rights and obligations of students, faculty, departments, programs,\nand the College administration with regard to evaluation in all your\ncourses, including grade reviews and resolution of academic grievance.\nThe ISEP is available on the Dawson website.", 
            "title": "11. ISEP"
        }, 
        {
            "location": "/Internet App Dev III/references/", 
            "text": "references\n\n\nPHP has a garbage collector\n- every variable in container\n    - type\n    - value\n    - count to the number of references\n- \nunset($var)\n\n    - or \n$var=NULL\n\n    - decrease the reference count\n- count reaches 0\n    - garbage collector run\n- recommendation\n    - unset or set to null if variable no longer required\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n?php\n\n\n$name\n \n=\n \nBob\n;\n\n\n$other\n \n=\n \n$name\n;\n \n//copy of the container\n\n\n$otherref\n \n=\n \n \n$name\n;\n \n// \n = by reference\n\n\n$name\n \n=\n \nJaya\n;\n\n\n\necho\n \n$other\n \n// Bob\n\n\necho\n \n$otherref\n \n// Jaya\n\n\n?\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n?php\n\n\n$vals\n \n=\n \n[\n\n    \n$key1\n \n=\n \n$value1\n,\n\n    \n$key2\n \n=\n \nvalue2\n\n\n],\n\n\n\n$valNumeric\n \n=\n \n[\n\n    \n$value1\n,\n\n    \n$value2\n\n\n];\n\n\n\n$valMix\n \n=\n \n[\n\n    \n$value1\n,\n \n// 0\n\n    \n$value2\n,\n \n// 1\n\n    \n0\n \n=\n \n$value3\n,\n \n// 6\n\n    \n$value4\n \n// 7\n\n\n]\n\n\n\n$array\n \n=\n \n[\n\n    \n1\n,\n\n    \n2\n,\n \n// 1\n\n    \n0\n=\n5\n,\n \n// 0\n\n    \n8\n \n// 3\n\n\n]\n\n\n\n$array\n[\njaya\n]\n \n// accessor - warning undefined\n\n\n// modify --\n add to array at end\n\n\nisset\n(\n$array\n[\n$key\n])\n\n\n?\n\n\n\n\n\n\n\nforEach loop (with references)\n\n\n\n\ndon't need to know key\n\n\n\n\n1\nforeach ($array as $value) {}\n\n\n\n\n\n- \n$array\n = collection\n- \n$value\n = iterator\n- \n{}\n = on every iteration internal pointer\n2. Know key and value\n\n1\nforeach ($array as $key=\n$value) {}\n\n\n\n\n\nIterator pattern \n changing \n$value(iterator)\n\n- either syntax error doesn't change (PHP)\n- holds a copy of the array element\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n?php\n\n\n$arr\n \n=\n \n[\n1\n,\n2\n,\n3\n,\n4\n];\n\n\n\n//reference every same memory array element\n\n\nforeach\n \n(\n$arr\n \nas\n \n$value\n)\n \n{\n\n    \n$value\n \n=\n \n$value\n \n*\n \n2\n\n\n}\n\n\n\n// $arr = 2 4 6 8\n\n\necho\n \n$value\n;\n \n// 8\n\n\n// NO BLOCK SCOPE\n\n\n?\n\n\n\n\n\n\n$value\n will continue to refer to last element in $arr\n\n\nSafety, so that elsewhere can reuse variable name\n\n\n1\n2\n// breaks the reference\n\n\nunset ($value)", 
            "title": "References"
        }, 
        {
            "location": "/Internet App Dev III/references/#references", 
            "text": "PHP has a garbage collector\n- every variable in container\n    - type\n    - value\n    - count to the number of references\n-  unset($var) \n    - or  $var=NULL \n    - decrease the reference count\n- count reaches 0\n    - garbage collector run\n- recommendation\n    - unset or set to null if variable no longer required  1\n2\n3\n4\n5\n6\n7\n8\n9 ?php  $name   =   Bob ;  $other   =   $name ;   //copy of the container  $otherref   =     $name ;   //   = by reference  $name   =   Jaya ;  echo   $other   // Bob  echo   $otherref   // Jaya  ?     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29 ?php  $vals   =   [ \n     $key1   =   $value1 , \n     $key2   =   value2  ],  $valNumeric   =   [ \n     $value1 , \n     $value2  ];  $valMix   =   [ \n     $value1 ,   // 0 \n     $value2 ,   // 1 \n     0   =   $value3 ,   // 6 \n     $value4   // 7  ]  $array   =   [ \n     1 , \n     2 ,   // 1 \n     0 = 5 ,   // 0 \n     8   // 3  ]  $array [ jaya ]   // accessor - warning undefined  // modify --  add to array at end  isset ( $array [ $key ])  ?", 
            "title": "references"
        }, 
        {
            "location": "/Internet App Dev III/references/#foreach-loop-with-references", 
            "text": "don't need to know key   1 foreach ($array as $value) {}   \n-  $array  = collection\n-  $value  = iterator\n-  {}  = on every iteration internal pointer\n2. Know key and value 1 foreach ($array as $key= $value) {}   Iterator pattern   changing  $value(iterator) \n- either syntax error doesn't change (PHP)\n- holds a copy of the array element  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 ?php  $arr   =   [ 1 , 2 , 3 , 4 ];  //reference every same memory array element  foreach   ( $arr   as   $value )   { \n     $value   =   $value   *   2  }  // $arr = 2 4 6 8  echo   $value ;   // 8  // NO BLOCK SCOPE  ?    $value  will continue to refer to last element in $arr  Safety, so that elsewhere can reuse variable name  1\n2 // breaks the reference  unset ($value)", 
            "title": "forEach loop (with references)"
        }, 
        {
            "location": "/Internet App Dev III/terms-definitions/", 
            "text": "case sensitive\n\n\n$this\n\n\ndon't start with \n$__\n \"magical\"\n\n\n\n\n\n\ndefault values if not initialized. If not potential security issue\n\n\nvar_dump($var);\n \n NULL\n\n\n\n\nif/elseif/else\n\n\n1\n2\n3\n4\n5\n6\nif (condition) {\n\n\n} elseif (condition2) {\n\n\n    // more performant\n\n\n} else {\n\n\n\n}\n\n\n\n\n\n\n\nTRUE\n\n\nTRUE\n\n\n\n\nother than 0 (numeric, string \n0\n)\n\n\nnot \"\"\n\n\nnot emptyy array\n\n\nnot NULL\n\n\ncase insensitive =\n TRUE, true, TrUe\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n$msg= 5;\n\n\n\nif ($msg = 10){ // assignment\n\n\n    echo \nYou have 10 messages\n;\n\n\n}\n\n\n\nif (strpos(\nabcdef\n,\nabc\n)) {\n\n\n    echo \nfound it\n;\n\n\n} else {\n\n\n    echo \nnot there\n;\n\n\n}\n\n\n\n\n\n\n\n\nstrpos\n\n\nReturns index where found of FALSE\n\n1\nmixed strpos ( string $haystack , mixed $needle [, int $offset = 0 ] )\n\n\n\n\n\n\nhttp://php.net/manual/en/function.strpos.php\n\n\nArrays\n\n\n\n\nHashtable dictionary\n\n\nkey-value pairs\n\n\nkey: numeric (int) strings\n\n\nvalue: any data type\n\n\n\n\n\n\norder: based when we did key-value purge added\n\n\n\n\nNumeric array\n\n\nUses numbers for keys\n\n\nAssociative array\n\n\nUses numbers and strings\n\n1\n2\n3\n4\n5\n6\n$array = [\n\n\n    \nkey1\n=\n \nvalue1\n,\n\n\n    17 =\n \nvalue2\n,\n\n\n    \n1\n =\n \nvalue3\n\n\n] \n\n\n           //^converted to numeric\n\n\n\n\n\n* Mix of key types in same array\n* Mix of value types in same array\n    * if a string key is valid integer\n        * converted to integer\n    * if key float, boolean, null\n    * converted to int\n    * ##warning if you try to use array, object as key##\n    * \nis_set($array[\njaya\n])\n\n        * Good way to find out if a key is used\n\n\nExample arrays and behaviour\n\n\n1\n2\n3\n4\n5\n6\n7\n$array = [\n\n\n    1 =\n \na\n,\n\n\n    \n1\n =\n \nb\n,\n\n\n    1.6 =\n \nc\n,\n\n\n    true =\n \nd\n,\n\n\n    1 =\n \nd\n\n\n]\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n$array1 = [\n\n\n    \nfoo\n =\n \nbar\n,\n\n\n    \nbar\n =\n \nfoo\n,\n\n\n    100 =\n -100,\n\n\n    -100 =\n 100\n\n\n]\n\n\n\n$array2 = [\n\n\n    \nbar\n,\n\n\n    \nfoo\n,\n\n\n    -100,\n\n\n    100\n\n\n]\n\n\n\necho $array2[0]; // bar\n\n\necho $array1[0]; // \n\n\n\n\n\n\n\nIf you don't define keys, the array acts like \"normal\" as seen above\n\n\n1\n2\n3\n4\n5\n6\n7\n// Key is based on highest previous numeric\n\n\n$array3 = [\n\n\n    \nbar\n, // key: 0\n\n\n    6 =\n \nfoo\n, // key: 6\n\n\n    -100, // key: 7\n\n\n    100 // key: 8\n\n\n]\n\n\n\n\n\n\n\nisset\n\n\n1\nbool isset ( mixed $var [, mixed $... ] )\n\n\n\n\n\n\n\nunset\n\n\nDescription:\n\n1\nvoid unset ( mixed $var [, mixed $... ] )\n\n\n\n\n\n\n1\n$cars = [\nVolvo\n, \nBMW\n, \nToyota\n];\n\n\n\n\n\n\n1\n2\n3\nunset($cars[0]); // removing the key-value\n\n\n\n$length = count($cars);\n\n\n\n\n\n\nfor loop\n\n\n1\n2\n3\n4\nfor($i = 0; $1 \n $length, $i++) {\n\n\n    echo $cars[$i]; \n\n\n    // undefined offset warning null -\n \n\n\n}\n\n\n\n\n\n\n\nforeach\n\n\nDescription:\n\n1\nforeach($array as $iterator)\n\n\n\n\n\nExample:\n\n1\n2\n3\n4\n5\nforeach($cars as $value) {\n\n\n    echo $value;\n\n\n}\n\n\n\necho $car.\n.$value;\n\n\n\n\n\n\nArrays and Strings\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n$array = explode($separator, $string);\n\n\n$s1 = \nMon-Tue-Wed\n;\n\n\n$days = explode(\n-\n, $s1),\n\n\n/*\n\n\n    0 --\n \nMon\n\n\n    1 --\n \nTwo\n\n\n    2 --\n \nWed\n\n\n*/\n\n\n\n\n\n\n\nexplode\n\n\nSplit a string by string\n\n1\narray explode ( string $delimiter , string $string [, int $limit = PHP_INT_MAX ] )\n\n\n\n\n\n\nReturns an array of strings, each of which is a substring of string formed by splitting it on boundaries formed by the string delimiter.\n\n\nhttp://php.net/manual/en/function.explode.php\n\n\nswitch statement\n\n\n\n\ncomparison is loose \n==\n\n\nnot \n===\n\n\n\n\n\n\nsupports fallthrough\n\n\ncase expression must evaluate to \nint\n/\nfloat\n/\nstring\n/\nboolean\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n?php\n\n\n$mixed\n \n=\n \n0\n;\n\n\nswitch\n(\n$mixed\n)\n \n{\n\n    \ncase\n \nNULL\n:\n \n        \necho\n \nNULL\n;\n\n        \nbreak\n;\n\n    \ncase\n \n0\n:\n\n        \necho\n \n0\n;\n\n        \nbreak\n;\n\n    \ndefault\n \necho\n \nother\n;\n\n\n}\n\n\n?\n\n\n\n\n\n\n\nYou could match on conditions, replacing if/else/ifelse like this:\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n?php\n\n\n// this is terrible code dont do it\n\n\nswitch\n(\nTRUE\n)\n \n{\n\n    \ncase\n \n(\n$mixed\n \n===\n \nNULL\n)\n:\n \n        \necho\n \nNULL\n;\n\n        \nbreak\n;\n\n    \ncase\n \n(\n$mixed\n \n===\n \n0\n)\n:\n\n        \necho\n \n0\n;\n\n        \nbreak\n;\n\n    \ndefault\n \necho\n \nother\n;\n\n\n}\n\n\n?\n\n\n\n\n\n\nTernary operators\n\n\n\n\nWarning\n\n\nDon't nest them plox \ud83d\ude4f\n\n\n\n\nleft to right associativity not right to left\n\n\n1\n2\necho (true ? \ntrue\n: false ? \nf\n: \nt\n);\n\n\n// f\n\n\n\n\n\n\n\nThe first one feeds into the second one\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n?php\n\n\n$arg\n \n=\n \nT\n\n\n\n$vehicle\n \n=\n \n    \n(\n$arg\n \n==\n \nB\n)\n?\nbus\n:\n\n    \n(\n$arg\n \n==\n \nT\n)\n?\ntrain\n:\n\n    \n(\n$arg\n \n==\n \nS\n)\n?\nkpop\n:\n\n    \nfeet\n\n\n?\n\n\n// kpop\n\n\n\n\n\n\n\nIncluding multiple files\n\n\n\n\nBreak up long scripts\n\n\nSeparate reusable\n\n\n template code\n\n\nfunctions/class\n\n\ncommon variables\n\n\n\n\n\n\n\n\n4 functions\n\n\n\n\ninclude ('filename.php')\n\n\nLooks for file if doesnt find, no errors\n\n\n\n\n\n\ninclude_once\n\n\nEnsures the file wasn't already included\n\n\n\n\n\n\nrequire\n\n\nlike include except error\n\n\n\n\n\n\nrequire_once\n\n\ncopy paste file contents in that place", 
            "title": "Terms definitions"
        }, 
        {
            "location": "/Internet App Dev III/terms-definitions/#ifelseifelse", 
            "text": "1\n2\n3\n4\n5\n6 if (condition) {  } elseif (condition2) {      // more performant  } else {  }", 
            "title": "if/elseif/else"
        }, 
        {
            "location": "/Internet App Dev III/terms-definitions/#true", 
            "text": "TRUE   other than 0 (numeric, string  0 )  not \"\"  not emptyy array  not NULL  case insensitive =  TRUE, true, TrUe  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 $msg= 5;  if ($msg = 10){ // assignment      echo  You have 10 messages ;  }  if (strpos( abcdef , abc )) {      echo  found it ;  } else {      echo  not there ;  }", 
            "title": "TRUE"
        }, 
        {
            "location": "/Internet App Dev III/terms-definitions/#strpos", 
            "text": "Returns index where found of FALSE 1 mixed strpos ( string $haystack , mixed $needle [, int $offset = 0 ] )    http://php.net/manual/en/function.strpos.php", 
            "title": "strpos"
        }, 
        {
            "location": "/Internet App Dev III/terms-definitions/#arrays", 
            "text": "Hashtable dictionary  key-value pairs  key: numeric (int) strings  value: any data type    order: based when we did key-value purge added", 
            "title": "Arrays"
        }, 
        {
            "location": "/Internet App Dev III/terms-definitions/#numeric-array", 
            "text": "Uses numbers for keys", 
            "title": "Numeric array"
        }, 
        {
            "location": "/Internet App Dev III/terms-definitions/#associative-array", 
            "text": "Uses numbers and strings 1\n2\n3\n4\n5\n6 $array = [       key1 =   value1 ,      17 =   value2 ,       1  =   value3  ]              //^converted to numeric   \n* Mix of key types in same array\n* Mix of value types in same array\n    * if a string key is valid integer\n        * converted to integer\n    * if key float, boolean, null\n    * converted to int\n    * ##warning if you try to use array, object as key##\n    *  is_set($array[ jaya ]) \n        * Good way to find out if a key is used", 
            "title": "Associative array"
        }, 
        {
            "location": "/Internet App Dev III/terms-definitions/#example-arrays-and-behaviour", 
            "text": "1\n2\n3\n4\n5\n6\n7 $array = [      1 =   a ,       1  =   b ,      1.6 =   c ,      true =   d ,      1 =   d  ]     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 $array1 = [       foo  =   bar ,       bar  =   foo ,      100 =  -100,      -100 =  100  ]  $array2 = [       bar ,       foo ,      -100,      100  ]  echo $array2[0]; // bar  echo $array1[0]; //     If you don't define keys, the array acts like \"normal\" as seen above  1\n2\n3\n4\n5\n6\n7 // Key is based on highest previous numeric  $array3 = [       bar , // key: 0      6 =   foo , // key: 6      -100, // key: 7      100 // key: 8  ]", 
            "title": "Example arrays and behaviour"
        }, 
        {
            "location": "/Internet App Dev III/terms-definitions/#isset", 
            "text": "1 bool isset ( mixed $var [, mixed $... ] )", 
            "title": "isset"
        }, 
        {
            "location": "/Internet App Dev III/terms-definitions/#unset", 
            "text": "Description: 1 void unset ( mixed $var [, mixed $... ] )    1 $cars = [ Volvo ,  BMW ,  Toyota ];    1\n2\n3 unset($cars[0]); // removing the key-value  $length = count($cars);", 
            "title": "unset"
        }, 
        {
            "location": "/Internet App Dev III/terms-definitions/#for-loop", 
            "text": "1\n2\n3\n4 for($i = 0; $1   $length, $i++) {      echo $cars[$i];       // undefined offset warning null -    }", 
            "title": "for loop"
        }, 
        {
            "location": "/Internet App Dev III/terms-definitions/#foreach", 
            "text": "Description: 1 foreach($array as $iterator)   \nExample: 1\n2\n3\n4\n5 foreach($cars as $value) {      echo $value;  }  echo $car. .$value;", 
            "title": "foreach"
        }, 
        {
            "location": "/Internet App Dev III/terms-definitions/#arrays-and-strings", 
            "text": "1\n2\n3\n4\n5\n6\n7\n8 $array = explode($separator, $string);  $s1 =  Mon-Tue-Wed ;  $days = explode( - , $s1),  /*      0 --   Mon      1 --   Two      2 --   Wed  */", 
            "title": "Arrays and Strings"
        }, 
        {
            "location": "/Internet App Dev III/terms-definitions/#explode", 
            "text": "Split a string by string 1 array explode ( string $delimiter , string $string [, int $limit = PHP_INT_MAX ] )    Returns an array of strings, each of which is a substring of string formed by splitting it on boundaries formed by the string delimiter.  http://php.net/manual/en/function.explode.php", 
            "title": "explode"
        }, 
        {
            "location": "/Internet App Dev III/terms-definitions/#switch-statement", 
            "text": "comparison is loose  ==  not  ===    supports fallthrough  case expression must evaluate to  int / float / string / boolean    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 ?php  $mixed   =   0 ;  switch ( $mixed )   { \n     case   NULL :  \n         echo   NULL ; \n         break ; \n     case   0 : \n         echo   0 ; \n         break ; \n     default   echo   other ;  }  ?    You could match on conditions, replacing if/else/ifelse like this:  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 ?php  // this is terrible code dont do it  switch ( TRUE )   { \n     case   ( $mixed   ===   NULL ) :  \n         echo   NULL ; \n         break ; \n     case   ( $mixed   ===   0 ) : \n         echo   0 ; \n         break ; \n     default   echo   other ;  }  ?", 
            "title": "switch statement"
        }, 
        {
            "location": "/Internet App Dev III/terms-definitions/#ternary-operators", 
            "text": "Warning  Don't nest them plox \ud83d\ude4f   left to right associativity not right to left  1\n2 echo (true ?  true : false ?  f :  t );  // f    The first one feeds into the second one   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 ?php  $arg   =   T  $vehicle   =  \n     ( $arg   ==   B ) ? bus : \n     ( $arg   ==   T ) ? train : \n     ( $arg   ==   S ) ? kpop : \n     feet  ?  // kpop", 
            "title": "Ternary operators"
        }, 
        {
            "location": "/Internet App Dev III/terms-definitions/#including-multiple-files", 
            "text": "Break up long scripts  Separate reusable   template code  functions/class  common variables     4 functions   include ('filename.php')  Looks for file if doesnt find, no errors    include_once  Ensures the file wasn't already included    require  like include except error    require_once  copy paste file contents in that place", 
            "title": "Including multiple files"
        }, 
        {
            "location": "/Internet App Dev III/labs/getting-started/", 
            "text": "Note\n\n\nI personally be using my own Ubuntu system and not a VM. You are free to do whichever you wish, but the VM environment below can be quite slow.\n\n\n\n\nIntroduction to Vagrant and PHP with text editor, Home setup\n\n\nPart 1 \u2013 Vagrant virtual machine provisioning\n\n\nWe are using Vagrant in this course to ensure all students have the same\nvirtual machine configured on all lab computers and at home. Vagrant is\na tool that greatly helps sharing Virtual Machines with the exact same\nconfiguration. The vagrant box that we use is Homestead, which is\nrecommended by Laravel (a PHP framework that we will use later in the\nsemester).\n\n\nHomestead has the following development stack preinstalled: Ubuntu\nLinux, NginX web server, PostGres database, PHP.\n\n\nIn the first part of the lab, we will explore our system, make sure that\nwe can boot the virtual machine on the lab workstation and execute a\nbasic PHP script.\n\n\nCreate the Homestead folder\n\n\nCopy the folder \nS:\\\\CompSci\\\\524\\\\Homestead to your H: drive\n. You should\nnow have \nH:\\\\Homestead\n directory with the same contents as\n\nS:\\\\CompSci\\\\524\\\\Homestead\n.\n\n\nCreate the shared folder\n\n\nOne of the really nice features of Vagrant is how easy it is to get both\nthe host system (Windows 10 machine) and the virtual machine (Ubuntu) to\nsee and share the same directory.\n\n\nCreate a folder called PHPCode in your H: drive. You will save all your\nlabs and projects in this folder. Create the following directories\nwithin PHPCode to match the lab setup:\n\n\n\n\n\n\n\n\nlabs\n\n\n\n\n\n\nbadresto\n\n\n\n\n\n\nreader\n\n\n\n\n\n\ndawson\n\n\n\n\n\n\nnews\n\n\n\n\n\n\ntodo\n\n\n\n\n\n\n\n\n(spoiler: these are some of the labs and projects you\u2019ll be working on\nthis semester!)\n\n\nGet your ssh keys\n\n\nCheck if you already have a .ssh folder in your home directory (\nH:\n drive\nshould be setup as your \n$HOME\n in the labs). If you have an \n.ssh\n\ndirectory, you have already generated ssh keys (probably for git). If\nnot:\n\n\nOpen a Git Bash console in your H drive (right-click in Windows\nExplorer, Git Bash Here)\n\n\nMake sure you are in \nH:\n \n \npwd\n\n\nRun these commands:\n\n1\n$ mkdir -p .ssh \n \ncd\n .ssh\n\n\n\n\n\n1\n$ ssh-keygen -t rsa -b \n4096\n -C \nyouremail@address.here\n\n\n\n\n\nPress enter to save the key in \n/h/.ssh/id\\_rsa\n\n\nBoot the virtual machine configured for the PHP course\n\n\nYou will be doing this every lab:\n\n\nOpen a Git Bash window in \nH:/Homestead\n (right-click in explorer). This\nopens a Bash shell emulator on your Window system.\n\n\nMake sure you are in \n/h/Homestead\n\n\nRun this command:\n\n1\n$ vagrant up\n\n\n\n\n\nWhen this command finishes (a few minutes) your Virtual Machine is up\nand running!!\n\n\nSSH into the virtual machine\n\n\nOur Ubuntu VM is headless \u2013 meaning that we don\u2019t have a GUI interface\nto Linux. Yay Command line only\n\n\nWhenever you want to log into the booted VM (e.g., to check the\nconfiguration or access the database), type in this command from your\nGit Bash window in \nH:\\\\Homestead\n.\n\n\n1\n$ vagrant ssh\n\n\n\n\nYou are now in the VM!\n\n\ncd\n to the \nCode\n directory; you are now in the PHPCode shared folder\nSo the \nH:/PHPCode\n folder in Windows is the same as the\n\n/home/vagrant/Code\n folder in the VM.\n\n\n\n\nNOTE: there is a known Vagrant bug where you may not see the command\nprompt while \nssh\n-ing with vagrant \nssh\n. If that is that case, exit and\ntry \nssh vagrant@192.168.10.10\n, with password \nvagrant\n\n\n\n\nThis \u201cmagic\u201d of the shared directory is courtesy of the \nHomestead.yaml\n\nfile. If you open it in Notepad++ (or use less or nano or vim from the\nLinux side), you\u2019ll see a section that indicates the folder mapping.\n\n\nRun a simple script\n\n\nOnce the VM is up and running, we can run PHP scripts.\n\n\nCopy \nS:/CompSci/524/lab0\n to your \nH:/PHPCode/labs folder\n.\n\n\nOpen a browser (hint: Firefox is my favourite), and go to\n\nhttp://labs.app/lab0\n\n\nYou should see a page that contains output of the PHP configuration on\nthe VM. Don\u2019t worry too much about the content, if you see it, you know\nyour VM is serving up your PHP files as required.\n\n\nHow does this work?\n\n\nAll the lab computers have been set to associate certain hostnames to\nitself: you can see this in the file\n\n\nC:/Windows/System32/drivers/etc/hosts\n\n\nNotice, for example, that the host labs.app is associated with the IP\naddress \n192.168.10.10\n (in fact all hostnames are associated with this IP\naddress). The hosts file enables you to override the DNS for a domain on\nthat machine. Your machine will look at the IP address provided\n(\n192.168.10.10\n) instead of going through a DNS. This IP address\n(\n192.168\n) is in the private IP address range, so we can map with no\nworries.\n\n\nNow look at \nH:/Homestead/Homestead.yaml\n: you will see that the IP\naddress is the one being used by you Vagrant VM 9and its NginX web\nserver. Further down, you see that the sites are associated with\ndifferent folders in VM; these folders are all in the shared\n\n/home/vagrant/Code\n folder (which is your \nH:/PHPCode\n folder)\n\n\nIf you open tChe \nlab0/index.php file\n, you will a single line in the php\ntags \n\u2013 phpinfo()\n is the function that outputs the PHP configuration.\n\n\nNginX, the web server, is configured by default to return \nindex.html\n,\n\nindex.html\n directly, or interpret \nindex.php\n through the PHP interpreter.\nThat\u2019s what happened when you browsed to \nlabs.app/lab0\n.\n\n\nCreate and debug your own PHP Script\n\n\nCreate a folder \nH:\\\\PHPCode\\\\labs\\\\lab1\n (or in the Linux VM\n\nCode/labs/lab1\n in the VM), and write a PHP script named index.php that\nwill create the output as shown in the image, using a text editor like\nNotepad++ or Atom.\n\n\n\n\n\n\n use HTML5\n    tags, including doctype and html tag\n\n\n\n\n\n\nthe php code will fill in the contents of a table, with echo\u2019s\n    within a nested loop\n\n\n\n\n\n\nno styling is required\n\n\n\n\n\n\nrecall: PHP variable names start with $; for loops look pretty much\n    the same as java.\n\n\n\n\n\n\nPHP coding\n    conventions\n\n    use the \u201cEgyptian brackets\u201d/\u201dK\nR style braces\u201d in control structures\n    \u2013 which means the opening brace is written on the same line as the\n    conditional clause and the closing brace is always written on its\n    own line.\n\n\n\n\n\n\nE.g.:\n\n1\n2\n3\n4\n5\n if ($a != 2) {\n\n \u00a0 \u00a0 $a = 2;\n\n }\n\n\n\n\n \n(As an aside, this is also the\n \n*common Java style\n *\n).\n\n\nTesting the PHP Script\n\n\nBrowse to \nhttp://labs.app/lab1\n. Since we\nnamed the file index.php, NginX will open it by default. If you named it\nsomething else, write it in the address bar.\n\n\n\nThe results of the program should appear!\n\n\nRecall: Firefox (as well as the other major browsers) come with a suite\nof developer tools. Open the menu in Firefox, select Developer and\nToggle Tools (or Ctrl+Shift+I). You will see the http messages and other\ninformation that is \nvery\n useful when debugging web applications.\n\n\nShutting down the VM\n\n\nUse the command vagrant halt to gracefully shutdown your VM. Note that\nthe VM is subject to deep-freeze, so any changes anywhere except the\nshared folder will be lost the next time you log in.\n\n\nSOLVING INTERMITTENT 502 BAD GATEWAY ISSUES\n\n\nIf you are victim, you may have to make sure that nginx and php config\nmatch:\n\n\nGo to \n/etc/php/7.1/fpm/pool.d/\n , edit \nwww.conf\n (use \nsudo nano\n) and edit\nthe line \nlisten = /run/php/php7.1-fpm.sock\n to\n\nlisten = var/run/php/php7.1-fpm.sock\n\n\nExit and save the file, then run \nsudo service php7.1-fpm restart\n\n\nSetting up your laptop/home system\n\n\nThe following instructions are provided for a Windows 7.1+ syste, If you\nare running Linux or IOS, the steps will be simpler. See this\n\nlink\n, and compare to the notes\nbelow.\n\n\n\n\n\n\nmake sure your BIOS/UEFI supports hardware virtualization and it is\n    enabled\n\n\n\n\n\n\nmake sure HyperV is disabled (Control panel - uninstall a program \u2013\n    program and features \u2013 turn Windows features on/off \u2013\n    uncheck HyperV)\n\n\n\n\n\n\ninstall Git for Windows to have gitbash:\n    \nhttps://git-for-windows.github.io\n\n\n\n\nchoose default install options (select Windows\n    Explorer Integration. Select \nUse Git from the Windows Command\n    Prompt\n radio button so that Git can be run from the\n    command line.)\n\n\n\n\n\n\n\n\ninstall VirtualBox 5.1.x (latest version) :\n    \nhttps://www.virtualbox.org/wiki/Downloads\n\n\n\n\n\n\ninstall Vagrant 1.9.x (latest version):\n    \nhttps://www.vagrantup.com/downloads.html\n\n\n\n\n\n\nif desired, setup your hosts to be the same as school\n\n\n\n\n\n\nopen Notepad as admin\n\n\n\n\n\n\nEdit C:/Windows/System32/drivers/etc/hosts (nb: make sure Notepad is\n    looking at all files, not just .txt)\n\n\n\n\n\n\nAdd to the end:\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n192.168.10.10 dawson.app\n\n192.168.10.10 news.app\n\n192.168.10.10 todo.app\n\n192.168.10.10 labs.app\n\n192.168.10.10 reader.app\n\n192.168.10.10 badresto.app\n\n\n\n\n1.  get your ssh keys, if required. Follow the steps in the lab above to\n    check if they exist in the $HOME directory\n\n\n\n\n\n\ndecide where you want your Homestead and PHPCode directories and\n    make them\n\n\n\n\n\n\nIn the containing directory:\n\n\n\n\n\n\nopen gitbash\n\n\n\n\n\n\nrun the following commands:\n\n1\n$ vagrant box add laravel/homestead\n\n\n\n\n\n1\n$ git clone https://github.com/laravel/homestead.git Homestead\n\n\n\n\n\n1\n$ \ncd\n Homestead\n\n\n\n\n\n1\n$ git checkout v5.4.0\n\n\n\n\n\n1\n$ bash init.sh\n\n\n\n\n\n\n\nedit the \nHomestead/Homestead.yaml\n file (look at the one you have in\nyour \nH:\n drive)\n\n\n\n\n\n\n\n\nin the folders section, provide to mapping to the PHPCode folder you\n    created in step 8. e.g.,\n\n\n\n\n\n\nfolders:\n\n\n\n\nmap: \nh:/PHPCode\n\n\n\n\nto: \n/home/vagrant/Code\n\n\n\n\nif you added the sites to the \netc/hosts\n files, also add them to\n    the \nHomestead.yaml\n. For example:\n\n1\n2\n3\nsites:\n\n- map: labs.app\n\n\n\n\n\n\n\nto: \n/home/vagrant/Code/labs\n\n\n\n\n\n\neach time you want to boot up:\nvagrant up\n\n\n\n\n\n\nto ssh in: either \nvagrant ssh\n or \nssh vagrant@192.168.10.10\n, with\n    password \nvagrant\n\n\n\n\n\n\nto shut down: \nvagrant halt\n\n\n\n\n\n\nDebugging your system\n\n\nWhen you vagrant up, if you get the message that a Virtual Machine with the name Homestead-7 already exists, it indicates that you VM was not shutdown correctly. \n\n\nTo fix this:\n\n\n\n\nfind the Oracle VM VirtualBox application and open it\n\n\nyou will notice a VM called Homestead-7 which is running\n\n\nright-click on it to close it\n\n\nright-click on it to remove it and delete all files\n\n\nclose your bash window, reopen, and retry\n\n\nif you still have issues, you may have to delete folders: in the \nHomestead\\.vagrant\\machines\n folder as well as the \nVirtualBox VMs\\\n folder. Always close and reopen your bash window.\n\n\n\n\nif you need to edit your Homestead.yaml file, make sure that vagrant halt first. Once the file is saved, start vagrant with the command vagrant up --provision. This will ensure that vagrant re-reads the Homestead.yaml file.\n\n\nThe Homestead.yaml file is notoriously sensitive to bad spacing. This may be a cause of issues that you encounter\n\n\nOne really unfortunate side-effect of Dawson\u2019s deep freeze system is that changes that you make to the VM get lost every time you logout (changes to the php config files, or your database, or installation of tools, or \u2026). This can get irritating. If possible, you may prefer to use your laptop in the labs.", 
            "title": "Getting started"
        }, 
        {
            "location": "/Internet App Dev III/labs/getting-started/#introduction-to-vagrant-and-php-with-text-editor-home-setup", 
            "text": "", 
            "title": "Introduction to Vagrant and PHP with text editor, Home setup"
        }, 
        {
            "location": "/Internet App Dev III/labs/getting-started/#part-1-vagrant-virtual-machine-provisioning", 
            "text": "We are using Vagrant in this course to ensure all students have the same\nvirtual machine configured on all lab computers and at home. Vagrant is\na tool that greatly helps sharing Virtual Machines with the exact same\nconfiguration. The vagrant box that we use is Homestead, which is\nrecommended by Laravel (a PHP framework that we will use later in the\nsemester).  Homestead has the following development stack preinstalled: Ubuntu\nLinux, NginX web server, PostGres database, PHP.  In the first part of the lab, we will explore our system, make sure that\nwe can boot the virtual machine on the lab workstation and execute a\nbasic PHP script.", 
            "title": "Part 1 \u2013 Vagrant virtual machine provisioning"
        }, 
        {
            "location": "/Internet App Dev III/labs/getting-started/#create-the-homestead-folder", 
            "text": "Copy the folder  S:\\\\CompSci\\\\524\\\\Homestead to your H: drive . You should\nnow have  H:\\\\Homestead  directory with the same contents as S:\\\\CompSci\\\\524\\\\Homestead .", 
            "title": "Create the Homestead folder"
        }, 
        {
            "location": "/Internet App Dev III/labs/getting-started/#create-the-shared-folder", 
            "text": "One of the really nice features of Vagrant is how easy it is to get both\nthe host system (Windows 10 machine) and the virtual machine (Ubuntu) to\nsee and share the same directory.  Create a folder called PHPCode in your H: drive. You will save all your\nlabs and projects in this folder. Create the following directories\nwithin PHPCode to match the lab setup:     labs    badresto    reader    dawson    news    todo     (spoiler: these are some of the labs and projects you\u2019ll be working on\nthis semester!)", 
            "title": "Create the shared folder"
        }, 
        {
            "location": "/Internet App Dev III/labs/getting-started/#get-your-ssh-keys", 
            "text": "Check if you already have a .ssh folder in your home directory ( H:  drive\nshould be setup as your  $HOME  in the labs). If you have an  .ssh \ndirectory, you have already generated ssh keys (probably for git). If\nnot:  Open a Git Bash console in your H drive (right-click in Windows\nExplorer, Git Bash Here)  Make sure you are in  H:     pwd  Run these commands: 1 $ mkdir -p .ssh    cd  .ssh   1 $ ssh-keygen -t rsa -b  4096  -C  youremail@address.here   \nPress enter to save the key in  /h/.ssh/id\\_rsa", 
            "title": "Get your ssh keys"
        }, 
        {
            "location": "/Internet App Dev III/labs/getting-started/#boot-the-virtual-machine-configured-for-the-php-course", 
            "text": "You will be doing this every lab:  Open a Git Bash window in  H:/Homestead  (right-click in explorer). This\nopens a Bash shell emulator on your Window system.  Make sure you are in  /h/Homestead  Run this command: 1 $ vagrant up   When this command finishes (a few minutes) your Virtual Machine is up\nand running!!", 
            "title": "Boot the virtual machine configured for the PHP course"
        }, 
        {
            "location": "/Internet App Dev III/labs/getting-started/#ssh-into-the-virtual-machine", 
            "text": "Our Ubuntu VM is headless \u2013 meaning that we don\u2019t have a GUI interface\nto Linux. Yay Command line only  Whenever you want to log into the booted VM (e.g., to check the\nconfiguration or access the database), type in this command from your\nGit Bash window in  H:\\\\Homestead .  1 $ vagrant ssh  \nYou are now in the VM!  cd  to the  Code  directory; you are now in the PHPCode shared folder\nSo the  H:/PHPCode  folder in Windows is the same as the /home/vagrant/Code  folder in the VM.   NOTE: there is a known Vagrant bug where you may not see the command\nprompt while  ssh -ing with vagrant  ssh . If that is that case, exit and\ntry  ssh vagrant@192.168.10.10 , with password  vagrant   This \u201cmagic\u201d of the shared directory is courtesy of the  Homestead.yaml \nfile. If you open it in Notepad++ (or use less or nano or vim from the\nLinux side), you\u2019ll see a section that indicates the folder mapping.", 
            "title": "SSH into the virtual machine"
        }, 
        {
            "location": "/Internet App Dev III/labs/getting-started/#run-a-simple-script", 
            "text": "Once the VM is up and running, we can run PHP scripts.  Copy  S:/CompSci/524/lab0  to your  H:/PHPCode/labs folder .  Open a browser (hint: Firefox is my favourite), and go to http://labs.app/lab0  You should see a page that contains output of the PHP configuration on\nthe VM. Don\u2019t worry too much about the content, if you see it, you know\nyour VM is serving up your PHP files as required.  How does this work?  All the lab computers have been set to associate certain hostnames to\nitself: you can see this in the file  C:/Windows/System32/drivers/etc/hosts  Notice, for example, that the host labs.app is associated with the IP\naddress  192.168.10.10  (in fact all hostnames are associated with this IP\naddress). The hosts file enables you to override the DNS for a domain on\nthat machine. Your machine will look at the IP address provided\n( 192.168.10.10 ) instead of going through a DNS. This IP address\n( 192.168 ) is in the private IP address range, so we can map with no\nworries.  Now look at  H:/Homestead/Homestead.yaml : you will see that the IP\naddress is the one being used by you Vagrant VM 9and its NginX web\nserver. Further down, you see that the sites are associated with\ndifferent folders in VM; these folders are all in the shared /home/vagrant/Code  folder (which is your  H:/PHPCode  folder)  If you open tChe  lab0/index.php file , you will a single line in the php\ntags  \u2013 phpinfo()  is the function that outputs the PHP configuration.  NginX, the web server, is configured by default to return  index.html , index.html  directly, or interpret  index.php  through the PHP interpreter.\nThat\u2019s what happened when you browsed to  labs.app/lab0 .", 
            "title": "Run a simple script"
        }, 
        {
            "location": "/Internet App Dev III/labs/getting-started/#create-and-debug-your-own-php-script", 
            "text": "Create a folder  H:\\\\PHPCode\\\\labs\\\\lab1  (or in the Linux VM Code/labs/lab1  in the VM), and write a PHP script named index.php that\nwill create the output as shown in the image, using a text editor like\nNotepad++ or Atom.     use HTML5\n    tags, including doctype and html tag    the php code will fill in the contents of a table, with echo\u2019s\n    within a nested loop    no styling is required    recall: PHP variable names start with $; for loops look pretty much\n    the same as java.    PHP coding\n    conventions \n    use the \u201cEgyptian brackets\u201d/\u201dK R style braces\u201d in control structures\n    \u2013 which means the opening brace is written on the same line as the\n    conditional clause and the closing brace is always written on its\n    own line.    E.g.: 1\n2\n3\n4\n5  if ($a != 2) {\n\n \u00a0 \u00a0 $a = 2;\n\n }  \n  (As an aside, this is also the   *common Java style\n * ).", 
            "title": "Create and debug your own PHP Script"
        }, 
        {
            "location": "/Internet App Dev III/labs/getting-started/#testing-the-php-script", 
            "text": "Browse to  http://labs.app/lab1 . Since we\nnamed the file index.php, NginX will open it by default. If you named it\nsomething else, write it in the address bar.  \nThe results of the program should appear!  Recall: Firefox (as well as the other major browsers) come with a suite\nof developer tools. Open the menu in Firefox, select Developer and\nToggle Tools (or Ctrl+Shift+I). You will see the http messages and other\ninformation that is  very  useful when debugging web applications.", 
            "title": "Testing the PHP Script"
        }, 
        {
            "location": "/Internet App Dev III/labs/getting-started/#shutting-down-the-vm", 
            "text": "Use the command vagrant halt to gracefully shutdown your VM. Note that\nthe VM is subject to deep-freeze, so any changes anywhere except the\nshared folder will be lost the next time you log in.", 
            "title": "Shutting down the VM"
        }, 
        {
            "location": "/Internet App Dev III/labs/getting-started/#solving-intermittent-502-bad-gateway-issues", 
            "text": "If you are victim, you may have to make sure that nginx and php config\nmatch:  Go to  /etc/php/7.1/fpm/pool.d/  , edit  www.conf  (use  sudo nano ) and edit\nthe line  listen = /run/php/php7.1-fpm.sock  to listen = var/run/php/php7.1-fpm.sock  Exit and save the file, then run  sudo service php7.1-fpm restart", 
            "title": "SOLVING INTERMITTENT 502 BAD GATEWAY ISSUES"
        }, 
        {
            "location": "/Internet App Dev III/labs/getting-started/#setting-up-your-laptophome-system", 
            "text": "The following instructions are provided for a Windows 7.1+ syste, If you\nare running Linux or IOS, the steps will be simpler. See this link , and compare to the notes\nbelow.    make sure your BIOS/UEFI supports hardware virtualization and it is\n    enabled    make sure HyperV is disabled (Control panel - uninstall a program \u2013\n    program and features \u2013 turn Windows features on/off \u2013\n    uncheck HyperV)    install Git for Windows to have gitbash:\n     https://git-for-windows.github.io   choose default install options (select Windows\n    Explorer Integration. Select  Use Git from the Windows Command\n    Prompt  radio button so that Git can be run from the\n    command line.)     install VirtualBox 5.1.x (latest version) :\n     https://www.virtualbox.org/wiki/Downloads    install Vagrant 1.9.x (latest version):\n     https://www.vagrantup.com/downloads.html    if desired, setup your hosts to be the same as school    open Notepad as admin    Edit C:/Windows/System32/drivers/etc/hosts (nb: make sure Notepad is\n    looking at all files, not just .txt)    Add to the end:     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 192.168.10.10 dawson.app\n\n192.168.10.10 news.app\n\n192.168.10.10 todo.app\n\n192.168.10.10 labs.app\n\n192.168.10.10 reader.app\n\n192.168.10.10 badresto.app  \n1.  get your ssh keys, if required. Follow the steps in the lab above to\n    check if they exist in the $HOME directory    decide where you want your Homestead and PHPCode directories and\n    make them    In the containing directory:    open gitbash    run the following commands: 1 $ vagrant box add laravel/homestead   1 $ git clone https://github.com/laravel/homestead.git Homestead   1 $  cd  Homestead   1 $ git checkout v5.4.0   1 $ bash init.sh    edit the  Homestead/Homestead.yaml  file (look at the one you have in\nyour  H:  drive)     in the folders section, provide to mapping to the PHPCode folder you\n    created in step 8. e.g.,    folders:   map:  h:/PHPCode   to:  /home/vagrant/Code   if you added the sites to the  etc/hosts  files, also add them to\n    the  Homestead.yaml . For example: 1\n2\n3 sites:\n\n- map: labs.app    to:  /home/vagrant/Code/labs    each time you want to boot up: vagrant up    to ssh in: either  vagrant ssh  or  ssh vagrant@192.168.10.10 , with\n    password  vagrant    to shut down:  vagrant halt", 
            "title": "Setting up your laptop/home system"
        }, 
        {
            "location": "/Internet App Dev III/labs/getting-started/#debugging-your-system", 
            "text": "When you vagrant up, if you get the message that a Virtual Machine with the name Homestead-7 already exists, it indicates that you VM was not shutdown correctly.   To fix this:   find the Oracle VM VirtualBox application and open it  you will notice a VM called Homestead-7 which is running  right-click on it to close it  right-click on it to remove it and delete all files  close your bash window, reopen, and retry  if you still have issues, you may have to delete folders: in the  Homestead\\.vagrant\\machines  folder as well as the  VirtualBox VMs\\  folder. Always close and reopen your bash window.   if you need to edit your Homestead.yaml file, make sure that vagrant halt first. Once the file is saved, start vagrant with the command vagrant up --provision. This will ensure that vagrant re-reads the Homestead.yaml file.  The Homestead.yaml file is notoriously sensitive to bad spacing. This may be a cause of issues that you encounter  One really unfortunate side-effect of Dawson\u2019s deep freeze system is that changes that you make to the VM get lost every time you logout (changes to the php config files, or your database, or installation of tools, or \u2026). This can get irritating. If possible, you may prefer to use your laptop in the labs.", 
            "title": "Debugging your system"
        }, 
        {
            "location": "/Mobile Software Dev/introduction/", 
            "text": "", 
            "title": "Introduction"
        }, 
        {
            "location": "/Software Dev Project/introduction/", 
            "text": "Welcome to the Software Development Project. In this first week we will discuss the course in general, the project and the development tools that we will use. You should have all reviewed the project specification I sent out last week.\n\n\nIn the lab you will create the DDL statements for the database. As MySQL is slightly different from Oracle in its syntax I have a file in this week's  download with a set of DDL statements for a different problem. We will discuss how all of this works in the lab.\n\n\nFor homework, you will code a common dice game played in casinos in Java. The instructions for the assignment are in another file in this week's download.\n\n\nTechnologies required\n\n\nYou can use what you see fit in terms of IDE/tools\n\n\n\n\nJava 1.8\n\n\nJavaFX 2.2\n\n\nMySQL 5.7\n\n\nJDBC\n\n\nJUnit 4\n\n\nJavaMail / Jodd\n\n\nMaven\n\n\nGit\n\n\nGitlab    \n\n\n\n\n\n\nDanger\n\n\nKen won't let us use GitHub :c\n\n\n\n\nSteps to a project\n\n\n\n\nRead the Specs\n\n\nCreate the Database and Tables\n\n\nWrite the Java JDBC CRUD code while writing unit tests after every method is coded\n\n\nCreate\n\n\nRead\n\n\nUpdate\n\n\nDelete\n\n\n\n\n\n\n\n\nWeek One Lab\n\n\nWrite the SQL cripts to create the necessaru tables in MySQL and then email the scripts to \n by the end of the lab period\n\n\nImportant\n\n\nYou should have 50 account thingies per month\n\n\nSetting Up MySQL\n\n\n\n\nInstall MySQL Community edition\n\n\n\n\n1\n$ mysql -h", 
            "title": "Introduction"
        }, 
        {
            "location": "/Software Dev Project/introduction/#technologies-required", 
            "text": "You can use what you see fit in terms of IDE/tools   Java 1.8  JavaFX 2.2  MySQL 5.7  JDBC  JUnit 4  JavaMail / Jodd  Maven  Git  Gitlab        Danger  Ken won't let us use GitHub :c", 
            "title": "Technologies required"
        }, 
        {
            "location": "/Software Dev Project/introduction/#steps-to-a-project", 
            "text": "Read the Specs  Create the Database and Tables  Write the Java JDBC CRUD code while writing unit tests after every method is coded  Create  Read  Update  Delete", 
            "title": "Steps to a project"
        }, 
        {
            "location": "/Software Dev Project/introduction/#week-one-lab", 
            "text": "Write the SQL cripts to create the necessaru tables in MySQL and then email the scripts to   by the end of the lab period", 
            "title": "Week One Lab"
        }, 
        {
            "location": "/Software Dev Project/introduction/#important", 
            "text": "You should have 50 account thingies per month", 
            "title": "Important"
        }, 
        {
            "location": "/Software Dev Project/introduction/#setting-up-mysql", 
            "text": "Install MySQL Community edition   1 $ mysql -h", 
            "title": "Setting Up MySQL"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/", 
            "text": "Warning\n\n\n\ud83d\udea7 Under Construction\n\n\n\n\nContents\n\n\n1 Introduction 1\n\n\n1.1 System Overview 1\n\n\n1.2 Design Map 1\n\n\n1.3 Definitions and Acronyms 1\n\n\n1.4 Gmail Requirements 1\n\n\n2 Considerations 2\n\n\n2.1 Assumptions 2\n\n\n2.2 Constraints 2\n\n\n2.3 System Environment 2\n\n\n2.4 Repository and Naming 2\n\n\n2.4.1 GitLab Account Name 2\n\n\n2.4.2 Java Project Name 3\n\n\n2.4.3 GitLab Repository Name 3\n\n\n3 High Level Design 4\n\n\n3.1 Configuration Module 4\n\n\n3.2 Database Module 4\n\n\n3.3 Appointment Module 4\n\n\n3.4 Reminder Module 4\n\n\n3.5 Help Module 4\n\n\n3.6 Master GUI Module 4\n\n\n4 Low Level Design 5\n\n\n4.1 Configuration Module 5\n\n\n4.1.1 Database 5\n\n\n4.1.2 Email 5\n\n\n4.1.3 Appointment Group 5\n\n\n4.2 Database Module 5\n\n\n4.2.1 Email 5\n\n\n4.2.2 Appointment Group 6\n\n\n4.2.3 Appointments 6\n\n\n4.3 Appointment Module 6\n\n\n4.3.1 Monthly View 6\n\n\n4.3.2 Weekly View 6\n\n\n4.3.3 Daily View 6\n\n\n4.3.4 Appointment Dialog 6\n\n\n4.3.5 Search Dialog 6\n\n\n4.4 Reminder Module 7\n\n\n4.4.1 Timers 7\n\n\n4.5 Help Module 7\n\n\n4.6 Master GUI Module 7\n\n\n4.6.1 Menu 7\n\n\nFile 7\n\n\nView 7\n\n\nHelp 7\n\n\n4.6.2 Toolbar 8\n\n\n5 Data Structures 9\n\n\n5.1 DBMS Settings 9\n\n\n5.2 SMTP Settings 9\n\n\n5.3 Appointment Group Record 9\n\n\n5.4 Appointment Record 10\n\n\n5.5 Help Records 10\n\n\nIntroduction\n\n\nThe purpose of this project is to develop your individual skills as a\nJava application developer. The application described in this document\nis designed to have you apply what you have already learned in the\nComputer Science Technology Program and what you are continuing to learn\nthis semester. This is an individual student project in which you will\nwork alone.\n\n\nSystem Overview\n\n\n\n\nThe program that is\ndescribed in this document is called the Java Agenda Manager or JAM for\nshort. Its use case is to provide an interactive application in which\nappointments can be stored and reviewed along with reminders of upcoming\nevents. It will be written in the Java language and it is meant to be\nportable across all platforms that support Java\n\n\nDesign Map\n\n\nWithin this document you will find the features, specifications, and\ndesign of the JAM. The final product that you develop is required\nrespect this document. While you may add additional features, you are\nexpected to deliver the feature set described here. The following\nsections of this document will describe the features, organization and\nGUI design of the system.\n\n\nDefinitions and Acronyms\n\n\n\n\nAppointment\n\n\n\n\nAn event that the user of the program wishes to record and then be\nreminded of prior to its scheduled time.\n\n\n\n\nMonthly Calendar\n\n\n\n\nThe presentation of all the days in each month with an ordered list of\nany appointments presented for the specific day.\n\n\n\n\nWeekly Calendar\n\n\n\n\nThe presentation of the days in each week that shows the time\nintervals for the day and displays appointments at their specific day\nand time.\n\n\n\n\nDaily Calendar\n\n\n\n\nThe presentation of a single day that shows the time intervals for the\nday and displays appointments at their specific time.\n\n\n\n\nReminder\n\n\n\n\nA visual and audible alarm generated by the program to remind the user\nof an upcoming appointment. In addition, an email is sent to the user\nas a further reminder.\n\n\n\n\nAppointment Group\n\n\n\n\nAppointments can be grouped. A group displays a background color in\nthe display.\n\n\n\n\nGmail Requirements\n\n\nYou will need to create one Gmail account. This is the account thru\nwhich you will be sending reminders.\n\n\n\n\n\n\nConsiderations\n    ==============\n\n\n\n\nAssumptions\n    ---------------------------------------------------------------------------------------------------------\n\n\n\n\n\n\n\n\nThe program will be written using the standard features of the Java\nlanguage. Only third party open source libraries approved by your\ninstructor may be used. JUnit testing must be employed for all JDBC code\nyou write.\n\n\nConstraints\n\n\nThe primary constraint is\nthat the system must be completed by the end of week eight. You must\nlook for simplicity rather than complexity. Features not explicitly in\nthis document and not mentioned in class should be avoided unless they\nare recognized as critical to the operation of the program. Such changes\nmust be submitted to your instructor for approval.\n\n\nSystem Environment\n\n\nThe programming language will be Java\nversion 1.8 and the GUI will be JavaFX. You may use NetBeans or Eclipse\nfor your IDE. NetBeans is preferred.\n\n\nThe JAM will depend on an external DBMS for its appointment and contact\nstore. The DBMS will be MySQL.\n\n\nThe JAM is not dependent on any specific operating system. It should be\nable to run on any computer that supports Java. To be able to use the\nWaldo2 database server the computer must be connected to the Internet.\n\n\nRepository and Naming\n\n\nProjects must be stored in a Git repository. You are required to use a\nprivate repository on GitLab (gitlab.com). GitLab provides any developer\nwith a private repository. When you create your repository you must\ngrant the GitLab user \u201comniprof\u201d developer status. You may not use any\nother repository in this course. The naming rules are mandatory.\n\n\nGitLab Account Name\n\n\nYour GitLab account must be named \nJAM_Student Name\n. Use your name\nas it appears on college records. For example, if your name is Betty\nSmith then you must create an account named:\n\n\nJAM_BettySmith\n\n\nYou may leave out any middle names.\n\n\nJava Project Name\n\n\nWhen you create your project in the IDE it must be named \nJAM_Student\nID_Version\n. For example:\n\n\nJAM_9999999_1\n\n\nIf you must create a new project, for whatever reason, then use the same\nname with a different version number:\n\n\nJAM_9999999_2\n\n\nGitLab Repository Name\n\n\nThe repository that you create for your projects must have the same name\nas your Java project in the IDE. This means that when I need to retrieve\nyour code from GitLab the URL will look like:\n\n\nhttps://gitlab.com/JAM\n_BettySmith/JAM_9999999_1\n\n\nHigh Level Design\n\n\n===============================================================================================================\n\n\nThe overall design of the program will consist of modules that manage\nthe different features and functions of the program.\n\n\nConfiguration Module\n\n\nThis module is responsible for recording and storing information that\naffects the operation of the program. There will be GUI components in\nthis module.\n\n\nDatabase Module\n\n\nThis module is responsible for interacting with the DBMS on behalf of\nall other modules. It will provide specific services to meet the needs\nof other modules. There will not be any GUI components in this module.\n\n\nUnit testing of this module is required.\n\n\nAppointment Module\n\n\nThis module is responsible for the user interface for managing and\ndisplaying appointments. There will be GUI components in this module.\n\n\nReminder Module\n\n\nThis module is responsible for generating alarms prior to an\nappointment. There will not be any GUI components in this module.\n\n\nHelp Module\n\n\nThis module is responsible for displaying help screens. There will be\nGUI components in this module.\n\n\nMaster GUI Module\n\n\nThis module is responsible for the main application window, menus, and\ntoolbars. There will be GUI components in this module.\n\n\n\n\n\n\nLow Level Design\n    ================\n\n\n\n\nConfiguration Module\n    --------------------\n\n\n\n\n\n\n\n\nThis module will handle the data that configures the program. There are\nthree categories of configuration data. These are database, email and\nappointment group. Each category will require a GUI interface for input\nand editing.\n\n\nWhen the program is run for the very first time this module executes\nautomatically. This module can be accessed by the user at any time to\nmake changes to the configuration.\n\n\nDatabase\n\n\nThe program must have a MySQL database account ready to use. You can\ncreate a local account on your computer or use an account on a\ndepartment server. This information will be stored in a properties file\nusing the Properties API in Java. Properties files are plain text files.\nSee section 5.1 for the data that must be stored. You will need a popup\ndialog to enter or edit this data.\n\n\nEmail\n\n\nThe program, when running, will send an email to the program\u2019s user at a\npreset interval before an appointment. You will require an email account\non Gmail for this purpose. The necessary information will be stored in a\ntable in the database. You will need a popup dialog to enter or edit\nthis data.\n\n\nAppointment Group\n\n\nAn appointment group supports the concept of grouping appointments such\nas work appointments and personal appointments. The group determines the\nbackground colour of an appointment in the display. You must have five\ndefault groups with colors already assigned to them. You will need a\npopup dialog to enter or edit this data.\n\n\nDatabase Module\n\n\nThis module will manage the records for all modules. There should be a\nclass for each data table. It will create the required tables for the\ndatabase the first time the program is run. Then it will add or retrieve\nrecords based on requests from the other modules. Each of these modules\nmust have unit tests that demonstrate that the code functions as\nrequired.\n\n\nEmail\n\n\nThis module will be responsible for retrieving, inserting, updating or\ndeleting records for the Email configuration.\n\n\nAppointment Group\n\n\nThis module will be responsible for retrieving, inserting, updating or\ndeleting records for the Appointment Group configuration.\n\n\nAppointments\n\n\nThis module will be responsible for retrieving, inserting, updating or\ndeleting appointment records. There will need to be several retrieval\nroutines to match the various views. In addition, several search\nroutines will be required based on various criteria.\n\n\nAppointment Module\n\n\nThis module will be responsible for the user interface for inputting\nappointments and displaying appointments. It will consist of the\nfollowing:\n\n\nMonthly View\n\n\nThis will display a full month in a grid 6 rows by 7 columns. Titles of\nappointment will appear as a list in the day. In this display you will\nbe able to change months. Double clicking on a given day in a month will\nbring up the Daily View.\n\n\nWeekly View\n\n\nThis will display a full week. It should consist of 7 daily views.\nDouble clicking on a given day in a week will bring up the Daily View.\n\n\nDaily View\n\n\nThe daily view consists of a grid 2 x 48. The first column is the time\nand the second column will hold the appointment. There are 48 rows to\nrepresent every half hour in a day. Double clicking on anywhere in this\nview will bring up the Appointment Dialog. If the double click is on an\nexisting appointment then this is what will appear in the dialog.\nOtherwise a dialog without an appointment will appear.\n\n\nAppointment Dialog\n\n\nThis is a popup dialog that supports adding, editing or deleting an\nappointment. It will contain fields from the appointment data structure.\nThere needs to be a button to save an appointment and a button to delete\nan appointment. If the dialog contains an existing appointment, then\nsave will update the record otherwise a new record will be created.\n\n\nSearch Dialog\n\n\nThis is a popup dialog that supports searching for appointments by their\ntitle or description. The results of this search will be a list of\nmatching appointments. Double clicking on an appointment on this list\nwill display the Appointment Dialog with the selected appointment.\n\n\nReminder Module\n\n\nThis module will use timer events to generate alarms and reminders.\nWhenever the program is executed it will retrieve all future events and\nstart timer processes. When a timer process comes due the module will\ngenerate a visual and audible alarm.\n\n\nTimers\n\n\nWhen the program is loaded, this module will retrieve all the current\nday\u2019s appointments and create a timer event or thread for it. The\nthread, when its time is reached, will generate an audible and visual\nreminder as well as sending an email. Appointment records contain the\ninterval between an appointment and when a reminder must be issued.\n\n\nA special event is created to go off at midnight. If the program remains\nrunning continuously then at midnight it will retrieve the next day\u2019s\nappointments.\n\n\nHelp Module\n\n\nThis module will present the user with a list of the different tasks\nthat the program performs. Selecting a task will lead to a description\nof what this task is and how it is used. These descriptions will be\nformatted using HTML and stored in individual files in the project.\n\n\nMaster GUI Module\n\n\nThis module will act as the application manager. It will present all the\nvarious views of the program and receive user commands. The commands may\ncome either from a menu or a toolbar. The menus and toolbars will be\ndynamic. This means that the choices presented to the user may change\ndepending on the current view.\n\n\nMenu\n\n\nThe program main menu must contain the following:\n\n\nFile\n\n\n\n\nConfiguration\n\n\nNew Appointment\n\n\nExit\n\n\n\n\nView\n\n\n\n\nMonthly\n\n\nWeekly\n\n\nDaily\n\n\n\n\nHelp\n\n\n\n\nHelp Contents\n\n\nAbout\n\n\n\n\nAdditional menu items may be added as needed.\n\n\nToolbar\n\n\nThe toolbar must consist of the following items.\n\n\n\n\n\n\n### Configuration\n\n\n\n\n\n\n### New Appointment\n\n\n\n\n\n\n### Monthly\n\n\n\n\n\n\n### Weekly\n\n\n\n\n\n\n### Daily\n\n\n\n\n\n\n### Help Contents\n\n\n\n\n\n\nImages must be used in the toolbar.\n\n\n\n\n\n\nData Structures\n    ===============\n\n\n\n\nDBMS Settings\n    -------------\n\n\n\n\n\n\n\n\nStored in a properties file\n\n\n\n\n\n\nThe URL of the MySQL database\n\n\n\n\n\n\nThe database name\n\n\n\n\n\n\nThe port of the MySQL database (default 3306)\n\n\n\n\n\n\nThe user name for the MySQL database\n\n\n\n\n\n\nThe password for the MySQL database\n\n\n\n\nSMTP Settings\n    -------------\n\n\n\n\n\n\n\n\nStored in the DBMS\n\n\n\n\n\n\nThe user\u2019s name\n\n\n\n\n\n\nThe user\u2019s email address which is also the log in name for Gmail\n\n\n\n\n\n\nThe user\u2019s Gmail password\n\n\n\n\n\n\nThe URL of the SMTP server\n\n\n\n\n\n\nThe SMTP port number (default 465)\n\n\n\n\nAppointment Group Record\n    ------------------------\n\n\n\n\n\n\n\n\nStored in the DBMS\n\n\n\n\n\n\nGroup Number \u2013 int\n\n\n\n\n\n\nGroup Name \u2013 String\n\n\n\n\n\n\nColour - RGB color specified with an HTML or CSS attribute String\n\n\n\n\nAppointment Record\n    ------------------\n\n\n\n\n\n\n\n\nStored in the DBMS\n\n\n\n\n\n\nTitle - String\n\n\n\n\n\n\nLocation - String\n\n\n\n\n\n\nStart Time - Temporal\n\n\n\n\n\n\nEnd Time - Temporal\n\n\n\n\n\n\nDetails - String\n\n\n\n\n\n\nWhole Day \u2013 boolean\n\n\n\n\n\n\nAppointment Group \u2013 int\n\n\n\n\n\n\nReminder Interval - int\n\n\n\n\n\n\nAlarm Reminder Requested \u2013 Boolean\n\n\n\n\nHelp Records\n    ------------\n\n\n\n\n\n\n\n\nHelp information is text formatted with HTML. Each topic in the help\nlist is matched to a specific HTML file.", 
            "title": "Jam specifications"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#contents", 
            "text": "1 Introduction 1  1.1 System Overview 1  1.2 Design Map 1  1.3 Definitions and Acronyms 1  1.4 Gmail Requirements 1  2 Considerations 2  2.1 Assumptions 2  2.2 Constraints 2  2.3 System Environment 2  2.4 Repository and Naming 2  2.4.1 GitLab Account Name 2  2.4.2 Java Project Name 3  2.4.3 GitLab Repository Name 3  3 High Level Design 4  3.1 Configuration Module 4  3.2 Database Module 4  3.3 Appointment Module 4  3.4 Reminder Module 4  3.5 Help Module 4  3.6 Master GUI Module 4  4 Low Level Design 5  4.1 Configuration Module 5  4.1.1 Database 5  4.1.2 Email 5  4.1.3 Appointment Group 5  4.2 Database Module 5  4.2.1 Email 5  4.2.2 Appointment Group 6  4.2.3 Appointments 6  4.3 Appointment Module 6  4.3.1 Monthly View 6  4.3.2 Weekly View 6  4.3.3 Daily View 6  4.3.4 Appointment Dialog 6  4.3.5 Search Dialog 6  4.4 Reminder Module 7  4.4.1 Timers 7  4.5 Help Module 7  4.6 Master GUI Module 7  4.6.1 Menu 7  File 7  View 7  Help 7  4.6.2 Toolbar 8  5 Data Structures 9  5.1 DBMS Settings 9  5.2 SMTP Settings 9  5.3 Appointment Group Record 9  5.4 Appointment Record 10  5.5 Help Records 10", 
            "title": "Contents"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#introduction", 
            "text": "The purpose of this project is to develop your individual skills as a\nJava application developer. The application described in this document\nis designed to have you apply what you have already learned in the\nComputer Science Technology Program and what you are continuing to learn\nthis semester. This is an individual student project in which you will\nwork alone.", 
            "title": "Introduction"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#system-overview", 
            "text": "The program that is\ndescribed in this document is called the Java Agenda Manager or JAM for\nshort. Its use case is to provide an interactive application in which\nappointments can be stored and reviewed along with reminders of upcoming\nevents. It will be written in the Java language and it is meant to be\nportable across all platforms that support Java", 
            "title": "System Overview"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#design-map", 
            "text": "Within this document you will find the features, specifications, and\ndesign of the JAM. The final product that you develop is required\nrespect this document. While you may add additional features, you are\nexpected to deliver the feature set described here. The following\nsections of this document will describe the features, organization and\nGUI design of the system.", 
            "title": "Design Map"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#definitions-and-acronyms", 
            "text": "Appointment   An event that the user of the program wishes to record and then be\nreminded of prior to its scheduled time.   Monthly Calendar   The presentation of all the days in each month with an ordered list of\nany appointments presented for the specific day.   Weekly Calendar   The presentation of the days in each week that shows the time\nintervals for the day and displays appointments at their specific day\nand time.   Daily Calendar   The presentation of a single day that shows the time intervals for the\nday and displays appointments at their specific time.   Reminder   A visual and audible alarm generated by the program to remind the user\nof an upcoming appointment. In addition, an email is sent to the user\nas a further reminder.   Appointment Group   Appointments can be grouped. A group displays a background color in\nthe display.", 
            "title": "Definitions and Acronyms"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#gmail-requirements", 
            "text": "You will need to create one Gmail account. This is the account thru\nwhich you will be sending reminders.    Considerations\n    ==============   Assumptions\n    ---------------------------------------------------------------------------------------------------------     The program will be written using the standard features of the Java\nlanguage. Only third party open source libraries approved by your\ninstructor may be used. JUnit testing must be employed for all JDBC code\nyou write.", 
            "title": "Gmail Requirements"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#constraints", 
            "text": "The primary constraint is\nthat the system must be completed by the end of week eight. You must\nlook for simplicity rather than complexity. Features not explicitly in\nthis document and not mentioned in class should be avoided unless they\nare recognized as critical to the operation of the program. Such changes\nmust be submitted to your instructor for approval.", 
            "title": "Constraints"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#system-environment", 
            "text": "The programming language will be Java\nversion 1.8 and the GUI will be JavaFX. You may use NetBeans or Eclipse\nfor your IDE. NetBeans is preferred.  The JAM will depend on an external DBMS for its appointment and contact\nstore. The DBMS will be MySQL.  The JAM is not dependent on any specific operating system. It should be\nable to run on any computer that supports Java. To be able to use the\nWaldo2 database server the computer must be connected to the Internet.", 
            "title": "System Environment"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#repository-and-naming", 
            "text": "Projects must be stored in a Git repository. You are required to use a\nprivate repository on GitLab (gitlab.com). GitLab provides any developer\nwith a private repository. When you create your repository you must\ngrant the GitLab user \u201comniprof\u201d developer status. You may not use any\nother repository in this course. The naming rules are mandatory.", 
            "title": "Repository and Naming"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#gitlab-account-name", 
            "text": "Your GitLab account must be named  JAM_Student Name . Use your name\nas it appears on college records. For example, if your name is Betty\nSmith then you must create an account named:  JAM_BettySmith  You may leave out any middle names.", 
            "title": "GitLab Account Name"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#java-project-name", 
            "text": "When you create your project in the IDE it must be named  JAM_Student\nID_Version . For example:  JAM_9999999_1  If you must create a new project, for whatever reason, then use the same\nname with a different version number:  JAM_9999999_2", 
            "title": "Java Project Name"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#gitlab-repository-name", 
            "text": "The repository that you create for your projects must have the same name\nas your Java project in the IDE. This means that when I need to retrieve\nyour code from GitLab the URL will look like:  https://gitlab.com/JAM _BettySmith/JAM_9999999_1", 
            "title": "GitLab Repository Name"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#high-level-design", 
            "text": "===============================================================================================================  The overall design of the program will consist of modules that manage\nthe different features and functions of the program.", 
            "title": "High Level Design"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#configuration-module", 
            "text": "This module is responsible for recording and storing information that\naffects the operation of the program. There will be GUI components in\nthis module.", 
            "title": "Configuration Module"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#database-module", 
            "text": "This module is responsible for interacting with the DBMS on behalf of\nall other modules. It will provide specific services to meet the needs\nof other modules. There will not be any GUI components in this module.  Unit testing of this module is required.", 
            "title": "Database Module"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#appointment-module", 
            "text": "This module is responsible for the user interface for managing and\ndisplaying appointments. There will be GUI components in this module.", 
            "title": "Appointment Module"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#reminder-module", 
            "text": "This module is responsible for generating alarms prior to an\nappointment. There will not be any GUI components in this module.", 
            "title": "Reminder Module"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#help-module", 
            "text": "This module is responsible for displaying help screens. There will be\nGUI components in this module.", 
            "title": "Help Module"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#master-gui-module", 
            "text": "This module is responsible for the main application window, menus, and\ntoolbars. There will be GUI components in this module.    Low Level Design\n    ================   Configuration Module\n    --------------------     This module will handle the data that configures the program. There are\nthree categories of configuration data. These are database, email and\nappointment group. Each category will require a GUI interface for input\nand editing.  When the program is run for the very first time this module executes\nautomatically. This module can be accessed by the user at any time to\nmake changes to the configuration.", 
            "title": "Master GUI Module"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#database", 
            "text": "The program must have a MySQL database account ready to use. You can\ncreate a local account on your computer or use an account on a\ndepartment server. This information will be stored in a properties file\nusing the Properties API in Java. Properties files are plain text files.\nSee section 5.1 for the data that must be stored. You will need a popup\ndialog to enter or edit this data.", 
            "title": "Database"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#email", 
            "text": "The program, when running, will send an email to the program\u2019s user at a\npreset interval before an appointment. You will require an email account\non Gmail for this purpose. The necessary information will be stored in a\ntable in the database. You will need a popup dialog to enter or edit\nthis data.", 
            "title": "Email"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#appointment-group", 
            "text": "An appointment group supports the concept of grouping appointments such\nas work appointments and personal appointments. The group determines the\nbackground colour of an appointment in the display. You must have five\ndefault groups with colors already assigned to them. You will need a\npopup dialog to enter or edit this data.", 
            "title": "Appointment Group"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#database-module_1", 
            "text": "This module will manage the records for all modules. There should be a\nclass for each data table. It will create the required tables for the\ndatabase the first time the program is run. Then it will add or retrieve\nrecords based on requests from the other modules. Each of these modules\nmust have unit tests that demonstrate that the code functions as\nrequired.", 
            "title": "Database Module"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#email_1", 
            "text": "This module will be responsible for retrieving, inserting, updating or\ndeleting records for the Email configuration.", 
            "title": "Email"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#appointment-group_1", 
            "text": "This module will be responsible for retrieving, inserting, updating or\ndeleting records for the Appointment Group configuration.", 
            "title": "Appointment Group"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#appointments", 
            "text": "This module will be responsible for retrieving, inserting, updating or\ndeleting appointment records. There will need to be several retrieval\nroutines to match the various views. In addition, several search\nroutines will be required based on various criteria.", 
            "title": "Appointments"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#appointment-module_1", 
            "text": "This module will be responsible for the user interface for inputting\nappointments and displaying appointments. It will consist of the\nfollowing:", 
            "title": "Appointment Module"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#monthly-view", 
            "text": "This will display a full month in a grid 6 rows by 7 columns. Titles of\nappointment will appear as a list in the day. In this display you will\nbe able to change months. Double clicking on a given day in a month will\nbring up the Daily View.", 
            "title": "Monthly View"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#weekly-view", 
            "text": "This will display a full week. It should consist of 7 daily views.\nDouble clicking on a given day in a week will bring up the Daily View.", 
            "title": "Weekly View"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#daily-view", 
            "text": "The daily view consists of a grid 2 x 48. The first column is the time\nand the second column will hold the appointment. There are 48 rows to\nrepresent every half hour in a day. Double clicking on anywhere in this\nview will bring up the Appointment Dialog. If the double click is on an\nexisting appointment then this is what will appear in the dialog.\nOtherwise a dialog without an appointment will appear.", 
            "title": "Daily View"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#appointment-dialog", 
            "text": "This is a popup dialog that supports adding, editing or deleting an\nappointment. It will contain fields from the appointment data structure.\nThere needs to be a button to save an appointment and a button to delete\nan appointment. If the dialog contains an existing appointment, then\nsave will update the record otherwise a new record will be created.", 
            "title": "Appointment Dialog"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#search-dialog", 
            "text": "This is a popup dialog that supports searching for appointments by their\ntitle or description. The results of this search will be a list of\nmatching appointments. Double clicking on an appointment on this list\nwill display the Appointment Dialog with the selected appointment.", 
            "title": "Search Dialog"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#reminder-module_1", 
            "text": "This module will use timer events to generate alarms and reminders.\nWhenever the program is executed it will retrieve all future events and\nstart timer processes. When a timer process comes due the module will\ngenerate a visual and audible alarm.", 
            "title": "Reminder Module"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#timers", 
            "text": "When the program is loaded, this module will retrieve all the current\nday\u2019s appointments and create a timer event or thread for it. The\nthread, when its time is reached, will generate an audible and visual\nreminder as well as sending an email. Appointment records contain the\ninterval between an appointment and when a reminder must be issued.  A special event is created to go off at midnight. If the program remains\nrunning continuously then at midnight it will retrieve the next day\u2019s\nappointments.", 
            "title": "Timers"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#help-module_1", 
            "text": "This module will present the user with a list of the different tasks\nthat the program performs. Selecting a task will lead to a description\nof what this task is and how it is used. These descriptions will be\nformatted using HTML and stored in individual files in the project.", 
            "title": "Help Module"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#master-gui-module_1", 
            "text": "This module will act as the application manager. It will present all the\nvarious views of the program and receive user commands. The commands may\ncome either from a menu or a toolbar. The menus and toolbars will be\ndynamic. This means that the choices presented to the user may change\ndepending on the current view.", 
            "title": "Master GUI Module"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#menu", 
            "text": "The program main menu must contain the following:", 
            "title": "Menu"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#file", 
            "text": "Configuration  New Appointment  Exit", 
            "title": "File"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#view", 
            "text": "Monthly  Weekly  Daily", 
            "title": "View"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#help", 
            "text": "Help Contents  About   Additional menu items may be added as needed.", 
            "title": "Help"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#toolbar", 
            "text": "The toolbar must consist of the following items.", 
            "title": "Toolbar"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#configuration", 
            "text": "", 
            "title": "### Configuration"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#new-appointment", 
            "text": "", 
            "title": "### New Appointment"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#monthly", 
            "text": "", 
            "title": "### Monthly"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#weekly", 
            "text": "", 
            "title": "### Weekly"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#daily", 
            "text": "", 
            "title": "### Daily"
        }, 
        {
            "location": "/Software Dev Project/jam-specifications/#help-contents", 
            "text": "Images must be used in the toolbar.    Data Structures\n    ===============   DBMS Settings\n    -------------     Stored in a properties file    The URL of the MySQL database    The database name    The port of the MySQL database (default 3306)    The user name for the MySQL database    The password for the MySQL database   SMTP Settings\n    -------------     Stored in the DBMS    The user\u2019s name    The user\u2019s email address which is also the log in name for Gmail    The user\u2019s Gmail password    The URL of the SMTP server    The SMTP port number (default 465)   Appointment Group Record\n    ------------------------     Stored in the DBMS    Group Number \u2013 int    Group Name \u2013 String    Colour - RGB color specified with an HTML or CSS attribute String   Appointment Record\n    ------------------     Stored in the DBMS    Title - String    Location - String    Start Time - Temporal    End Time - Temporal    Details - String    Whole Day \u2013 boolean    Appointment Group \u2013 int    Reminder Interval - int    Alarm Reminder Requested \u2013 Boolean   Help Records\n    ------------     Help information is text formatted with HTML. Each topic in the help\nlist is matched to a specific HTML file.", 
            "title": "### Help Contents"
        }, 
        {
            "location": "/Software Dev Project/maven/", 
            "text": "Maven \nWeek 1 [August 25]\n\n\n\u2754Wat ist dis\n\n\nA software project management and comprehension tool.\nMaven is a standalone java application.\n\n\nMaven Build System\n\n\n\n\nEnsures that the right library jars are in the build path of a project\n\n\nManages compiling/building\n\n\nExecutes unit tests\n\n\nProjects can be used in different IDEs \n\n\n\n\nStandard Project Directory Layout\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n-src\n  -main\n    -java\n    -resources\n    -webapp\n  -test\n    -java\n    -resources\n-target\n\n\n\n\n\n\n\n\nsrc\n\n\ncontains all of the source material for building the project\n\n\n\n\n\n\nsrc/main/java\n\n\nJava source files (packages are here)\n\n\n\n\n\n\nsrc/main/resources\n\n\nNon code resources such as CSS, images, etc.\n\n\n\n\n\n\nsrc/test/java\n\n\nJava source code for tests\n\n\n\n\n\n\nsrc/test/resources\n\n\nNon code resources used only for tests\n\n\n\n\n\n\nsrc/main/webapp\n\n\nRoot folder of a web application, home to HTML, JSF, etc. \n\n\nWill be used next semester\n\n\n\n\n\n\ntarget\n\n\nused to house all output of the build\n\n\n\n\n\n\n\n\nFor more information on the standard directory structure see \nhttps://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html\n\n\nMaven POM - Project Object Model\n\n\nMaven uses a file called \npom\n, create a local repository and puts it in. It's in your build path so now when you go to compile your code all the libraries are visible. And when you build/package it, it goes into your \n.jar\n. It then officially becomes a fat \n.jar\n.\n\n\n\n\nDescribes a project\n\n\nName and Version\n\n\nModule Type (\n.jar\n,\n.war\n, etc.)\n\n\nSource Code Locations (optional)\n\n\nDependencies\n\n\nPlugins\n\n\nProfiles (Alternate build configurations)\n\n\nWritten as an XML file\n\n\n\n\nBuild Cycle\n\n\nOnly \nthree build lifecycles\n\n\n\n\nclean\n \u2013project cleaning\n\n\ndefault\n \u2013building and deploying project\n\n\nsite\n \u2013 generation of project documentation\n\n\n\n\nLifecycles are broken down into build phases\nPhases are made up of goals\n\n\nBuild Phases for Default Lifecycle\n\n\n\n\nvalidate\n: check \npom.xml\n\n\ncompile\n: compile the source\n\n\ntest\n: run unit tests\n\n\npackage\n: create \njar/war/...\n\n\nverify\n: verify the package\n\n\ninstall\n: publish package to local repo\n\n\ndeploy\n: publish package to remote repo\n\n\n\n\nExtras\n\n\nPlugins\n\n\n\n\nArtifacts/modules that extend what Maven does\n\n\nLarge library of plugins\n\n\nCan write your own\n\n\nBound to different lifecycle phases\n\n\n\n\nRepositories\n\n\n\n\nHolds build modules of various types\n\n\nLocal or remote\n\n\nIf a module is not found locally then remote is accessed\n\n\n\n\nMaven Repos\n\n\n\n\nDependencies downloaded from repositories via http\n\n\nUsually found in \n${user.home}/.m2/repository\n\n\n\n\nMaven Central is primary community repo\n\nhttp://repo1.maven.org/maven2\n\n\nThe Central Repository can be searched at:\n\nhttp://search.maven.org/#browse\n\n\nSnapshot Builds\n\n\n\n\nVersion of a project not yet been released\n\n\nVersion number ends with \n-SNAPSHOT\n\n\nDefine a project Snapshot until ready for  production\n\n\nIn prod, remove this\n\n\n\n\nMaven Coordinates\n\n\n\n\nAll projects are uniquely identified by a set of Maven Coordinates\n\n\nGroup ID\n\n\nArtifact ID\n\n\nVersion\n\n\n\n\n\n\ngroup-id:artifact-id:version\n\n\njunit:junit:4.11\n\n\norg.kuali.rice:core-api:2.2.1\n\n\ncom.kfcstandard:fxfishtable:1.12\n\n\n\n\n\n\n\n\nExample: If your domain is \nkitties.com\n, your package would be \ncom.kitties.~\n\n\nFor this classe's purposes, we will be using something along the lines of \ncom.firsnamelastname.~\n\n\nBibliography\n\n\n\n\nMaven Homepage: \nhttp://maven.apache.org\n\n\nReference Documentation for Maven\n\n\nReference Documentation for core Plugins\n\n\n\n\n\n\nDescription of the pom.xml that must be used in this course\n\n\nhttps://www.omnijava.com/2017/08/23/the-kfcstandard-pom-xml-file-update/\n\n\n\n\n\n\n\n\nExample POM\n\n\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nproject\n \nxmlns=\nhttp://maven.apache.org/POM/4.0.0\n \nxmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n         \nxsi:schemaLocation=\nhttp://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\n\n\n    \n!-- Maven version of the xml document currently only 4.0.0 is valid --\n\n    \nmodelVersion\n4.0.0\n/modelVersion\n\n\n    \n!-- The GAV consists of an arbitrary descriptor that is usually in the\n\n\n    form of a reverse domain name. --\n\n    \ngroupId\ncom.kfdesktopstandard\n/groupId\n\n\n    \n!-- This is the name given to the packaged build --\n\n    \nartifactId\nkf_desktop_standard_project\n/artifactId\n\n\n    \n!-- The version of the build. Any value is valid though a number and a\n\n\n    string are common. SNAPSHOT means a project under development. FINAL or no\n\n\n    text is commonly used to refer to stable production version --\n\n    \nversion\n1.1-SNAPSHOT\n/version\n\n\n    \n!-- Default value is jar but may be war or ear --\n\n    \npackaging\njar\n/packaging\n\n\n    \n!-- The name given to the project. Unlike groupId and artifactId a name\n\n\n    may have spaces. By default it is the following so it is optional --\n\n    \nname\n${project.artifactId}\n/name\n\n\n    \n!-- A description of the program --\n\n    \ndescription\nStandard starting point for JavaFX programs for students of Ken Fogel\n        that displays a table of data using JavaFX and JDBC\n/description\n\n\n    \n!-- Identifies the programmer or programmers who worked on the project --\n\n    \ndevelopers\n\n        \ndeveloper\n\n            \nid\nEnter your school id\n/id\n\n            \nname\nEnter your name\n/name\n\n            \nemail\nEnter your email address\n/email\n\n        \n/developer\n\n    \n/developers\n\n\n    \n!-- The company or organization that the programmer(s) work for --\n\n    \norganization\n\n        \nname\nEnter school name\n/name\n\n    \n/organization\n\n\n    \n!-- Global settings for the project. Settings can be accessed in the pom\n\n\n    by placing the tag name in ${...} ex. ${mainClass} --\n\n    \nproperties\n\n        \nproject.build.sourceEncoding\nUTF-8\n/project.build.sourceEncoding\n\n        \nmaven.compiler.source\n1.8\n/maven.compiler.source\n\n        \nmaven.compiler.target\n1.8\n/maven.compiler.target\n\n\n        \n!-- class that has the main method --\n\n        \nmainClass\n${project.groupId}.MainApp\n/mainClass\n\n    \n/properties\n\n\n    \ndependencies\n\n\n        \n!-- The dependency for the SLF4J Facade --\n\n        \ndependency\n\n            \ngroupId\norg.slf4j\n/groupId\n\n            \nartifactId\nslf4j-api\n/artifactId\n\n            \nversion\n1.7.25\n/version\n\n        \n/dependency\n\n        \n!-- Binding for Log4J --\n\n        \ndependency\n\n            \ngroupId\norg.apache.logging.log4j\n/groupId\n\n            \nartifactId\nlog4j-slf4j-impl\n/artifactId\n\n            \nversion\n2.8.2\n/version\n\n        \n/dependency\n\n        \n!-- Logging Framework Dependency Uses the log4j2 library --\n\n        \ndependency\n\n            \ngroupId\norg.apache.logging.log4j\n/groupId\n\n            \nartifactId\nlog4j-api\n/artifactId\n\n            \nversion\n2.8.2\n/version\n\n        \n/dependency\n\n        \ndependency\n\n            \ngroupId\norg.apache.logging.log4j\n/groupId\n\n            \nartifactId\nlog4j-core\n/artifactId\n\n            \nversion\n2.8.2\n/version\n\n        \n/dependency\n\n\n        \n!-- JUnit 4 testing dependency --\n\n        \ndependency\n\n            \ngroupId\njunit\n/groupId\n\n            \nartifactId\njunit\n/artifactId\n\n            \nversion\n4.12\n/version\n\n            \n!-- only to be used during test, phase will not be included in executable jar --\n\n            \nscope\ntest\n/scope\n\n        \n/dependency\n\n\n        \n!-- MySQL dependency --\n\n        \ndependency\n\n            \ngroupId\nmysql\n/groupId\n\n            \nartifactId\nmysql-connector-java\n/artifactId\n\n            \nversion\n5.1.43\n/version\n\n        \n/dependency\n\n\n\n    \n/dependencies\n\n\n    \nbuild\n\n        \n!-- Goals may be set in the IDE or the pom IDE or CLI goals override the\n\n\n        defaultGoal --\n\n        \ndefaultGoal\nclean compile package exec:exec\n/defaultGoal\n\n\n        \n!-- Plugins define components that perform actions --\n\n        \nplugins\n\n            \n!-- Shade: Create an executable jar containing all the dependencies when\n\n\n            the package goal is carried out --\n\n            \nplugin\n\n                \ngroupId\norg.apache.maven.plugins\n/groupId\n\n                \nartifactId\nmaven-shade-plugin\n/artifactId\n\n                \nversion\n3.0.0\n/version\n\n                \nexecutions\n\n                    \nexecution\n\n                        \ngoals\n\n                            \ngoal\nshade\n/goal\n\n                        \n/goals\n\n                        \nconfiguration\n\n                            \ntransformers\n\n                                \ntransformer\n \nimplementation=\n\n                      \norg.apache.maven.plugins.shade.resource.ManifestResourceTransformer\n\n                                    \nmainClass\n${mainClass}\n/mainClass\n\n                                \n/transformer\n\n                            \n/transformers\n\n                        \n/configuration\n\n                    \n/execution\n\n                \n/executions\n\n            \n/plugin\n\n\n            \n!-- Exec: Executes the program --\n\n            \nplugin\n\n                \ngroupId\norg.codehaus.mojo\n/groupId\n\n                \nartifactId\nexec-maven-plugin\n/artifactId\n\n                \nversion\n1.6.0\n/version\n\n                \nexecutions\n\n                    \nexecution\n\n                        \nid\ndefault-cli\n/id\n\n                        \ngoals\n\n                            \n!-- Runs in separate instance of JVM --\n\n                            \ngoal\nexec\n/goal\n\n                            \n!-- Runs in same instance of the JVM as Maven --\n\n                            \ngoal\njava\n/goal\n\n                        \n/goals\n\n                        \nconfiguration\n\n                            \n!--used by java goal --\n\n                            \n!--executes in the same VM that Maven runs in --\n\n                            \nmainClass\n${mainClass}\n/mainClass\n\n\n                            \n!--used by exec goal --\n\n                            \n!--runs in a separate VM from the one that Maven runs in --\n\n                            \nexecutable\n${java.home}/bin/java\n/executable\n\n                            \ncommandlineArgs\n-jar ${project.build.directory}/${project.build.finalName}.jar\n/commandlineArgs\n\n                        \n/configuration\n\n\n                    \n/execution\n\n                \n/executions\n\n            \n/plugin\n\n\n            \n!-- Executes JUnit tests and writes the results as an xml and\n\n\n            txt file Test classes must include one of the following in their\n\n\n            name: Test* *Test *TestCase --\n\n            \nplugin\n\n                \ngroupId\norg.apache.maven.plugins\n/groupId\n\n                \nartifactId\nmaven-surefire-plugin\n/artifactId\n\n                \nversion\n2.20\n/version\n\n                \nconfiguration\n\n                    \nargLine\n-Dfile.encoding=${project.build.sourceEncoding}\n/argLine\n\n                    \nskipTests\nfalse\n/skipTests\n\n                \n/configuration\n\n            \n/plugin\n\n\n        \n/plugins\n\n    \n/build\n\n\n/project", 
            "title": "Maven"
        }, 
        {
            "location": "/Software Dev Project/maven/#maven-week-1-august-25", 
            "text": "", 
            "title": "Maven Week 1 [August 25]"
        }, 
        {
            "location": "/Software Dev Project/maven/#wat-ist-dis", 
            "text": "A software project management and comprehension tool.\nMaven is a standalone java application.", 
            "title": "\u2754Wat ist dis"
        }, 
        {
            "location": "/Software Dev Project/maven/#maven-build-system", 
            "text": "Ensures that the right library jars are in the build path of a project  Manages compiling/building  Executes unit tests  Projects can be used in different IDEs", 
            "title": "Maven Build System"
        }, 
        {
            "location": "/Software Dev Project/maven/#standard-project-directory-layout", 
            "text": "1\n2\n3\n4\n5\n6\n7\n8\n9 -src\n  -main\n    -java\n    -resources\n    -webapp\n  -test\n    -java\n    -resources\n-target    src  contains all of the source material for building the project    src/main/java  Java source files (packages are here)    src/main/resources  Non code resources such as CSS, images, etc.    src/test/java  Java source code for tests    src/test/resources  Non code resources used only for tests    src/main/webapp  Root folder of a web application, home to HTML, JSF, etc.   Will be used next semester    target  used to house all output of the build     For more information on the standard directory structure see  https://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html", 
            "title": "Standard Project Directory Layout"
        }, 
        {
            "location": "/Software Dev Project/maven/#maven-pom-project-object-model", 
            "text": "Maven uses a file called  pom , create a local repository and puts it in. It's in your build path so now when you go to compile your code all the libraries are visible. And when you build/package it, it goes into your  .jar . It then officially becomes a fat  .jar .   Describes a project  Name and Version  Module Type ( .jar , .war , etc.)  Source Code Locations (optional)  Dependencies  Plugins  Profiles (Alternate build configurations)  Written as an XML file", 
            "title": "Maven POM - Project Object Model"
        }, 
        {
            "location": "/Software Dev Project/maven/#build-cycle", 
            "text": "Only  three build lifecycles   clean  \u2013project cleaning  default  \u2013building and deploying project  site  \u2013 generation of project documentation   Lifecycles are broken down into build phases\nPhases are made up of goals", 
            "title": "Build Cycle"
        }, 
        {
            "location": "/Software Dev Project/maven/#build-phases-for-default-lifecycle", 
            "text": "validate : check  pom.xml  compile : compile the source  test : run unit tests  package : create  jar/war/...  verify : verify the package  install : publish package to local repo  deploy : publish package to remote repo", 
            "title": "Build Phases for Default Lifecycle"
        }, 
        {
            "location": "/Software Dev Project/maven/#extras", 
            "text": "", 
            "title": "Extras"
        }, 
        {
            "location": "/Software Dev Project/maven/#plugins", 
            "text": "Artifacts/modules that extend what Maven does  Large library of plugins  Can write your own  Bound to different lifecycle phases", 
            "title": "Plugins"
        }, 
        {
            "location": "/Software Dev Project/maven/#repositories", 
            "text": "Holds build modules of various types  Local or remote  If a module is not found locally then remote is accessed", 
            "title": "Repositories"
        }, 
        {
            "location": "/Software Dev Project/maven/#maven-repos", 
            "text": "Dependencies downloaded from repositories via http  Usually found in  ${user.home}/.m2/repository   Maven Central is primary community repo http://repo1.maven.org/maven2  The Central Repository can be searched at: http://search.maven.org/#browse", 
            "title": "Maven Repos"
        }, 
        {
            "location": "/Software Dev Project/maven/#snapshot-builds", 
            "text": "Version of a project not yet been released  Version number ends with  -SNAPSHOT  Define a project Snapshot until ready for  production  In prod, remove this", 
            "title": "Snapshot Builds"
        }, 
        {
            "location": "/Software Dev Project/maven/#maven-coordinates", 
            "text": "All projects are uniquely identified by a set of Maven Coordinates  Group ID  Artifact ID  Version    group-id:artifact-id:version  junit:junit:4.11  org.kuali.rice:core-api:2.2.1  com.kfcstandard:fxfishtable:1.12     Example: If your domain is  kitties.com , your package would be  com.kitties.~  For this classe's purposes, we will be using something along the lines of  com.firsnamelastname.~", 
            "title": "Maven Coordinates"
        }, 
        {
            "location": "/Software Dev Project/maven/#bibliography", 
            "text": "Maven Homepage:  http://maven.apache.org  Reference Documentation for Maven  Reference Documentation for core Plugins    Description of the pom.xml that must be used in this course  https://www.omnijava.com/2017/08/23/the-kfcstandard-pom-xml-file-update/", 
            "title": "Bibliography"
        }, 
        {
            "location": "/Software Dev Project/maven/#example-pom", 
            "text": "1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175 ?xml version= 1.0  encoding= UTF-8 ?  project   xmlns= http://maven.apache.org/POM/4.0.0   xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n          xsi:schemaLocation= http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd \n\n     !-- Maven version of the xml document currently only 4.0.0 is valid -- \n     modelVersion 4.0.0 /modelVersion \n\n     !-- The GAV consists of an arbitrary descriptor that is usually in the      form of a reverse domain name. -- \n     groupId com.kfdesktopstandard /groupId \n\n     !-- This is the name given to the packaged build -- \n     artifactId kf_desktop_standard_project /artifactId \n\n     !-- The version of the build. Any value is valid though a number and a      string are common. SNAPSHOT means a project under development. FINAL or no      text is commonly used to refer to stable production version -- \n     version 1.1-SNAPSHOT /version \n\n     !-- Default value is jar but may be war or ear -- \n     packaging jar /packaging \n\n     !-- The name given to the project. Unlike groupId and artifactId a name      may have spaces. By default it is the following so it is optional -- \n     name ${project.artifactId} /name \n\n     !-- A description of the program -- \n     description Standard starting point for JavaFX programs for students of Ken Fogel\n        that displays a table of data using JavaFX and JDBC /description \n\n     !-- Identifies the programmer or programmers who worked on the project -- \n     developers \n         developer \n             id Enter your school id /id \n             name Enter your name /name \n             email Enter your email address /email \n         /developer \n     /developers \n\n     !-- The company or organization that the programmer(s) work for -- \n     organization \n         name Enter school name /name \n     /organization \n\n     !-- Global settings for the project. Settings can be accessed in the pom      by placing the tag name in ${...} ex. ${mainClass} -- \n     properties \n         project.build.sourceEncoding UTF-8 /project.build.sourceEncoding \n         maven.compiler.source 1.8 /maven.compiler.source \n         maven.compiler.target 1.8 /maven.compiler.target \n\n         !-- class that has the main method -- \n         mainClass ${project.groupId}.MainApp /mainClass \n     /properties \n\n     dependencies \n\n         !-- The dependency for the SLF4J Facade -- \n         dependency \n             groupId org.slf4j /groupId \n             artifactId slf4j-api /artifactId \n             version 1.7.25 /version \n         /dependency \n         !-- Binding for Log4J -- \n         dependency \n             groupId org.apache.logging.log4j /groupId \n             artifactId log4j-slf4j-impl /artifactId \n             version 2.8.2 /version \n         /dependency \n         !-- Logging Framework Dependency Uses the log4j2 library -- \n         dependency \n             groupId org.apache.logging.log4j /groupId \n             artifactId log4j-api /artifactId \n             version 2.8.2 /version \n         /dependency \n         dependency \n             groupId org.apache.logging.log4j /groupId \n             artifactId log4j-core /artifactId \n             version 2.8.2 /version \n         /dependency \n\n         !-- JUnit 4 testing dependency -- \n         dependency \n             groupId junit /groupId \n             artifactId junit /artifactId \n             version 4.12 /version \n             !-- only to be used during test, phase will not be included in executable jar -- \n             scope test /scope \n         /dependency \n\n         !-- MySQL dependency -- \n         dependency \n             groupId mysql /groupId \n             artifactId mysql-connector-java /artifactId \n             version 5.1.43 /version \n         /dependency \n\n\n     /dependencies \n\n     build \n         !-- Goals may be set in the IDE or the pom IDE or CLI goals override the          defaultGoal -- \n         defaultGoal clean compile package exec:exec /defaultGoal \n\n         !-- Plugins define components that perform actions -- \n         plugins \n             !-- Shade: Create an executable jar containing all the dependencies when              the package goal is carried out -- \n             plugin \n                 groupId org.apache.maven.plugins /groupId \n                 artifactId maven-shade-plugin /artifactId \n                 version 3.0.0 /version \n                 executions \n                     execution \n                         goals \n                             goal shade /goal \n                         /goals \n                         configuration \n                             transformers \n                                 transformer   implementation= \n                       org.apache.maven.plugins.shade.resource.ManifestResourceTransformer \n                                     mainClass ${mainClass} /mainClass \n                                 /transformer \n                             /transformers \n                         /configuration \n                     /execution \n                 /executions \n             /plugin \n\n             !-- Exec: Executes the program -- \n             plugin \n                 groupId org.codehaus.mojo /groupId \n                 artifactId exec-maven-plugin /artifactId \n                 version 1.6.0 /version \n                 executions \n                     execution \n                         id default-cli /id \n                         goals \n                             !-- Runs in separate instance of JVM -- \n                             goal exec /goal \n                             !-- Runs in same instance of the JVM as Maven -- \n                             goal java /goal \n                         /goals \n                         configuration \n                             !--used by java goal -- \n                             !--executes in the same VM that Maven runs in -- \n                             mainClass ${mainClass} /mainClass \n\n                             !--used by exec goal -- \n                             !--runs in a separate VM from the one that Maven runs in -- \n                             executable ${java.home}/bin/java /executable \n                             commandlineArgs -jar ${project.build.directory}/${project.build.finalName}.jar /commandlineArgs \n                         /configuration \n\n                     /execution \n                 /executions \n             /plugin \n\n             !-- Executes JUnit tests and writes the results as an xml and              txt file Test classes must include one of the following in their              name: Test* *Test *TestCase -- \n             plugin \n                 groupId org.apache.maven.plugins /groupId \n                 artifactId maven-surefire-plugin /artifactId \n                 version 2.20 /version \n                 configuration \n                     argLine -Dfile.encoding=${project.build.sourceEncoding} /argLine \n                     skipTests false /skipTests \n                 /configuration \n             /plugin \n\n         /plugins \n     /build  /project", 
            "title": "Example POM"
        }, 
        {
            "location": "/Software Dev Project/outline/", 
            "text": "Warning\n\n\n\ud83d\udea7 Under Construction\n\n\n\n\nCOURSE OUTLINE \nJava III\n\n\nNumber: 420-517-DW\n\n\n\n\nPonderation: 3-3-3\n\n\nCredits:  3\n\n\n\n\nPrerequisites:\n\n\nSuccessful completion of all Year 2 420.A0 courses\n\n\nCo-requisites:\n\n\n\n\n\n\n420-518-DW Mobile Software Development:  Android\n\n\n\n\n\n\n420-524-DW Internet Application Development III:  PHP\n\n\n\n\n\n\n420-544-DW Data Communications and Networking\n\n\n\n\n\n\nDomain:\n\n\nProgramming, Data Structures and Algorithms\n\n\n\n\nNote\n\n\nYou must pass this course as well as the three co-requisite courses in order to progress to the sixth semester of the Computer Science Technology Program.\n\n\n\n\nDescription\n\n\nIn this course you will learn to design, code and test a desktop application. The application will employ a JavaFX graphical user interface. The data for the application will be stored in and retrieved from a relational database using the Java Database Connectivity library. All components of the application will be tested using the JUnit framework. You will learn the purpose of, the application of and how to code common data structures. You will also review the data structures provided in the Java Collections Framework. These data structures will be applied to the development of code that implements algorithms. You will learn to use a build system to manage your code a repository to store your code.\n\n\nSTATEMENTS OF COMPETENCE\n\n\n\n\nUse an object oriented development approach (016T)\n\n\nProduce algorithms (016W)\n\n\nDevelop user interfaces. (016X)\n\n\nOrganize and use data (0170)\n\n\nCorrect programs (0171)\n\n\nMake functional improvements to an application (0176)\n\n\nAssure the quality of an application (0177)\n\n\nDesign and develop applications in a graphics environment (017C)\n\n\n\n\nContacting Teachers\n\n\nKen Fogel 3F.18                       479901,02\n\n\nTeacher\ns schedule will be posted outside the office by the end of the first week of classes.\n\n\nCourse Objectives:\n\n\nUpon completion of this course the student will be able to:\n\n\n1) Develop Java applications that use JavaFX framework (016X)\n\n\n2) Connect a Java application to a database by utilizing Java Data Base Connectivity (JDBC) libraries (0170)\n\n\n3) Explain the concepts for and apply practically in an application data structures such as stacks, lists, queues, linked lists and binary trees (016W)\n\n\n4) Code stacks, lists, queues and linked lists (016W)\n\n\n4) Use the Java Collections Framework to employ data structures in an application (0170)\n\n\n5) Issue SQL commands to a database and display the result set in an appropriate GUI component such as an Update Table (0170)\n\n\n6) Manage application development using a build system\n\n\n7) Test and validate your code using the unit testing framework (0171, 0177)\n\n\n8) Write a desktop application from a given specification (016T, 017C, 0177, 016W)\n\n\nCourse Methodology\n\n\nThe course consists of two 1\u00bd-hour lectures and one 3-hour lab session per week.  Concepts and techniques will be presented in lectures and practical exercises that apply to the concepts and techniques will be carried out in lab sessions.\n\n\nReadings\n\n\nMore readings will be announced in class\n\n\nJavaFX\n\n\nhttp://docs.oracle.com/javase/8/javase-clienttechnologies.htm\n\n\nCollections\n\n\nhttp://docs.oracle.com/javase/tutorial/collections/index.html\n\n\nGenerics\n\n\nhttp://docs.oracle.com/javase/tutorial/extra/generics/index.html\n\n\nJDBC Database Access\n\n\nhttp://docs.oracle.com/javase/tutorial/jdbc/basics/index.html\n\n\nInternationalization\n\n\nhttp://docs.oracle.com/javase/tutorial/i18n/index.html\n\n\nJODD Email\n\n\nhttp://jodd.org/doc/email.html\n\n\nJUnit 4\n\n\n1\n    http://www.vogella.com/tutorials/JUnit/article.html\n\n\n\n\n\n\nGit\n\n\n1\n    Pro Git Book [http://git-scm.com/book Chapters 1-3](http://git-scm.com/book%20Chapters%201-3)\n\n\n\n\n\n\nRequired\n\n\n\n\nOne 32 Gig USB 3.0 (not 2.0) flash drive.\n\n\nAn account on GitLab.com (not Github or any other service).\n\n\nFour Gmail accounts for testing of the email application.\n\n\n\n\nAssessment of student performance\n\n\n\n\n\n\nMidterm Examination\n\n\n\n\nDuration: 1 \n hours       \n\n\n20%  (Week 7)\n\n\n\n\n\n\n\n\nFinal Examination\n\n\n\n\nDuration: 3 hours        \n\n\n35% (Exam period)\n\n\n\n\n\n\n\n\nQuizzes\n\n\n\n\nWeeks 2, 5, 8, \n 12\n\n\n10%\n\n\n\n\n\n\n\n\nAssignments\n\n\n\n\n10%\n\n\nProject 25%\n\n\n\n\n\n\n\n\nCourse Topics \n Labs\n\n\n\n\n\n\n\n\nLectures\n\n\nTopic\n\n\nLab Work\n\n\n\n\n\n\n\n\n\n\n1\n\n\nPresentation of the course project\n\n\nThe Daily Planner Project\n\n\n\n\n\n\n2\n\n\nSoftware Versioning and Code Revision Systems\n\n\nSoftware Build System\n\n\n\n\n\n\n\n\nDiscuss how programmers manage code for themselves and as part of a team.\n\n\n\n\n\n\n\n\n\n\nLearn to use the open source Git system.\n\n\nConnect to a Git repository, download code and upload code.\n\n\n\n\n\n\n\n\nLearn to use Maven to manage the building of Java application.\n\n\nCreate projects that use Maven\n\n\n\n\n\n\n4\n\n\nJDBC\n\n\n\n\n\n\n\n\n\n\nSetup and configure the MySQL RDBMS\n\n\n\n\n\n\n\n\n\n\n- Examine the principles of interacting with a DBMS from within a program.\n\n\n\n\n\n\n\n\n\n\n- Examine the JDBC interface and classes that support database access.\n\n\n\n\n\n\n\n\n\n\nImplement the tasks necessary to: Connect to a database Issue an SQL statement Process the result\n\n\nImplement a database for storing appointments and a contact list\n\n\n\n\n\n\n2\n\n\nJUnit Testing\n\n\n\n\n\n\n\n\n\n\nExamine how the Junit Framework supports unit testing\n\n\n\n\n\n\n\n\n\n\nLearn to develop test cases and test suites\n\n\nDevelop a test plan and implement it\n\n\n\n\n\n\n2\n\n\nMail\n\n\n\n\n\n\n\n\n\n\nReview the principles of SMTP, POP, and IMAP systems.\n\n\n\n\n\n\n\n\n\n\nLearn to use the JODD Email API to connects to SMTP and IMAP mail systems to send and retrieve emails\n\n\nImplement the email portion of the project\n\n\n\n\n\n\n6\n\n\nJavaFX\n\n\n\n\n\n\n\n\n---\n\n\n---\n\n\n---\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- Examine the architecture of JavaFX\n\n\n\n\n\n\n\n\n\n\n- Scene Graph\n\n\n\n\n\n\n\n\n\n\n- Java Public APIs for JavaFX Features\n\n\n\n\n\n\n\n\n\n\n- Graphics System\n\n\n\n\n\n\n\n\n\n\n- Media and Images\n\n\n\n\n\n\n\n\n\n\n- Web Component\n\n\n\n\n\n\n\n\n\n\n- CSS\n\n\n\n\n\n\n\n\n\n\n- UI Controls\n\n\n\n\n\n\n\n\n\n\n- Layout\n\n\n\n\n\n\n\n\n\n\nCreate form based user interfacesDesign the daily planner project\ns user interface\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- Working with the Scene Builder tool use FXML to code user interfaces and implement MVC\n\n\n\n\n\n\n\n\n\n\n- View created with FXML\n\n\n\n\n\n\n\n\n\n\n- Model implemented as a Properties Bean\n\n\n\n\n\n\n\n\n\n\n- Controller implemented in Java objects that defines the behavior of the GUI\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nApply data validation to user input.\n\n\n.\n\n\n\n\n\n\n2\n\n\nInternationalization and Properties\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- Discuss how software is designed to work in multiple languages and locales.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- Examine the approach Java takes to support software that can dynamically change in different locales.\n\n\n\n\n\n\n\n\n\n\nImplement internationalization in the daily planner so that it can work in both English and French\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- Examine how programs can maintain configuration information\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- Examine the Java Properties class to store and retrieve configuration data\n\n\n\n\n\n\n\n\n\n\nImplement the daily planner configuration in a Properties file.\n\n\n\n\n\n\n\n\n\n\n5\n\n\nSequential Data Structures\n\n\nThe following lab work will make up the assignments portion of the grading scheme\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- Review the workings of and interface for static arrays and dynamic arrays.\n\n\n\n\n\n\n\n\n\n\nCode a dynamic array that implements a supplied interface\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- Examine the interface of a stack data structure and how it is implemented using a sequence data structure\n\n\n\n\n\n\n\n\n\n\nCode a stack that implements a supplied interface such that it could use the dynamic array or linked list created in the previous labs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- Examine the interface of a queue and deque data structures and how they are implemented using a sequence data structure\n\n\n\n\n\n\n\n\n\n\nCode a deque that implements a supplied interface such that it could use the dynamic array or linked list created in the previous labs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- Examine the workings of and interface for a linked list data structure\n\n\n\n\n\n\n\n\n\n\nCode a linked list that implements a supplied interface\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- Examine the Java Collections classes and interfaces for sequential data structures.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3\n\n\nNon-sequential data structures\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- Examine the Java Collections classes and interfaces for non-sequential or unordered data structures such as sets and maps.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- Compare the performance of the various collections classes to determine the best choice for an algorithm.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLab Activities\n\n\nProject\n\n\nDuring the first 9 weeks of the term you will work individually on a project that will demonstrate your achievement of the appropriate objectives in this course. The project will be broken into four phases.\n\n\nFor Fall 2017 the project will be an Daily Planner program. The four phases of this project will be:\n\n\n1)        Design, implement, and unit test the database business and data classes\n\n\nDue on September 18 10:00 AM\n\n\n2)        Design and implement the email business and data classes.\n\n\nDue on September 25 10:00 AM\n\n\n3)        Design and implement a graphical user interface\n\n\nDue on October 16 10:00 AM\n\n\n4)        Deliver the finished application.\n\n\nDue on October 30 10:00 AM\n\n\nPhases 1 must include unit tests. These tests will remain a part of the project till the end.\n\n\nThe project will be completed by October 10, 2017 or sooner. \nThere will be no extension.\n Each phase is worth 25% of the total project mark. If one of the first three phases fails to meet the project requirements it may be resubmitted and a new grade not exceeding 80% of that phase\ns grade may be assigned. Failure to successfully complete any phase by October 30, 2017 will result in a maximum final project grade of 7/25 and a failure in the course.\n\n\nIndividual Labs\n\n\nDuring the last 6 weeks of the course you will complete a series of assignments on the topic of data structures that will demonstrate your achievement of the appropriate objectives.\n\n\nProgram rules and regulations\n\n\nFor 420 career program courses, students must receive at least 50% on the assignment component and at least 60% on the examination component in order to obtain a passing grade for the course. Failure to do so will result in a maximum grade of 50 (the lower of 50 or the grade earned). For the purpose of this rule, quizzes are considered exams.**\n\n\nAssignments are due at the due date specified by the instructor. Assignments received after this time are late. Assignments will not be accepted after due date set by instructor. In exceptional circumstances, such as illness, etc. labs submitted late will be graded provided that the student has received an extension from the instructor in advance.\n\n\nEach student must submit their own individual answers to assignments, and shared solutions are not acceptable. Students must protect their work from being easily copied by others by introducing uniqueness into their work in the choice of images used, the display styles used in the presentation of documents, the originality of the written descriptive passages, and by placing digital signatures on their original images.\n\n\nStudents are reminded that they are responsible for all material presented in the lecture and during the lab, and are expected to obtain material they have missed.\n\n\nStudents must follow exactly the instructions in the lab exercises about how and where to store all computer files in order for their work to be accepted and properly evaluated.\n\n\nThis course outline has been prepared in conformity with the\n \nInstitutional Student Evaluation Policy (I.S.E.P.)\n. The \npolicy is designed to promote equitable and effective evaluation of student learning\n and is\n \ntherefore a crucial policy for you to read and understand\n \n. The policy describes the rights and obligations of students, faculty, departments, programs, and the College administration with regard to evaluation in all your courses.\n \nI.S.E.P.\n \nis published in the College Calendar and reference copies are available in the Library and in the offices of program chairs and the Dean of Social Science \n Business Technologies\n.\n\n\nDAWSON COLLEGE**\n\n\nCOMPUTER SCIENCE DEPARTMENT**\n\n\nPOLICIES**\n\n\n1.        ACADEMIC INTEGRITY**\n\n\nThe Computer Science Department adheres to the Dawson College Academic Conduct policy. Students have an obligation to inform themselves of all aspects of this policy. According to ISEP, the teacher is required to report to the Sector Dean all cases of cheating and plagiarism affecting a student\ns grade. (ISEP Section IV-C) Students may appeal any decision of the teacher regarding cheating and plagiarism according to the methods established by the College. The penalty for cheating or plagiarism may range from a zero on the work to a failure in the course.\n\n\n2.        ATTENDANCE AND LATENESS**\n\n\nStudents are responsible for all material covered in classes and labs, whether or not they are present. Students have an obligation to arrive on time and to remain for the duration of scheduled classes, labs and activities. Students who disregard this obligation may be asked to leave the class, lab or activity. Students should refer to the Institutional Student Evaluation Policy (ISEP Section III-C) regarding attendance.\n\n\n3.        RELIGIOUS HOLIDAY OBSERVANCE**\n\n\nClass period(s) may be cancelled in order that the teacher can observe religious holidays. Any material missed as a result, will be made up during labs, class periods and alternate tutorial sessions.\n\n\nStudents, who intend to observe religious holidays, must inform their teachers in writing as prescribed in the ISEP Policy on Religious Observances (ISEP Section III-D) Students absent from classes because of observance of religious holidays will not be penalized. It must be emphasized, however, that this College policy should not be interpreted to mean that a student can receive credit for work not performed. It is the student\ns responsibility to fulfill the requirements of the alternative arrangement.\n\n\n4.        SOFTWARE**\n\n\nThe Computer Science Department forbids the use of the computer labs it uses to make any copies of any software without the explicit authorization of the Department. Apart from any legal action that might arise from such unauthorized copying, the Computer Science Department reserves the right to discipline any student involved in such activity.\n\n\nStudents who borrow software from the College and fail to return it will be placed on the defaulter list and be subject to the appropriate penalties.\n\n\nViruses are programs that attach themselves to a computer system without the permission of those to whom the system belongs. They are deliberately written to be, at worst, harmful (e.g. destroying the contents of disks) and, at best, bothersome (e.g. disturbing the image shown on the screen). They can cause serious losses of time and effort for students, staff and faculty. Any student involved in the deliberate spreading of viruses is subject to the most severe penalties prescribed by College regulations, apart from any legal action that might arise from such acts.\n\n\n5.        LITERACY**\n\n\nThe Computer Science Department recognizes that literacy in all its forms (read, written, spoken) is essential to our students in their careers.\n\n\nTeachers may choose to incorporate a literacy component into the marking scheme for any piece of work. Teachers may use their discretion to insist that any piece of work submitted for credit is revised by the student if it is unsatisfactory with regard to literacy.\n\n\nTeachers will inform all students in their courses of this policy at the beginning of each semester either by including it in the course description or otherwise.\n\n\n6.        CELL PHONES**\n\n\nThe use of cell phones in all Computer Science lectures, labs and exams is prohibited.\n\n\n7.        PORTABLE COMPUTERS**\n\n\nThe use of portable computers in all Computer Science lectures for purposes other than note-taking is prohibited.\n\n\n8.        STUDENT CONDUCT**\n\n\nEveryone has the right to a safe and non-violent environment. Students are obliged to conduct themselves as stated in the Student Code of Conduct and in the ISEP section on the roles and responsibilities of students. (ISEP section II-D)\n\n\n9.        INTENSIVE COURSE CONFLICTS**\n\n\nIf a student is attending an intensive course, the student must inform the teacher, within the first two weeks of class, of the specific dates of any anticipated absences.\n\n\n10.        ISEP**\n\n\nThe Institutional Student Evaluation Policy (ISEP) is designed to promote equitable and effective evaluation of student learning and is therefore a crucial policy to read and understand. The policy describes the rights and obligations of students, faculty, departments, programs, and the College administration with regard to evaluation in all your courses, including grade reviews and resolution of academic grievance. The ISEP is available on the Dawson website.", 
            "title": "Outline"
        }, 
        {
            "location": "/Software Dev Project/outline/#course-outline-java-iii", 
            "text": "", 
            "title": "COURSE OUTLINE Java III"
        }, 
        {
            "location": "/Software Dev Project/outline/#number-420-517-dw", 
            "text": "Ponderation: 3-3-3  Credits:  3", 
            "title": "Number: 420-517-DW"
        }, 
        {
            "location": "/Software Dev Project/outline/#prerequisites", 
            "text": "Successful completion of all Year 2 420.A0 courses", 
            "title": "Prerequisites:"
        }, 
        {
            "location": "/Software Dev Project/outline/#co-requisites", 
            "text": "420-518-DW Mobile Software Development:  Android    420-524-DW Internet Application Development III:  PHP    420-544-DW Data Communications and Networking", 
            "title": "Co-requisites:"
        }, 
        {
            "location": "/Software Dev Project/outline/#domain", 
            "text": "Programming, Data Structures and Algorithms   Note  You must pass this course as well as the three co-requisite courses in order to progress to the sixth semester of the Computer Science Technology Program.", 
            "title": "Domain:"
        }, 
        {
            "location": "/Software Dev Project/outline/#description", 
            "text": "In this course you will learn to design, code and test a desktop application. The application will employ a JavaFX graphical user interface. The data for the application will be stored in and retrieved from a relational database using the Java Database Connectivity library. All components of the application will be tested using the JUnit framework. You will learn the purpose of, the application of and how to code common data structures. You will also review the data structures provided in the Java Collections Framework. These data structures will be applied to the development of code that implements algorithms. You will learn to use a build system to manage your code a repository to store your code.", 
            "title": "Description"
        }, 
        {
            "location": "/Software Dev Project/outline/#statements-of-competence", 
            "text": "Use an object oriented development approach (016T)  Produce algorithms (016W)  Develop user interfaces. (016X)  Organize and use data (0170)  Correct programs (0171)  Make functional improvements to an application (0176)  Assure the quality of an application (0177)  Design and develop applications in a graphics environment (017C)", 
            "title": "STATEMENTS OF COMPETENCE"
        }, 
        {
            "location": "/Software Dev Project/outline/#contacting-teachers", 
            "text": "Ken Fogel 3F.18                       479901,02  Teacher s schedule will be posted outside the office by the end of the first week of classes.", 
            "title": "Contacting Teachers"
        }, 
        {
            "location": "/Software Dev Project/outline/#course-objectives", 
            "text": "Upon completion of this course the student will be able to:  1) Develop Java applications that use JavaFX framework (016X)  2) Connect a Java application to a database by utilizing Java Data Base Connectivity (JDBC) libraries (0170)  3) Explain the concepts for and apply practically in an application data structures such as stacks, lists, queues, linked lists and binary trees (016W)  4) Code stacks, lists, queues and linked lists (016W)  4) Use the Java Collections Framework to employ data structures in an application (0170)  5) Issue SQL commands to a database and display the result set in an appropriate GUI component such as an Update Table (0170)  6) Manage application development using a build system  7) Test and validate your code using the unit testing framework (0171, 0177)  8) Write a desktop application from a given specification (016T, 017C, 0177, 016W)", 
            "title": "Course Objectives:"
        }, 
        {
            "location": "/Software Dev Project/outline/#course-methodology", 
            "text": "The course consists of two 1\u00bd-hour lectures and one 3-hour lab session per week.  Concepts and techniques will be presented in lectures and practical exercises that apply to the concepts and techniques will be carried out in lab sessions.", 
            "title": "Course Methodology"
        }, 
        {
            "location": "/Software Dev Project/outline/#readings", 
            "text": "More readings will be announced in class  JavaFX  http://docs.oracle.com/javase/8/javase-clienttechnologies.htm  Collections  http://docs.oracle.com/javase/tutorial/collections/index.html  Generics  http://docs.oracle.com/javase/tutorial/extra/generics/index.html  JDBC Database Access  http://docs.oracle.com/javase/tutorial/jdbc/basics/index.html  Internationalization  http://docs.oracle.com/javase/tutorial/i18n/index.html  JODD Email  http://jodd.org/doc/email.html  JUnit 4  1     http://www.vogella.com/tutorials/JUnit/article.html   Git  1     Pro Git Book [http://git-scm.com/book Chapters 1-3](http://git-scm.com/book%20Chapters%201-3)", 
            "title": "Readings"
        }, 
        {
            "location": "/Software Dev Project/outline/#required", 
            "text": "One 32 Gig USB 3.0 (not 2.0) flash drive.  An account on GitLab.com (not Github or any other service).  Four Gmail accounts for testing of the email application.", 
            "title": "Required"
        }, 
        {
            "location": "/Software Dev Project/outline/#assessment-of-student-performance", 
            "text": "Midterm Examination   Duration: 1   hours         20%  (Week 7)     Final Examination   Duration: 3 hours          35% (Exam period)     Quizzes   Weeks 2, 5, 8,   12  10%     Assignments   10%  Project 25%", 
            "title": "Assessment of student performance"
        }, 
        {
            "location": "/Software Dev Project/outline/#course-topics-labs", 
            "text": "Lectures  Topic  Lab Work      1  Presentation of the course project  The Daily Planner Project    2  Software Versioning and Code Revision Systems  Software Build System     Discuss how programmers manage code for themselves and as part of a team.      Learn to use the open source Git system.  Connect to a Git repository, download code and upload code.     Learn to use Maven to manage the building of Java application.  Create projects that use Maven    4  JDBC      Setup and configure the MySQL RDBMS      - Examine the principles of interacting with a DBMS from within a program.      - Examine the JDBC interface and classes that support database access.      Implement the tasks necessary to: Connect to a database Issue an SQL statement Process the result  Implement a database for storing appointments and a contact list    2  JUnit Testing      Examine how the Junit Framework supports unit testing      Learn to develop test cases and test suites  Develop a test plan and implement it    2  Mail      Review the principles of SMTP, POP, and IMAP systems.      Learn to use the JODD Email API to connects to SMTP and IMAP mail systems to send and retrieve emails  Implement the email portion of the project    6  JavaFX     ---  ---  ---         - Examine the architecture of JavaFX      - Scene Graph      - Java Public APIs for JavaFX Features      - Graphics System      - Media and Images      - Web Component      - CSS      - UI Controls      - Layout      Create form based user interfacesDesign the daily planner project s user interface           - Working with the Scene Builder tool use FXML to code user interfaces and implement MVC      - View created with FXML      - Model implemented as a Properties Bean      - Controller implemented in Java objects that defines the behavior of the GUI            Apply data validation to user input.  .    2  Internationalization and Properties          - Discuss how software is designed to work in multiple languages and locales.                - Examine the approach Java takes to support software that can dynamically change in different locales.      Implement internationalization in the daily planner so that it can work in both English and French           - Examine how programs can maintain configuration information                - Examine the Java Properties class to store and retrieve configuration data      Implement the daily planner configuration in a Properties file.      5  Sequential Data Structures  The following lab work will make up the assignments portion of the grading scheme         - Review the workings of and interface for static arrays and dynamic arrays.      Code a dynamic array that implements a supplied interface           - Examine the interface of a stack data structure and how it is implemented using a sequence data structure      Code a stack that implements a supplied interface such that it could use the dynamic array or linked list created in the previous labs           - Examine the interface of a queue and deque data structures and how they are implemented using a sequence data structure      Code a deque that implements a supplied interface such that it could use the dynamic array or linked list created in the previous labs           - Examine the workings of and interface for a linked list data structure      Code a linked list that implements a supplied interface           - Examine the Java Collections classes and interfaces for sequential data structures.           3  Non-sequential data structures          - Examine the Java Collections classes and interfaces for non-sequential or unordered data structures such as sets and maps.                - Compare the performance of the various collections classes to determine the best choice for an algorithm.", 
            "title": "Course Topics &amp; Labs"
        }, 
        {
            "location": "/Software Dev Project/outline/#lab-activities", 
            "text": "", 
            "title": "Lab Activities"
        }, 
        {
            "location": "/Software Dev Project/outline/#project", 
            "text": "", 
            "title": "Project"
        }, 
        {
            "location": "/Software Dev Project/outline/#during-the-first-9-weeks-of-the-term-you-will-work-individually-on-a-project-that-will-demonstrate-your-achievement-of-the-appropriate-objectives-in-this-course-the-project-will-be-broken-into-four-phases", 
            "text": "", 
            "title": "During the first 9 weeks of the term you will work individually on a project that will demonstrate your achievement of the appropriate objectives in this course. The project will be broken into four phases."
        }, 
        {
            "location": "/Software Dev Project/outline/#for-fall-2017-the-project-will-be-an-daily-planner-program-the-four-phases-of-this-project-will-be", 
            "text": "", 
            "title": "For Fall 2017 the project will be an Daily Planner program. The four phases of this project will be:"
        }, 
        {
            "location": "/Software Dev Project/outline/#1-design-implement-and-unit-test-the-database-business-and-data-classes", 
            "text": "", 
            "title": "1)        Design, implement, and unit test the database business and data classes"
        }, 
        {
            "location": "/Software Dev Project/outline/#due-on-september-18-1000-am", 
            "text": "", 
            "title": "Due on September 18 10:00 AM"
        }, 
        {
            "location": "/Software Dev Project/outline/#2-design-and-implement-the-email-business-and-data-classes", 
            "text": "", 
            "title": "2)        Design and implement the email business and data classes."
        }, 
        {
            "location": "/Software Dev Project/outline/#due-on-september-25-1000-am", 
            "text": "", 
            "title": "Due on September 25 10:00 AM"
        }, 
        {
            "location": "/Software Dev Project/outline/#3-design-and-implement-a-graphical-user-interface", 
            "text": "", 
            "title": "3)        Design and implement a graphical user interface"
        }, 
        {
            "location": "/Software Dev Project/outline/#due-on-october-16-1000-am", 
            "text": "", 
            "title": "Due on October 16 10:00 AM"
        }, 
        {
            "location": "/Software Dev Project/outline/#4-deliver-the-finished-application", 
            "text": "", 
            "title": "4)        Deliver the finished application."
        }, 
        {
            "location": "/Software Dev Project/outline/#due-on-october-30-1000-am", 
            "text": "", 
            "title": "Due on October 30 10:00 AM"
        }, 
        {
            "location": "/Software Dev Project/outline/#phases-1-must-include-unit-tests-these-tests-will-remain-a-part-of-the-project-till-the-end", 
            "text": "", 
            "title": "Phases 1 must include unit tests. These tests will remain a part of the project till the end."
        }, 
        {
            "location": "/Software Dev Project/outline/#the-project-will-be-completed-by-october-10-2017-or-sooner-there-will-be-no-extension-each-phase-is-worth-25-of-the-total-project-mark-if-one-of-the-first-three-phases-fails-to-meet-the-project-requirements-it-may-be-resubmitted-and-a-new-grade-not-exceeding-80-of-that-phases-grade-may-be-assigned-failure-to-successfully-complete-any-phase-by-october-30-2017-will-result-in-a-maximum-final-project-grade-of-725-and-a-failure-in-the-course", 
            "text": "", 
            "title": "The project will be completed by October 10, 2017 or sooner. There will be no extension. Each phase is worth 25% of the total project mark. If one of the first three phases fails to meet the project requirements it may be resubmitted and a new grade not exceeding 80% of that phase&#39;s grade may be assigned. Failure to successfully complete any phase by October 30, 2017 will result in a maximum final project grade of 7/25 and a failure in the course."
        }, 
        {
            "location": "/Software Dev Project/outline/#individual-labs", 
            "text": "", 
            "title": "Individual Labs"
        }, 
        {
            "location": "/Software Dev Project/outline/#during-the-last-6-weeks-of-the-course-you-will-complete-a-series-of-assignments-on-the-topic-of-data-structures-that-will-demonstrate-your-achievement-of-the-appropriate-objectives", 
            "text": "", 
            "title": "During the last 6 weeks of the course you will complete a series of assignments on the topic of data structures that will demonstrate your achievement of the appropriate objectives."
        }, 
        {
            "location": "/Software Dev Project/outline/#program-rules-and-regulations", 
            "text": "", 
            "title": "Program rules and regulations"
        }, 
        {
            "location": "/Software Dev Project/outline/#for-420-career-program-courses-students-must-receive-at-least-50-on-the-assignment-component-and-at-least-60-on-the-examination-component-in-order-to-obtain-a-passing-grade-for-the-course-failure-to-do-so-will-result-in-a-maximum-grade-of-50-the-lower-of-50-or-the-grade-earned-for-the-purpose-of-this-rule-quizzes-are-considered-exams", 
            "text": "Assignments are due at the due date specified by the instructor. Assignments received after this time are late. Assignments will not be accepted after due date set by instructor. In exceptional circumstances, such as illness, etc. labs submitted late will be graded provided that the student has received an extension from the instructor in advance.  Each student must submit their own individual answers to assignments, and shared solutions are not acceptable. Students must protect their work from being easily copied by others by introducing uniqueness into their work in the choice of images used, the display styles used in the presentation of documents, the originality of the written descriptive passages, and by placing digital signatures on their original images.  Students are reminded that they are responsible for all material presented in the lecture and during the lab, and are expected to obtain material they have missed.  Students must follow exactly the instructions in the lab exercises about how and where to store all computer files in order for their work to be accepted and properly evaluated.  This course outline has been prepared in conformity with the   Institutional Student Evaluation Policy (I.S.E.P.) . The  policy is designed to promote equitable and effective evaluation of student learning  and is   therefore a crucial policy for you to read and understand   . The policy describes the rights and obligations of students, faculty, departments, programs, and the College administration with regard to evaluation in all your courses.   I.S.E.P.   is published in the College Calendar and reference copies are available in the Library and in the offices of program chairs and the Dean of Social Science   Business Technologies .", 
            "title": "For 420 career program courses, students must receive at least 50% on the assignment component and at least 60% on the examination component in order to obtain a passing grade for the course. Failure to do so will result in a maximum grade of 50 (the lower of 50 or the grade earned). For the purpose of this rule, quizzes are considered exams.**"
        }, 
        {
            "location": "/Software Dev Project/outline/#dawson-college", 
            "text": "", 
            "title": "DAWSON COLLEGE**"
        }, 
        {
            "location": "/Software Dev Project/outline/#computer-science-department", 
            "text": "", 
            "title": "COMPUTER SCIENCE DEPARTMENT**"
        }, 
        {
            "location": "/Software Dev Project/outline/#policies", 
            "text": "", 
            "title": "POLICIES**"
        }, 
        {
            "location": "/Software Dev Project/outline/#1-academic-integrity", 
            "text": "The Computer Science Department adheres to the Dawson College Academic Conduct policy. Students have an obligation to inform themselves of all aspects of this policy. According to ISEP, the teacher is required to report to the Sector Dean all cases of cheating and plagiarism affecting a student s grade. (ISEP Section IV-C) Students may appeal any decision of the teacher regarding cheating and plagiarism according to the methods established by the College. The penalty for cheating or plagiarism may range from a zero on the work to a failure in the course.", 
            "title": "1.        ACADEMIC INTEGRITY**"
        }, 
        {
            "location": "/Software Dev Project/outline/#2-attendance-and-lateness", 
            "text": "Students are responsible for all material covered in classes and labs, whether or not they are present. Students have an obligation to arrive on time and to remain for the duration of scheduled classes, labs and activities. Students who disregard this obligation may be asked to leave the class, lab or activity. Students should refer to the Institutional Student Evaluation Policy (ISEP Section III-C) regarding attendance.", 
            "title": "2.        ATTENDANCE AND LATENESS**"
        }, 
        {
            "location": "/Software Dev Project/outline/#3-religious-holiday-observance", 
            "text": "Class period(s) may be cancelled in order that the teacher can observe religious holidays. Any material missed as a result, will be made up during labs, class periods and alternate tutorial sessions.  Students, who intend to observe religious holidays, must inform their teachers in writing as prescribed in the ISEP Policy on Religious Observances (ISEP Section III-D) Students absent from classes because of observance of religious holidays will not be penalized. It must be emphasized, however, that this College policy should not be interpreted to mean that a student can receive credit for work not performed. It is the student s responsibility to fulfill the requirements of the alternative arrangement.", 
            "title": "3.        RELIGIOUS HOLIDAY OBSERVANCE**"
        }, 
        {
            "location": "/Software Dev Project/outline/#4-software", 
            "text": "The Computer Science Department forbids the use of the computer labs it uses to make any copies of any software without the explicit authorization of the Department. Apart from any legal action that might arise from such unauthorized copying, the Computer Science Department reserves the right to discipline any student involved in such activity.  Students who borrow software from the College and fail to return it will be placed on the defaulter list and be subject to the appropriate penalties.  Viruses are programs that attach themselves to a computer system without the permission of those to whom the system belongs. They are deliberately written to be, at worst, harmful (e.g. destroying the contents of disks) and, at best, bothersome (e.g. disturbing the image shown on the screen). They can cause serious losses of time and effort for students, staff and faculty. Any student involved in the deliberate spreading of viruses is subject to the most severe penalties prescribed by College regulations, apart from any legal action that might arise from such acts.", 
            "title": "4.        SOFTWARE**"
        }, 
        {
            "location": "/Software Dev Project/outline/#5-literacy", 
            "text": "The Computer Science Department recognizes that literacy in all its forms (read, written, spoken) is essential to our students in their careers.  Teachers may choose to incorporate a literacy component into the marking scheme for any piece of work. Teachers may use their discretion to insist that any piece of work submitted for credit is revised by the student if it is unsatisfactory with regard to literacy.  Teachers will inform all students in their courses of this policy at the beginning of each semester either by including it in the course description or otherwise.", 
            "title": "5.        LITERACY**"
        }, 
        {
            "location": "/Software Dev Project/outline/#6-cell-phones", 
            "text": "The use of cell phones in all Computer Science lectures, labs and exams is prohibited.", 
            "title": "6.        CELL PHONES**"
        }, 
        {
            "location": "/Software Dev Project/outline/#7-portable-computers", 
            "text": "The use of portable computers in all Computer Science lectures for purposes other than note-taking is prohibited.", 
            "title": "7.        PORTABLE COMPUTERS**"
        }, 
        {
            "location": "/Software Dev Project/outline/#8-student-conduct", 
            "text": "Everyone has the right to a safe and non-violent environment. Students are obliged to conduct themselves as stated in the Student Code of Conduct and in the ISEP section on the roles and responsibilities of students. (ISEP section II-D)", 
            "title": "8.        STUDENT CONDUCT**"
        }, 
        {
            "location": "/Software Dev Project/outline/#9-intensive-course-conflicts", 
            "text": "If a student is attending an intensive course, the student must inform the teacher, within the first two weeks of class, of the specific dates of any anticipated absences.", 
            "title": "9.        INTENSIVE COURSE CONFLICTS**"
        }, 
        {
            "location": "/Software Dev Project/outline/#10-isep", 
            "text": "The Institutional Student Evaluation Policy (ISEP) is designed to promote equitable and effective evaluation of student learning and is therefore a crucial policy to read and understand. The policy describes the rights and obligations of students, faculty, departments, programs, and the College administration with regard to evaluation in all your courses, including grade reviews and resolution of academic grievance. The ISEP is available on the Dawson website.", 
            "title": "10.        ISEP**"
        }, 
        {
            "location": "/Software Dev Project/labs/warmup-dice-game/", 
            "text": "Pass Line Casino Dice Game\n\n\nThe goal of this assignment is to reactivate your Java skills. You may use a console or GUI interface. In next week\u2019s labs I will sit with you and we will do a code review of your work.\n\n\nRules\n\n\nIn this game you roll the dice (called the come-out roll) and look at the total. If this total is equal to 7 or 11, then you win the amount of the bet. If the total is equal to 2, 3 or 12, then you lose the bet. Any other total of the dice becomes the \"point\", and you continue to roll the dice until you either (a) roll the point total again, in which case you win the amount of the bet, or (b) roll a total of 7, in which case you lose the amount of the bet. If the total of the dice is not 7 and not equal to the point, then you roll again, and continue to roll, until either condition (a) or (b) is met. Once the point has been determined, it does not change for subsequent rolls of the dice.\n\n\nThe game will begin by asking the user how much money they have to start with. The game will run until the player exits or the total money drops to zero. Each time the game is played ask the user for the amount they wish to bet. If they win then this amount is added to their total and if they loose it is subtracted from their total. After each game display whether they won or lost, how much total money they have and ask if they want to play again. If they do not want to play again then the program exits.", 
            "title": "Warmup dice game"
        }, 
        {
            "location": "/Software Dev Project/labs/warmup-dice-game/#pass-line-casino-dice-game", 
            "text": "The goal of this assignment is to reactivate your Java skills. You may use a console or GUI interface. In next week\u2019s labs I will sit with you and we will do a code review of your work.", 
            "title": "Pass Line Casino Dice Game"
        }, 
        {
            "location": "/Software Dev Project/labs/warmup-dice-game/#rules", 
            "text": "In this game you roll the dice (called the come-out roll) and look at the total. If this total is equal to 7 or 11, then you win the amount of the bet. If the total is equal to 2, 3 or 12, then you lose the bet. Any other total of the dice becomes the \"point\", and you continue to roll the dice until you either (a) roll the point total again, in which case you win the amount of the bet, or (b) roll a total of 7, in which case you lose the amount of the bet. If the total of the dice is not 7 and not equal to the point, then you roll again, and continue to roll, until either condition (a) or (b) is met. Once the point has been determined, it does not change for subsequent rolls of the dice.  The game will begin by asking the user how much money they have to start with. The game will run until the player exits or the total money drops to zero. Each time the game is played ask the user for the amount they wish to bet. If they win then this amount is added to their total and if they loose it is subtracted from their total. After each game display whether they won or lost, how much total money they have and ask if they want to play again. If they do not want to play again then the program exits.", 
            "title": "Rules"
        }
    ]
}
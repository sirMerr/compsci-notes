{
    "docs": [
        {
            "location": "/", 
            "text": "CompSci HQ \nfor all things confusing\n\n\nIntroduction\n\n\nWelcome to the wiki! \ud83c\udf89\n\n\nThese are my notes for Semester 5 of Dawson's Computer Science program. It consists, among other things, of PHP, Java, Android and Git.\n\n\nThis is a work in progress! To contribute or any other issues, ask \n@sirMerr", 
            "title": "Home"
        }, 
        {
            "location": "/#compsci-hq-for-all-things-confusing", 
            "text": "", 
            "title": "CompSci HQ for all things confusing"
        }, 
        {
            "location": "/#introduction", 
            "text": "Welcome to the wiki! \ud83c\udf89  These are my notes for Semester 5 of Dawson's Computer Science program. It consists, among other things, of PHP, Java, Android and Git.  This is a work in progress! To contribute or any other issues, ask  @sirMerr", 
            "title": "Introduction"
        }, 
        {
            "location": "/how-to-document/", 
            "text": "You have a few options. \nMake sure you have permissions\n with the Wiki repo here: \nhttps://github.com/sirMerr/compsci-notes\n if using that one.\n\n\nMake a pull request\n\n\n\n\nAdd \n.md\n files to \n./docs\n (on Github or locally)\n\n\nAdd the path to \npages\n in \n./mkdocs.yml\n\n\nMake a pull request\n\n\nSenpai \n@sirmerr\n or others will deploy it\n\n\n\n\nDeploy it yourself\n\n\nInstall MkDocs\n\n\nBefore installing \nMkDocs\n, you need to make sure you have Python and \npip\n\n\u2013 the Python package manager \u2013 up and running. You can verify if you're already\ngood to go with the following commands:\n\n\n1\n2\n3\n4\npython --version\n\n# Python 2.7.13\n\npip --version\n\n# pip 9.0.1\n\n\n\n\n\n\n\nInstalling and verifying MkDocs is as simple as:\n\n\n1\n2\npip install mkdocs \n mkdocs --version\n\n# mkdocs, version 0.16.0\n\n\n\n\n\n\n\nInstalling Material\n\n\nusing pip\n\n\nMaterial can be installed with \npip\n:\n\n\n1\npip install mkdocs-material\n\n\n\n\n\n\nAdd Docs Locally\n\n\nclone repo\n\n\n1\ngit clone git@github.com:Jogogoplay/hq.git`\n\n\n\n\n\n\nadd docs\n\n\n\n\nAdd \n.md\n files to \n./docs\n    \n\n\nAdd the path to \npages\n in \n./mkdocs.yml\n\n\n\n\nserve locally\n\n\n1\nmkdocs serve\n\n\n\n\nYou can verify at \nhttp://127.0.0.1:8000/\n (default) if you're scurred\n\n\ndeploy to gh-pages\n\n\n1\nmkdocs gh-deploy\n\n\n\n\nVoila! You're the best writer ever! Check your work at \nhttps://jogogoplay.github.io/\n\n\nMaking your own docs\n\n\nCheck out \nhttp://squidfunk.github.io/mkdocs-material/\n to start your own Mkdocs-material project! Otherwise, look above to contribute to mine or to clone it.\n\n\nBelow is my \nmkdocs.yml\n configuration file. Replace \nFiracode\n with your own font or remove if not needed, but otherwise this has all you need to have all the extensions and setup (you still need to install mkdocs, instructions above or at the \nmkdocs-material site\n)\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\nsite_name: CompSci HQ\nsite_description: \nNotes for Semester 5 of Computer Science at Dawson\n\nsite_author: \nTiffany\n\nsite_url: \nhttps://sirmerr.github.io/compsci-notes/\n\nsite_favicon: \nimages/favicon.ico\n\n\n# Documentation and theme\ntheme: \nmaterial\n\n\n# Options\nextra:\n  palette:\n    primary: \nblue-grey\n\n    accent: \nblue\n\n  font:\n    text: \nFiracode\n\n    code: \nFiracode\n\n\n# Extensions\nmarkdown_extensions:\n  - admonition\n  - codehilite(guess_lang=false, linenums=true)\n  - toc(permalink=true)\n  - pymdownx.arithmatex\n  - pymdownx.betterem(smart_enable=all)\n  - pymdownx.caret\n  - pymdownx.critic\n  - pymdownx.emoji:\n      emoji_generator: !!python/name:pymdownx.emoji.to_svg\n  - pymdownx.inlinehilite\n  - pymdownx.magiclink\n  - pymdownx.mark\n  - pymdownx.smartsymbols\n  - pymdownx.superfences\n  - pymdownx.tasklist(custom_checkbox=true)\n  - pymdownx.tilde", 
            "title": "How to document"
        }, 
        {
            "location": "/how-to-document/#make-a-pull-request", 
            "text": "Add  .md  files to  ./docs  (on Github or locally)  Add the path to  pages  in  ./mkdocs.yml  Make a pull request  Senpai  @sirmerr  or others will deploy it", 
            "title": "Make a pull request"
        }, 
        {
            "location": "/how-to-document/#deploy-it-yourself", 
            "text": "", 
            "title": "Deploy it yourself"
        }, 
        {
            "location": "/how-to-document/#install-mkdocs", 
            "text": "Before installing  MkDocs , you need to make sure you have Python and  pip \n\u2013 the Python package manager \u2013 up and running. You can verify if you're already\ngood to go with the following commands:  1\n2\n3\n4 python --version # Python 2.7.13 \npip --version # pip 9.0.1    Installing and verifying MkDocs is as simple as:  1\n2 pip install mkdocs   mkdocs --version # mkdocs, version 0.16.0", 
            "title": "Install MkDocs"
        }, 
        {
            "location": "/how-to-document/#installing-material", 
            "text": "", 
            "title": "Installing Material"
        }, 
        {
            "location": "/how-to-document/#using-pip", 
            "text": "Material can be installed with  pip :  1 pip install mkdocs-material", 
            "title": "using pip"
        }, 
        {
            "location": "/how-to-document/#add-docs-locally", 
            "text": "", 
            "title": "Add Docs Locally"
        }, 
        {
            "location": "/how-to-document/#clone-repo", 
            "text": "1 git clone git@github.com:Jogogoplay/hq.git`", 
            "title": "clone repo"
        }, 
        {
            "location": "/how-to-document/#add-docs", 
            "text": "Add  .md  files to  ./docs       Add the path to  pages  in  ./mkdocs.yml", 
            "title": "add docs"
        }, 
        {
            "location": "/how-to-document/#serve-locally", 
            "text": "1 mkdocs serve  \nYou can verify at  http://127.0.0.1:8000/  (default) if you're scurred", 
            "title": "serve locally"
        }, 
        {
            "location": "/how-to-document/#deploy-to-gh-pages", 
            "text": "1 mkdocs gh-deploy  \nVoila! You're the best writer ever! Check your work at  https://jogogoplay.github.io/", 
            "title": "deploy to gh-pages"
        }, 
        {
            "location": "/how-to-document/#making-your-own-docs", 
            "text": "Check out  http://squidfunk.github.io/mkdocs-material/  to start your own Mkdocs-material project! Otherwise, look above to contribute to mine or to clone it.  Below is my  mkdocs.yml  configuration file. Replace  Firacode  with your own font or remove if not needed, but otherwise this has all you need to have all the extensions and setup (you still need to install mkdocs, instructions above or at the  mkdocs-material site )   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36 site_name: CompSci HQ\nsite_description:  Notes for Semester 5 of Computer Science at Dawson \nsite_author:  Tiffany \nsite_url:  https://sirmerr.github.io/compsci-notes/ \nsite_favicon:  images/favicon.ico \n\n# Documentation and theme\ntheme:  material \n\n# Options\nextra:\n  palette:\n    primary:  blue-grey \n    accent:  blue \n  font:\n    text:  Firacode \n    code:  Firacode \n\n# Extensions\nmarkdown_extensions:\n  - admonition\n  - codehilite(guess_lang=false, linenums=true)\n  - toc(permalink=true)\n  - pymdownx.arithmatex\n  - pymdownx.betterem(smart_enable=all)\n  - pymdownx.caret\n  - pymdownx.critic\n  - pymdownx.emoji:\n      emoji_generator: !!python/name:pymdownx.emoji.to_svg\n  - pymdownx.inlinehilite\n  - pymdownx.magiclink\n  - pymdownx.mark\n  - pymdownx.smartsymbols\n  - pymdownx.superfences\n  - pymdownx.tasklist(custom_checkbox=true)\n  - pymdownx.tilde", 
            "title": "Making your own docs"
        }, 
        {
            "location": "/Data-Communications/introduction/", 
            "text": "DTE \n DCE\n\n\n\n\ndata terminal equipment\n\n\ndata communications equipment\n\n\n\n\nNetwork Utilities\n\n\nProtocol and Pinging\n\n\nSet of rules governing sending and receiving packets\n\n\nPing\n\n\nPing can be used for diagnosing if a website is down or for self diagnosis.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n$ ping \n127\n.0.0.1\n$ ping localhost\n\n// Response\n\n64\n bytes from \n127\n.0.0.1: \nicmp_seq\n=\n0\n \nttl\n=\n64\n \ntime\n=\n0\n.053 ms\n\n64\n bytes from \n127\n.0.0.1: \nicmp_seq\n=\n1\n \nttl\n=\n64\n \ntime\n=\n0\n.044 ms\n^C\n--- localhost ping statistics ---\n\n2\n packets transmitted, \n2\n packets received, \n0\n.0% packet loss\nround-trip min/avg/max/stddev \n=\n \n0\n.044/0.049/0.053/0.004 ms\n\n\n\n\n\n\ntimeout\n\n\nMore time elapsed between an event and a response event than expected\n\n\n127.0.0.1 and localhost\n\n\nThis refers to yourself. So if you ping that, you're pinging yourself. \n\n\nFQDN\n\n\nFully Qualified Domain Name \n \nwww\n like from \nwww.microsoft.com\n\n* It's not 1 machine for 1 FQDN\n* It's possible to have more than 1 FQDN on a machine\n* Opposite also possible, common for big sites\n\n\nDNS\n\n\n\n\nImportant service that serves as a resolver. \n\n\nYou take a FQDN, give it to DNS to resolve and it gives an ip number. \n\n\nYou can do the inverse too.\n\n\nIP# = DNS(FQDN)\n\n\n\n\ntracert\n\n\nstrace route\n\n\nShows router path from sender to receiver \n looked pinging with increasing TTLs (time to live)\n\n\npathping\n\n\nipconfig\n\n\n\n\nTells you a lot about yourself. \n\n\n/all\n is all information\n\n\n/displaydns\n cacheing\n\n\n/flushdns\n casheing\n\n\n/release\n -- gave up DHCP lease\n\n\nDynamic Host Configuration Protocol\n\n\n\n\n\n\n/reverse\n\n\n\n\nnetstat\n\n\n\n\n-e\n\n\n-a\n\n\nInfo on TCP activity\n\n\nTCP is an important protocol\n\n\n\n\n\n\nAdvanced\n\n\n\n\nroute print\n\n\n1\n2\nrouting\ntable info\n\n\n\n\n\n\nIdentifiers\n\n\n\n\n\n\n\n\nLevels\n\n\nIdentifiers\n\n\n\n\n\n\n\n\n\n\n7\n\n\n6\n\n\n\n\n\n\n6\n\n\nFQDN\n\n\n\n\n\n\n5\n\n\n\n\n\n\n\n\n\n\n^ dns v\n\n\n\n\n\n\n4\n\n\nport #\n\n\n\n\n\n\n3\n\n\nIP #\n\n\n\n\n\n\n\n\n^ arp v\n\n\n\n\n\n\n2\n\n\n\n\n\n\n\n\n1\n\n\nMAC address", 
            "title": "Introduction"
        }, 
        {
            "location": "/Data-Communications/introduction/#dte-dce", 
            "text": "data terminal equipment  data communications equipment", 
            "title": "DTE &amp; DCE"
        }, 
        {
            "location": "/Data-Communications/introduction/#network-utilities", 
            "text": "", 
            "title": "Network Utilities"
        }, 
        {
            "location": "/Data-Communications/introduction/#protocol-and-pinging", 
            "text": "Set of rules governing sending and receiving packets", 
            "title": "Protocol and Pinging"
        }, 
        {
            "location": "/Data-Communications/introduction/#ping", 
            "text": "Ping can be used for diagnosing if a website is down or for self diagnosis.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 $ ping  127 .0.0.1\n$ ping localhost\n\n// Response 64  bytes from  127 .0.0.1:  icmp_seq = 0   ttl = 64   time = 0 .053 ms 64  bytes from  127 .0.0.1:  icmp_seq = 1   ttl = 64   time = 0 .044 ms\n^C\n--- localhost ping statistics --- 2  packets transmitted,  2  packets received,  0 .0% packet loss\nround-trip min/avg/max/stddev  =   0 .044/0.049/0.053/0.004 ms", 
            "title": "Ping"
        }, 
        {
            "location": "/Data-Communications/introduction/#timeout", 
            "text": "More time elapsed between an event and a response event than expected", 
            "title": "timeout"
        }, 
        {
            "location": "/Data-Communications/introduction/#127001-and-localhost", 
            "text": "This refers to yourself. So if you ping that, you're pinging yourself.", 
            "title": "127.0.0.1 and localhost"
        }, 
        {
            "location": "/Data-Communications/introduction/#fqdn", 
            "text": "Fully Qualified Domain Name    www  like from  www.microsoft.com \n* It's not 1 machine for 1 FQDN\n* It's possible to have more than 1 FQDN on a machine\n* Opposite also possible, common for big sites", 
            "title": "FQDN"
        }, 
        {
            "location": "/Data-Communications/introduction/#dns", 
            "text": "Important service that serves as a resolver.   You take a FQDN, give it to DNS to resolve and it gives an ip number.   You can do the inverse too.  IP# = DNS(FQDN)", 
            "title": "DNS"
        }, 
        {
            "location": "/Data-Communications/introduction/#tracert", 
            "text": "", 
            "title": "tracert"
        }, 
        {
            "location": "/Data-Communications/introduction/#strace-route", 
            "text": "Shows router path from sender to receiver   looked pinging with increasing TTLs (time to live)", 
            "title": "strace route"
        }, 
        {
            "location": "/Data-Communications/introduction/#pathping", 
            "text": "", 
            "title": "pathping"
        }, 
        {
            "location": "/Data-Communications/introduction/#ipconfig", 
            "text": "Tells you a lot about yourself.   /all  is all information  /displaydns  cacheing  /flushdns  casheing  /release  -- gave up DHCP lease  Dynamic Host Configuration Protocol    /reverse", 
            "title": "ipconfig"
        }, 
        {
            "location": "/Data-Communications/introduction/#netstat", 
            "text": "-e  -a  Info on TCP activity  TCP is an important protocol    Advanced", 
            "title": "netstat"
        }, 
        {
            "location": "/Data-Communications/introduction/#route-print", 
            "text": "1\n2 routing\ntable info", 
            "title": "route print"
        }, 
        {
            "location": "/Data-Communications/introduction/#identifiers", 
            "text": "Levels  Identifiers      7  6    6  FQDN    5      ^ dns v    4  port #    3  IP #     ^ arp v    2     1  MAC address", 
            "title": "Identifiers"
        }, 
        {
            "location": "/Data-Communications/assignments/assignment1/", 
            "text": "DATA COMMUNICATIONS AND NETWORKING\n\n\n1\n2\nPROJECT\nWRITING TCP CLIENT AND SERVER SOFTWARE - 3 STONES\n\n\n\n\n\n\nA. Simonelis\n\n\nDue/Demos \u2013 Oct 24 and 26\n\n\nDocs: Oct 27, 2017\n\n\nYou will work in assigned groups. Each group will demonstrate its work, as specified by your instructor. All group members must be present at the demonstration. All members of a group are expected to contribute more or less equally to the project, and to be familiar with all of the work of the project.\n\n\nEach team will write a client-server TCP-based system in Java that will allow a person using the client to play game(s) of 3 Stones with the computer server.\n\n\nAt initiation, the server software will display its IP address. The client will allow the user to input the IP address of the server. The machines will then connect to begin the session, after which:\n\n\n\n\nthe client program will allow the user to start a game, or to quit the client; the client will allow the user the same two choices at the end of each game; it is desirable, but not essential, for the client to support a feature that allows the user to quit the client at any time, via the mouse or the keyboard;\n\n\nthe server will continue servicing the client that began the session until the client terminates the session by closing the socket, at which point the server will resume listening for new clients (i.e. the server will be an iterative server, servicing one client at a time).\n\n\n\n\nBoth the client and the server are to display appropriate messages while running. The client will display the game board while a game is in progress. Your display may be either GUI or text based.\n\n\nYour 3S protocol will have the server listening on port \n50,000\n. \n\n\nAll 3S messages must be fixed-length, multibyte packets. Design your packet layout carefully.\n\n\nA 3S session consists of zero or more games.\n\n\nThe client initiates a game by sending the server a request-game-start message (e.g. \n0x00000000\n). The server replies with a game-start message (e.g. \n0x0000000A\n), after which the client draws the board, . . . \n\n\nSubsequently, the game is played as follows. 3 Stones is a strategy board game akin to tic-tac-toe. Your version of this game will have the client play the first stone onto the modified board (see bottom of document), and then the server and client will alternate playing stones. Each will try to score more points than the opponent by the end of the game, which occurs when all stones have been used. The client starts with 15 white stones and the server starts with 15 black stones. At the end of the game the client must display a message showing the 2 scores and who the winner is, or whether a draw occurred. The server is responsible for all of the scoring logic.\n\n\nAdditional rules:\n\n\na stone placement scores 1 point for EVERY three-stones-in-a-line that it completes, vertical and/or horizontal and/or diagonal\nthe first stone may be played in any slot\nany other stone must be played into an empty slot that is either in the same row or the same column as the last stone played\nif there are empty slots neither in the same row nor in the same column as the last stone played, the next stone may be played in any empty slot\nslots on opposite sides of the center are considered to be part of the same row or column for the purposes of next-stone placement; however, three-stones-in-a-line cannot be scored through the centre.\n\n\nFeatures:\n\n\nvisually highlight the last stone played\nconsider using an 11 x 11 array to represent the board\ndo not expect your server to play a perfect game; use brute force logic to examine all possibilities for the server\u2019s stone placement, evaluate the point score of each, and then pick the placement that gets the server the most points\nfor a more intelligent server, in addition to the above point, examine the same possibilities but evaluate how many white points are blocked by the placement, and then pick the placement that has maximum(black-points-scored, white-points-blocked) points; if the maximum is 0, pick a random empty slot, or an empty slot beside one of the server\u2019s played stones, or an empty slot at a \u2018good\u2019 position on the board, or . . .\nconsider other intelligent algorithms\nif the server may play in any empty slot, the simplest choice is to search for the first free slot or a random empty slot; a more intelligent choice would be to pick a free slot near an existing server stone, or . . .\n\n\nWhen programming 3 Stones, use data structures and algorithms that are as simple and clear as possible.\n\n\nYou must follow the principles of object oriented design, and have an up-to-date UML class association diagram available for inspection by your instructor whenever you are working on the project.\n\n\nFinal documentation (per team) will consist of:\n\n\n\n\na program narrative\n\n\nthe class association diagram\n\n\nsource listings of the client program and the server program, both of which are to include good explanatory comments; on the day that you submit your documentation, you must also email your source code to your instructor\n\n\nall of the above in an appropriate binder.\n\n\n\n\n3 Stones Game Description\n\n\nhe object of the game is to score points by getting stones of your color into three pockets in a row, be it across, up and down, or diagonally. There are black and white stones for the players and clear stones that count for both players.\n\n\nThe game can be played with an element of luck, drawing stones from a bag, or as pure skill with each player taking equal amounts of the colored stones. Timed tournament play and handicapping is also an option.", 
            "title": "Assignment1"
        }, 
        {
            "location": "/Data-Communications/assignments/assignment1/#data-communications-and-networking", 
            "text": "1\n2 PROJECT\nWRITING TCP CLIENT AND SERVER SOFTWARE - 3 STONES   A. Simonelis  Due/Demos \u2013 Oct 24 and 26  Docs: Oct 27, 2017  You will work in assigned groups. Each group will demonstrate its work, as specified by your instructor. All group members must be present at the demonstration. All members of a group are expected to contribute more or less equally to the project, and to be familiar with all of the work of the project.  Each team will write a client-server TCP-based system in Java that will allow a person using the client to play game(s) of 3 Stones with the computer server.  At initiation, the server software will display its IP address. The client will allow the user to input the IP address of the server. The machines will then connect to begin the session, after which:   the client program will allow the user to start a game, or to quit the client; the client will allow the user the same two choices at the end of each game; it is desirable, but not essential, for the client to support a feature that allows the user to quit the client at any time, via the mouse or the keyboard;  the server will continue servicing the client that began the session until the client terminates the session by closing the socket, at which point the server will resume listening for new clients (i.e. the server will be an iterative server, servicing one client at a time).   Both the client and the server are to display appropriate messages while running. The client will display the game board while a game is in progress. Your display may be either GUI or text based.  Your 3S protocol will have the server listening on port  50,000 .   All 3S messages must be fixed-length, multibyte packets. Design your packet layout carefully.  A 3S session consists of zero or more games.  The client initiates a game by sending the server a request-game-start message (e.g.  0x00000000 ). The server replies with a game-start message (e.g.  0x0000000A ), after which the client draws the board, . . .   Subsequently, the game is played as follows. 3 Stones is a strategy board game akin to tic-tac-toe. Your version of this game will have the client play the first stone onto the modified board (see bottom of document), and then the server and client will alternate playing stones. Each will try to score more points than the opponent by the end of the game, which occurs when all stones have been used. The client starts with 15 white stones and the server starts with 15 black stones. At the end of the game the client must display a message showing the 2 scores and who the winner is, or whether a draw occurred. The server is responsible for all of the scoring logic.", 
            "title": "DATA COMMUNICATIONS AND NETWORKING"
        }, 
        {
            "location": "/Data-Communications/assignments/assignment1/#additional-rules", 
            "text": "a stone placement scores 1 point for EVERY three-stones-in-a-line that it completes, vertical and/or horizontal and/or diagonal\nthe first stone may be played in any slot\nany other stone must be played into an empty slot that is either in the same row or the same column as the last stone played\nif there are empty slots neither in the same row nor in the same column as the last stone played, the next stone may be played in any empty slot\nslots on opposite sides of the center are considered to be part of the same row or column for the purposes of next-stone placement; however, three-stones-in-a-line cannot be scored through the centre.", 
            "title": "Additional rules:"
        }, 
        {
            "location": "/Data-Communications/assignments/assignment1/#features", 
            "text": "visually highlight the last stone played\nconsider using an 11 x 11 array to represent the board\ndo not expect your server to play a perfect game; use brute force logic to examine all possibilities for the server\u2019s stone placement, evaluate the point score of each, and then pick the placement that gets the server the most points\nfor a more intelligent server, in addition to the above point, examine the same possibilities but evaluate how many white points are blocked by the placement, and then pick the placement that has maximum(black-points-scored, white-points-blocked) points; if the maximum is 0, pick a random empty slot, or an empty slot beside one of the server\u2019s played stones, or an empty slot at a \u2018good\u2019 position on the board, or . . .\nconsider other intelligent algorithms\nif the server may play in any empty slot, the simplest choice is to search for the first free slot or a random empty slot; a more intelligent choice would be to pick a free slot near an existing server stone, or . . .  When programming 3 Stones, use data structures and algorithms that are as simple and clear as possible.  You must follow the principles of object oriented design, and have an up-to-date UML class association diagram available for inspection by your instructor whenever you are working on the project.  Final documentation (per team) will consist of:   a program narrative  the class association diagram  source listings of the client program and the server program, both of which are to include good explanatory comments; on the day that you submit your documentation, you must also email your source code to your instructor  all of the above in an appropriate binder.", 
            "title": "Features:"
        }, 
        {
            "location": "/Data-Communications/assignments/assignment1/#3-stones-game-description", 
            "text": "he object of the game is to score points by getting stones of your color into three pockets in a row, be it across, up and down, or diagonally. There are black and white stones for the players and clear stones that count for both players.  The game can be played with an element of luck, drawing stones from a bag, or as pure skill with each player taking equal amounts of the colored stones. Timed tournament play and handicapping is also an option.", 
            "title": "3 Stones Game Description"
        }, 
        {
            "location": "/Data-Communications/assignments/assignment2/", 
            "text": "framing-parsing\n\n\nWriting TCP Client and Server Software Framing and Parsing\n\n\nDue: November 17, 2017\n\n\nOverview\n\n\nThis project normally has specs as shown on the following pages. In order to save time, you will do this project in an abbreviated form.\n\n\n\n\n\n\n Read the following pages carefully. Examine the \ndoubleToByteArray\n and the \nbyteArrayToDouble\n methods, in the \nDoubleToBytes\n class in the course subdirectory, carefully.\n\n\n\n\n\n\n Answer the question posed in the specs regarding byte reversal. Note that the answer must be one sentence.\n\n\n\n\n\n\n Answer the following question in one sentence: in the \nbyteArrayToDouble\n method, why is it necessary to zero out the most significant seven bytes of the long into which each array byte is cast, before shifting and ORing it with the others to produce the final long result? \n\n\n\n\n\n\nFinal documentation (per team) will consist of:\n\n\n\n\na title page\n\n\nyour answer to the byte reversal question\n\n\nyour answer to the second question\n\n\nall of the above in an appropriate binder.\n\n\n\n\nMore details\n\n\nYou will work in assigned groups. All members of a group are expected to contribute more or less equally to the project and to be familiar with all of the work of the project. All group members must be present at the demonstration.\n\n\nEach team will write a client-server TCP-based system in Java that implements the Add 1 (A1) protocol. It will allow a person using the client to send a block consisting of one double item and one int item to the server, have the server process the items by adding 1.0 to the double and 1 to the int, and then have the server send the modified block back to the client.\n\n\nThe client will allow the user to input the IP address of the server. The machines will then connect to begin the session, after which:\n\n\n\n\n\n\n the client program will allow the user to enter the double value and the int value, or to quit the client; the client will allow the user the same two choices after the server sends back the modified block\n\n\n\n\n\n\n the server will continue servicing the client that began the session until the client terminates the session by closing the socket, at which point the server will resume listening for new clients (i.e. the server will be an iterative server, servicing one client at a time).\n\n\n\n\n\n\n Both the client and the server are to display appropriate messages while running and the information sent and received while a session is in progress.\n\n\n\n\n\n\n Your A1 protocol will have the server listening on port \n51,000\n.\n\n\n\n\n\n\n All A1 blocks consist of one double item and one int item.\n\n\n\n\n\n\n An A1 session consists of zero or more blocks exchanged.\n\n\n\n\n\n\n The client initiates a session by sending the server a block. The server processes the block by adding 1.0 to the double item and 1 to the int item, and sends back the modified block, after which the client can send another block, etc.\n\n\n\n\n\n\nBecause Java TCP sockets send and receive arrays of bytes, your protocol will have to chop the double and the int into bytes, before sending a block. Similarly, it will have to re-assemble the double and the int at the receiving end. The chopping and re-assembling can be accomplished in 2 ways:\n\n\n\n\n\n\nuse convenient, existing Java classes, interfaces and methods (e.g. \nwriteShort()\n of \nDataOutput\n, \nDataOutputStream\n, \nBufferedOutputStream\n,  \nOutputStream\n, \nsocket.getOutputStream()\n, and \nreadShort\n of \nDataInput\n, etc.)\n\n\n\n\n\n\nhave your own code perform the tasks (e.g. write methods such as \ndoubleToByteArray()\n (that will use \nDouble.doubleToRawLongBits()\n to take a double and access it as a long, then right-shift and cast to isolate the bytes of the long) and b\nyteArrayToDouble()\n (that will do the reverse: cast a byte to long, zero out the high-order 56 bits using \n, left-shift to the proper position, combine to form the \nlong\n using |, use \nDouble.longBitsToDouble()\n to get the original double from the \nlong\n)). See the file \nDoubleToBytes.java\n in the course subdirectory on the server for much of the needed code.\n\n\n\n\n\n\nYou must also consider the following when sending multi-byte data types. The architecture of a CPU is either little-endian or big-endian; some modern CPUs allow a choice via software. A big-endian CPU will store a multi-byte data type into memory with the most significant byte at the lowest address in RAM, etc. A little-endian CPU will store a multi-byte data type into memory with the least significant byte at the lowest address in RAM, etc. Assume that an int with a value of \n0x12345678\n is stored at address \n0\n. That int would be stored as follows:\n\n\n\n\n\n\n\n\nAddress\n\n\n00\n\n\n01\n\n\n02\n\n\n03\n\n\n\n\n\n\n\n\n\n\nbig-endian\n\n\n12\n\n\n34\n\n\n56\n\n\n78\n\n\n\n\n\n\nsmall-endian\n\n\n78\n\n\n56\n\n\n34\n\n\n12\n\n\n\n\n\n\n\n\nThe TCP/IP protocol standard specifies that all the bytes that make up an item must be sent in \u2018network order\u2019, which happens to be big-endian. Intel Pentium CPUs are little-endian; many other CPUs are big-endian. This implies that, on an Intel machine, your software would normally have to chop an int into bytes, and then reverse the bytes before transmitting them. However, your Java software does not need to perform the reversal. \n\n\n\n\nHint\n\n\nConsider the machines involved in your system\n\n\n\n\n\n\n\n\n Additionally, your protocol will have to frame the data before sending the message (i.e. it will have to ensure that every data item is either fixed-length and in the appropriate position, or is variable-length and either prefixed with a count, or ended with a delimiter), so that all items can be properly identified by the receiver. Since your protocol transmits two fixed-length items, framing will not be a concern.\n\n\n\n\n\n\n At the receiving end, the protocol will have to parse the data (i.e. it will have to access the correct number of bytes, starting at the correct position, for each item before assembling those bytes into that item\u2019s data type).\n\n\n\n\n\n\nIt should be clear that accuracy in framing and parsing is absolutely essential to the proper operation of a protocol.\n\n\nFinal documentation (per team) will consist of:\n\n\n\n\na title page\n\n\nsource listings of the client program and the server program, both of which are to include explanatory comments; on the day that you submit your documentation, you must also email your source code to your instructor\n\n\nall of the above in an appropriate binder.", 
            "title": "Assignment2"
        }, 
        {
            "location": "/Data-Communications/assignments/assignment2/#framing-parsing", 
            "text": "Writing TCP Client and Server Software Framing and Parsing  Due: November 17, 2017", 
            "title": "framing-parsing"
        }, 
        {
            "location": "/Data-Communications/assignments/assignment2/#overview", 
            "text": "This project normally has specs as shown on the following pages. In order to save time, you will do this project in an abbreviated form.     Read the following pages carefully. Examine the  doubleToByteArray  and the  byteArrayToDouble  methods, in the  DoubleToBytes  class in the course subdirectory, carefully.     Answer the question posed in the specs regarding byte reversal. Note that the answer must be one sentence.     Answer the following question in one sentence: in the  byteArrayToDouble  method, why is it necessary to zero out the most significant seven bytes of the long into which each array byte is cast, before shifting and ORing it with the others to produce the final long result?     Final documentation (per team) will consist of:   a title page  your answer to the byte reversal question  your answer to the second question  all of the above in an appropriate binder.", 
            "title": "Overview"
        }, 
        {
            "location": "/Data-Communications/assignments/assignment2/#more-details", 
            "text": "You will work in assigned groups. All members of a group are expected to contribute more or less equally to the project and to be familiar with all of the work of the project. All group members must be present at the demonstration.  Each team will write a client-server TCP-based system in Java that implements the Add 1 (A1) protocol. It will allow a person using the client to send a block consisting of one double item and one int item to the server, have the server process the items by adding 1.0 to the double and 1 to the int, and then have the server send the modified block back to the client.  The client will allow the user to input the IP address of the server. The machines will then connect to begin the session, after which:     the client program will allow the user to enter the double value and the int value, or to quit the client; the client will allow the user the same two choices after the server sends back the modified block     the server will continue servicing the client that began the session until the client terminates the session by closing the socket, at which point the server will resume listening for new clients (i.e. the server will be an iterative server, servicing one client at a time).     Both the client and the server are to display appropriate messages while running and the information sent and received while a session is in progress.     Your A1 protocol will have the server listening on port  51,000 .     All A1 blocks consist of one double item and one int item.     An A1 session consists of zero or more blocks exchanged.     The client initiates a session by sending the server a block. The server processes the block by adding 1.0 to the double item and 1 to the int item, and sends back the modified block, after which the client can send another block, etc.    Because Java TCP sockets send and receive arrays of bytes, your protocol will have to chop the double and the int into bytes, before sending a block. Similarly, it will have to re-assemble the double and the int at the receiving end. The chopping and re-assembling can be accomplished in 2 ways:    use convenient, existing Java classes, interfaces and methods (e.g.  writeShort()  of  DataOutput ,  DataOutputStream ,  BufferedOutputStream ,   OutputStream ,  socket.getOutputStream() , and  readShort  of  DataInput , etc.)    have your own code perform the tasks (e.g. write methods such as  doubleToByteArray()  (that will use  Double.doubleToRawLongBits()  to take a double and access it as a long, then right-shift and cast to isolate the bytes of the long) and b yteArrayToDouble()  (that will do the reverse: cast a byte to long, zero out the high-order 56 bits using  , left-shift to the proper position, combine to form the  long  using |, use  Double.longBitsToDouble()  to get the original double from the  long )). See the file  DoubleToBytes.java  in the course subdirectory on the server for much of the needed code.    You must also consider the following when sending multi-byte data types. The architecture of a CPU is either little-endian or big-endian; some modern CPUs allow a choice via software. A big-endian CPU will store a multi-byte data type into memory with the most significant byte at the lowest address in RAM, etc. A little-endian CPU will store a multi-byte data type into memory with the least significant byte at the lowest address in RAM, etc. Assume that an int with a value of  0x12345678  is stored at address  0 . That int would be stored as follows:     Address  00  01  02  03      big-endian  12  34  56  78    small-endian  78  56  34  12     The TCP/IP protocol standard specifies that all the bytes that make up an item must be sent in \u2018network order\u2019, which happens to be big-endian. Intel Pentium CPUs are little-endian; many other CPUs are big-endian. This implies that, on an Intel machine, your software would normally have to chop an int into bytes, and then reverse the bytes before transmitting them. However, your Java software does not need to perform the reversal.    Hint  Consider the machines involved in your system      Additionally, your protocol will have to frame the data before sending the message (i.e. it will have to ensure that every data item is either fixed-length and in the appropriate position, or is variable-length and either prefixed with a count, or ended with a delimiter), so that all items can be properly identified by the receiver. Since your protocol transmits two fixed-length items, framing will not be a concern.     At the receiving end, the protocol will have to parse the data (i.e. it will have to access the correct number of bytes, starting at the correct position, for each item before assembling those bytes into that item\u2019s data type).    It should be clear that accuracy in framing and parsing is absolutely essential to the proper operation of a protocol.  Final documentation (per team) will consist of:   a title page  source listings of the client program and the server program, both of which are to include explanatory comments; on the day that you submit your documentation, you must also email your source code to your instructor  all of the above in an appropriate binder.", 
            "title": "More details"
        }, 
        {
            "location": "/Data-Communications/assignments/program-narative/", 
            "text": "Program Narrative\n\n\nThe object of a 3 Stones game is to score the most points by getting as many three stones of your color in a horizontal, vertical or diagonal line. \n\n\nEvery turn you must play a stone in the same row or column as the last piece played. If there is no available space, you are allowed to play in any other slot available.\n\n\nTo begin, the client will establish a connection to the server by entering the ip address and the port number. This will let the server know that the player is ready to start a new game. The server will respond that they are also ready to begin. \n\n\nThe player makes the first move and sends their row and column position to the server, which has an inner board that logs the position and type of each move. The server will know that it is their turn to place a piece on the board. This will loop until every slot is filled (30 moves).\n\n\nWhen it is the AI's turn to make a move, the AI will look for all valid moves that will result in the highest possible points. Every time a piece is added to the board, the total score of each player is added up as well.\n\n\nWhen the client receives the computer's move, it updates its own board and displays it to the player. At the end of the game, the winner is announced and the scores are shown. The client will ask if the player would like to play again, and if they do, a new game session will begin. Otherwise the session will end and the client will close the connection to the server.", 
            "title": "Program narative"
        }, 
        {
            "location": "/Data-Communications/assignments/program-narative/#program-narrative", 
            "text": "The object of a 3 Stones game is to score the most points by getting as many three stones of your color in a horizontal, vertical or diagonal line.   Every turn you must play a stone in the same row or column as the last piece played. If there is no available space, you are allowed to play in any other slot available.  To begin, the client will establish a connection to the server by entering the ip address and the port number. This will let the server know that the player is ready to start a new game. The server will respond that they are also ready to begin.   The player makes the first move and sends their row and column position to the server, which has an inner board that logs the position and type of each move. The server will know that it is their turn to place a piece on the board. This will loop until every slot is filled (30 moves).  When it is the AI's turn to make a move, the AI will look for all valid moves that will result in the highest possible points. Every time a piece is added to the board, the total score of each player is added up as well.  When the client receives the computer's move, it updates its own board and displays it to the player. At the end of the game, the winner is announced and the scores are shown. The client will ask if the player would like to play again, and if they do, a new game session will begin. Otherwise the session will end and the client will close the connection to the server.", 
            "title": "Program Narrative"
        }, 
        {
            "location": "/Internet-App-Dev-III/01-Introduction/", 
            "text": "Introduction\n\n\nWe will have three projects. One a web scraping one, one a speed reading (heavy js) and a combined android/php web app for students.\n\n\nHistory\n\n\n\n\n1996 - PHP first release\n\n\nPerl, C\n\n\n\n\n\n\nLarabel -\n really popular\n\n\n2017 - PHP 7.1\n~ 00 - Java\n\n\n\n\nClient side\n\n\n\n\nWeb browser\n\n\nHTML\n\n\nCSS\n\n\nJS\n\n\n\n\nServer side\n\n\n\n\nDatabase (ex: Oracle)\n\n\nMySQL\n\n\nPostgres (using this one)\n\n\n\n\nWeb Server\n\n\n\n\nIIS (ASP.NET)\n\n\nApache\n\n\nNGING (using this one)\n\n\n\n\nNGinx will tell the PHP interpreter to interpret the file, and the interpreter will create an html based on the request.\n\n\nDevelopment Environment\n\n\n\n\nVirtual Machine\n\n\nLinux Ubuntu\n\n\nNGINX\n\n\npostgres\n\n\n\n\nLab and Home setup\n\n\n\n\nVagrant\n\n\nPreprovision VM so that each vagrant box is exactly the same\n\n\n\n\n\n\nHomestead\n\n\nVagrant box preprovisioned with recommended \"Stack\" for \nphp-laravel\n, which has above\n\n\n\n\n\n\nDocker\n\n\nLighter than the Vagrant engine\n\n\nHowever, only available on Windows 10 and we have systems in Windows 7 \ud83d\ude22\n\n\n\n\n\n\n\n\nThis will all be completely headless (no GUI).\n\n\nHello PHP\n\n\nexample 1 - \nHTML \n PHP embedded index.php \n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n!DOCTYPE html\n\n\nhtml\n\n\n    \nhead\n\n\n    \n/head\n\n\n    \nbody\n\n\n        \np\n Plain HTML \n/p\n\n\n        \np\n\n\n            \n?php\n \necho\n \nHello World\n;\n \n?\n\n\n        \n/p\n\n\n    \n/body\n\n\n\n\n\n\n\nexample 2 - \nOnly PHP\n\n\n1\n2\n3\n4\n?php\n \n    \necho\n \n!DOCTYPE html\n;\n\n    \necho\n \nhtml\n;\n\n\n?\n\n\n\n\n\n\n\nVariables\n\n\n\n\nWeakly typed =\n \nNo decorations\n\n\n\n\n| Datatypes |\n| interger |\n| floatingpoint |\n| string |\n| boolean |\n| array |\n\n\nVariable Naming\n\n\n\n\nStart with $\n\n\nnext char must be letter or _\n\n\nonly alphanumeric and _\n\n\ncase sensitive (\nexcept functions\n)\n\n\n\n\nexample 3 - \nUsing Variables\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n?php\n \n    \n$quantity\n \n=\n \n50\n;\n\n    \n$price\n \n=\n \n119.50\n;\n\n    \n$tax\n \n=\n \n0.01\n;\n\n    \n$total\n \n=\n \n(\n$quantity\n \n*\n \n$price\n)\n \n*\n \n(\n1\n \n+\n \n$tax\n);\n\n    \n$total\n \n=\n \nnumber_format\n(\n$total\n,\n2\n);\n\n    \necho\n \np\nThe total is \n.\n$total\n.\n/p\n\n\n?\n\n\n\n\n\n\n\nOperators\n\n\n\n\n*\n \n/\n \n%\n\n\n++\n \n--\n\n\n+\n \n-\n\n\n**\n (power)\n\n\n=\n\n\n+=\n\n\n.=\n (concatenation)\n\n\n\n\n|\n\n\nxor\n (exclusive or)\n\n\n==\n equals (value)\n\n\n===\n identity (value and type)\n\n\n!=\n \n\n\n!==\n\n\n \n\n\n= \n=\n \n\n\n==\n like compareto, negative 0 positive\n\n\n??\n null \n\n\n\n\n\n\nLesson 2 [August 25]\n\n\n\n\n\n\n\n\nDisplay \n write to http response message\n\n\n\n\n\n\necho $num1, $num2\n\n\n\n\nlanguage construct\n\n\nno return -\n slightly more efficient than\n\n\n\n\n\n\nprint $num;\n\n\nlanguage construct\n\n\n1 param only\n\n\nalways returns 1\n\n\n\n\n\n\nvar_dump($value)\n \n detailed dump of the variable (type, contents)\n\n\n\n\nType Juggling\n\n\n\n\nscalar type\n\n\nnumerics\n\n\nboolean\n\n\nstring\n\n\n\n\n\n\n\n\nnumeric\n \n \nstring\n:\n\n\nexample 4: substr()\n\n\n1\n2\n$num = 12345 * 100;\n\n\necho substr($num,3,1)\n\n\n\n\n\n\n\nsubstr(var,startIndex,lengthWanted)\n\n\n\n\nCan go from number to string\n\n\nGoing to a string to a number is also done automatically, but less straightforward.\n\n\n\n\nString\n \n \nNumeric\n\n\n\n\nIf \nstring\n starts with value numeric data, that part will be converted\n\n\nElse \n converts to \n0\n\n\n\n\nValid numeric data\n- no . or E and fits in \nPHP_INT_MAX\n =\n converts to \nint\n\n- otherwise \nfloat\n\n\nexample 5: number + string\n\n\n1\n2\n3\n4\n5\n6\n7\n// + is arithmetic operator\n\n\n// \n10.5\n converted\n\n\n$num = 1 + \n10.5\n;      // = 11.5\n\n\n$num = 1 + \n1.3e3\n;     // = 1301 float\n\n\n$num = 1 + \nbob 3\n;     // = 1\n\n\n$num = 1 + \n10pigs\n;    // = 11\n\n\n$num = 1 + \n10pigs10\n;  // = 11\n\n\n\n\n\n\n\nString conersion when treating a variable as a string\n\n1\necho $num, // string parameter\n\n\n\n\n\nnumeric to string\n* boolean to string\n    - true TRUE is converted to \"1\"\n    - false is converted to \"\"\n* array to string\n    - \"Array\"\n* object to string\n    - __toString invoked if exists, else \"Object\"\n\n\nString literals and Variables\n\n\n\n\n'hello'\n \n single quote\n\n\npreserves content\n\n\nonly 2 escape sequences \n\\\\\n \n\\\n\n\nmost performant\n\n\n\n\n\n\nhello\n \n doublequotes\n\n\nmany escape sequences \n\\n\n \n\\t\n \n\\$\n\n\nvariable interpolation\n\n\nexpanded to its value\n\n\n\n\n\n\nless performant\n\n\n\n\n\n\n\n\nexample 6: single vs double quotes\n\n\n1\n2\n3\n4\n$user = \nJaya\n;\n\n\necho \nHi $user\n; // Hi $user\n\n\necho \nHi $user\n; // Hi Jaya\n\n\necho \nHi\n, $user;\n\n\n\n\n\n\n\nVariable rules\n\n\n\n\nnever declared\n\n\ndo not have to be initialized\n\n\ndefault value depending on the context\n\n\n\n\n\n\n\n\nexample 7: uninitialialized variable behaviour\n\n\n1\n2\n3\n4\n5\n6\n7\nif ($test); // $test not initialied then FALSE\n\n\n\n$num = 1 + $test // numeric is 0\n\n\n\necho $test // \n\n\n\n$test[0] // array is empty array\n\n\n\n\n\n\n\nexample 8: initialized variable behaviour\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n$juice = \napple\n;\n\n\n$beverage = \njuice\n;\n\n\necho \nI drank $juice juice\n; // I drank apple juice\n\n\n\n// $juices is not an initialized variable =\n \n\n\necho \nI drank juice made of $juices\n;\n\n\n\n// Variable, no spaces\n\n\necho \nI drank ... {$juice}s\n;\n\n\n\n// You can have $ outside the brackets and\n\n\n// have a more complex expression inside them.\n\n\n// You could have it evaluate to string \n\n\n// =\n name of variable\n\n\necho \nI drank ... ${juice}s\n\n\n\necho \nI drank ${$beverage}s\n // I drank apples\n\n\necho \nI drank $$beverage\n // I drank apple\n\n\n\n\n\n\n\nDOC\n\n\n\n\nsingle quote\n\n\ndouble quote\n\n\nHEREDOC \n long double quoted string\n\n\nNOWDOC \n long single quoted string\n\n\n\n\nexample 9: DOC\n\n\n1\n2\n3\n4\n5\n6\n$str = \n DOC // name the string\n\n\n    --------\\t // string content after\n\n\n    --------\\n // name of the string\n\n\n    --stuff-\n\n\nDOC; // has to be separate line alone\n\n\n// end with name of Heredoc\n\n\n\n\n\n\n\nexample 10: DOC with single quotes\n\n\n1\n2\n3\n4\n$str = \nDOC\n // NOWDOC has single quotes\n\n\n    ----\n\n\n    ----\n\n\nDOC;\n\n\n\n\n\n\n\nManipulating string\n\n\n\n\n0 indexed\n\n\naccess like a numerically indexed array\n\n\n$str[10]\n returns string with 11\nth\n charater read\n\n\n$str[100000]\n warning string offset\n\n\nwrite is padded with space until reach character\n\n\n\n\n\n\n\n\nString functions\n\n\n\n\nstrcmp ($str1, $str2)\n -- dictionary order\n\n\ntrim\n\n\nstrlen\n\n\nstrtolower\n\n\nsubstr\n\n\nucwords\n\n\n\n\nCompare String with numeric\n\n\n\n\n==\n, \n!=\n, \n \n type juggling\n\n\n, \n=\n, \n, \n=\n \n type juggling\n\n\n===\n, \n!==\n \n identical\n\n\n\n\nexample 11\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nA54321\n \n \n5670X\n // TRUE\n\n\n// both have non-numeric\n\n\n// compare with dictionary order\n\n\n\n54321\n \n \n5678\n // TRUE (both are numeric)\n\n\n\n6 cards\n \n \n55 cards\n // TRUE\n\n\n// both haven non-numeric\n\n\n// compare with dictionary order\n\n\n\n6cards\n \n 55 // type juggling =\n FALSE", 
            "title": "01 Introduction"
        }, 
        {
            "location": "/Internet-App-Dev-III/01-Introduction/#introduction", 
            "text": "We will have three projects. One a web scraping one, one a speed reading (heavy js) and a combined android/php web app for students.", 
            "title": "Introduction"
        }, 
        {
            "location": "/Internet-App-Dev-III/01-Introduction/#history", 
            "text": "1996 - PHP first release  Perl, C    Larabel -  really popular  2017 - PHP 7.1\n~ 00 - Java", 
            "title": "History"
        }, 
        {
            "location": "/Internet-App-Dev-III/01-Introduction/#client-side", 
            "text": "Web browser  HTML  CSS  JS", 
            "title": "Client side"
        }, 
        {
            "location": "/Internet-App-Dev-III/01-Introduction/#server-side", 
            "text": "Database (ex: Oracle)  MySQL  Postgres (using this one)", 
            "title": "Server side"
        }, 
        {
            "location": "/Internet-App-Dev-III/01-Introduction/#web-server", 
            "text": "IIS (ASP.NET)  Apache  NGING (using this one)   NGinx will tell the PHP interpreter to interpret the file, and the interpreter will create an html based on the request.", 
            "title": "Web Server"
        }, 
        {
            "location": "/Internet-App-Dev-III/01-Introduction/#development-environment", 
            "text": "Virtual Machine  Linux Ubuntu  NGINX  postgres", 
            "title": "Development Environment"
        }, 
        {
            "location": "/Internet-App-Dev-III/01-Introduction/#lab-and-home-setup", 
            "text": "Vagrant  Preprovision VM so that each vagrant box is exactly the same    Homestead  Vagrant box preprovisioned with recommended \"Stack\" for  php-laravel , which has above    Docker  Lighter than the Vagrant engine  However, only available on Windows 10 and we have systems in Windows 7 \ud83d\ude22     This will all be completely headless (no GUI).", 
            "title": "Lab and Home setup"
        }, 
        {
            "location": "/Internet-App-Dev-III/01-Introduction/#hello-php", 
            "text": "", 
            "title": "Hello PHP"
        }, 
        {
            "location": "/Internet-App-Dev-III/01-Introduction/#example-1-html-php-embedded-indexphp", 
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 !DOCTYPE html  html       head       /head       body           p  Plain HTML  /p           p               ?php   echo   Hello World ;   ?           /p       /body", 
            "title": "example 1 - HTML &amp; PHP embedded index.php "
        }, 
        {
            "location": "/Internet-App-Dev-III/01-Introduction/#example-2-only-php", 
            "text": "1\n2\n3\n4 ?php  \n     echo   !DOCTYPE html ; \n     echo   html ;  ?", 
            "title": "example 2 - Only PHP"
        }, 
        {
            "location": "/Internet-App-Dev-III/01-Introduction/#variables", 
            "text": "Weakly typed =   No decorations   | Datatypes |\n| interger |\n| floatingpoint |\n| string |\n| boolean |\n| array |", 
            "title": "Variables"
        }, 
        {
            "location": "/Internet-App-Dev-III/01-Introduction/#variable-naming", 
            "text": "Start with $  next char must be letter or _  only alphanumeric and _  case sensitive ( except functions )", 
            "title": "Variable Naming"
        }, 
        {
            "location": "/Internet-App-Dev-III/01-Introduction/#example-3-using-variables", 
            "text": "1\n2\n3\n4\n5\n6\n7\n8 ?php  \n     $quantity   =   50 ; \n     $price   =   119.50 ; \n     $tax   =   0.01 ; \n     $total   =   ( $quantity   *   $price )   *   ( 1   +   $tax ); \n     $total   =   number_format ( $total , 2 ); \n     echo   p The total is  . $total . /p  ?", 
            "title": "example 3 - Using Variables"
        }, 
        {
            "location": "/Internet-App-Dev-III/01-Introduction/#operators", 
            "text": "*   /   %  ++   --  +   -  **  (power)  =  +=  .=  (concatenation)   |  xor  (exclusive or)  ==  equals (value)  ===  identity (value and type)  !=    !==     =  =    ==  like compareto, negative 0 positive  ??  null     Lesson 2 [August 25]     Display   write to http response message    echo $num1, $num2   language construct  no return -  slightly more efficient than    print $num;  language construct  1 param only  always returns 1    var_dump($value)    detailed dump of the variable (type, contents)", 
            "title": "Operators"
        }, 
        {
            "location": "/Internet-App-Dev-III/01-Introduction/#type-juggling", 
            "text": "scalar type  numerics  boolean  string", 
            "title": "Type Juggling"
        }, 
        {
            "location": "/Internet-App-Dev-III/01-Introduction/#numeric-string", 
            "text": "", 
            "title": "numeric --&gt; string:"
        }, 
        {
            "location": "/Internet-App-Dev-III/01-Introduction/#example-4-substr", 
            "text": "1\n2 $num = 12345 * 100;  echo substr($num,3,1)    substr(var,startIndex,lengthWanted)   Can go from number to string  Going to a string to a number is also done automatically, but less straightforward.", 
            "title": "example 4: substr()"
        }, 
        {
            "location": "/Internet-App-Dev-III/01-Introduction/#string-numeric", 
            "text": "If  string  starts with value numeric data, that part will be converted  Else   converts to  0   Valid numeric data\n- no . or E and fits in  PHP_INT_MAX  =  converts to  int \n- otherwise  float", 
            "title": "String --&gt; Numeric"
        }, 
        {
            "location": "/Internet-App-Dev-III/01-Introduction/#example-5-number-string", 
            "text": "1\n2\n3\n4\n5\n6\n7 // + is arithmetic operator  //  10.5  converted  $num = 1 +  10.5 ;      // = 11.5  $num = 1 +  1.3e3 ;     // = 1301 float  $num = 1 +  bob 3 ;     // = 1  $num = 1 +  10pigs ;    // = 11  $num = 1 +  10pigs10 ;  // = 11    String conersion when treating a variable as a string 1 echo $num, // string parameter   \nnumeric to string\n* boolean to string\n    - true TRUE is converted to \"1\"\n    - false is converted to \"\"\n* array to string\n    - \"Array\"\n* object to string\n    - __toString invoked if exists, else \"Object\"", 
            "title": "example 5: number + string"
        }, 
        {
            "location": "/Internet-App-Dev-III/01-Introduction/#string-literals-and-variables", 
            "text": "'hello'    single quote  preserves content  only 2 escape sequences  \\\\   \\  most performant    hello    doublequotes  many escape sequences  \\n   \\t   \\$  variable interpolation  expanded to its value    less performant", 
            "title": "String literals and Variables"
        }, 
        {
            "location": "/Internet-App-Dev-III/01-Introduction/#example-6-single-vs-double-quotes", 
            "text": "1\n2\n3\n4 $user =  Jaya ;  echo  Hi $user ; // Hi $user  echo  Hi $user ; // Hi Jaya  echo  Hi , $user;", 
            "title": "example 6: single vs double quotes"
        }, 
        {
            "location": "/Internet-App-Dev-III/01-Introduction/#variable-rules", 
            "text": "never declared  do not have to be initialized  default value depending on the context", 
            "title": "Variable rules"
        }, 
        {
            "location": "/Internet-App-Dev-III/01-Introduction/#example-7-uninitialialized-variable-behaviour", 
            "text": "1\n2\n3\n4\n5\n6\n7 if ($test); // $test not initialied then FALSE  $num = 1 + $test // numeric is 0  echo $test //   $test[0] // array is empty array", 
            "title": "example 7: uninitialialized variable behaviour"
        }, 
        {
            "location": "/Internet-App-Dev-III/01-Introduction/#example-8-initialized-variable-behaviour", 
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 $juice =  apple ;  $beverage =  juice ;  echo  I drank $juice juice ; // I drank apple juice  // $juices is not an initialized variable =    echo  I drank juice made of $juices ;  // Variable, no spaces  echo  I drank ... {$juice}s ;  // You can have $ outside the brackets and  // have a more complex expression inside them.  // You could have it evaluate to string   // =  name of variable  echo  I drank ... ${juice}s  echo  I drank ${$beverage}s  // I drank apples  echo  I drank $$beverage  // I drank apple", 
            "title": "example 8: initialized variable behaviour"
        }, 
        {
            "location": "/Internet-App-Dev-III/01-Introduction/#doc", 
            "text": "single quote  double quote  HEREDOC   long double quoted string  NOWDOC   long single quoted string", 
            "title": "DOC"
        }, 
        {
            "location": "/Internet-App-Dev-III/01-Introduction/#example-9-doc", 
            "text": "1\n2\n3\n4\n5\n6 $str =   DOC // name the string      --------\\t // string content after      --------\\n // name of the string      --stuff-  DOC; // has to be separate line alone  // end with name of Heredoc", 
            "title": "example 9: DOC"
        }, 
        {
            "location": "/Internet-App-Dev-III/01-Introduction/#example-10-doc-with-single-quotes", 
            "text": "1\n2\n3\n4 $str =  DOC  // NOWDOC has single quotes      ----      ----  DOC;", 
            "title": "example 10: DOC with single quotes"
        }, 
        {
            "location": "/Internet-App-Dev-III/01-Introduction/#manipulating-string", 
            "text": "0 indexed  access like a numerically indexed array  $str[10]  returns string with 11 th  charater read  $str[100000]  warning string offset  write is padded with space until reach character", 
            "title": "Manipulating string"
        }, 
        {
            "location": "/Internet-App-Dev-III/01-Introduction/#string-functions", 
            "text": "strcmp ($str1, $str2)  -- dictionary order  trim  strlen  strtolower  substr  ucwords", 
            "title": "String functions"
        }, 
        {
            "location": "/Internet-App-Dev-III/01-Introduction/#compare-string-with-numeric", 
            "text": "== ,  != ,     type juggling  ,  = ,  ,  =    type juggling  === ,  !==    identical", 
            "title": "Compare String with numeric"
        }, 
        {
            "location": "/Internet-App-Dev-III/01-Introduction/#example-11", 
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 A54321     5670X  // TRUE  // both have non-numeric  // compare with dictionary order  54321     5678  // TRUE (both are numeric)  6 cards     55 cards  // TRUE  // both haven non-numeric  // compare with dictionary order  6cards    55 // type juggling =  FALSE", 
            "title": "example 11"
        }, 
        {
            "location": "/Internet-App-Dev-III/02-String/", 
            "text": "Variable typing\n\n\nPHP is a weakly typed language.\n\n\nType juggling\n\n\nAutomatic conversion from a number to a string\n\n1\n2\n3\n4\n?php\n\n\n$number\n \n=\n \n12345\n \n*\n \n1000\n;\n\n\necho\n \nsubstr\n(\n$number\n,\n \n3\n,\n \n1\n);\n\n\n?\n\n\n\n\n\nResult: 4 ($number contain 12345000, substr started at the 3 rd char 0-indexed,\nlength 1)\n\n\nString conversion to numbers - rules\n\n\n\n\nIf the string does \nnot\n contain any of the characters '.', 'e',\n    or 'E' \nand\n the numeric value fits into integer type limits (as\n    defined by PHP_INT_MAX), the string will be evaluated as\n    an integer.\n\n\nIn all other cases it will be evaluated as a float.\n\n\nThe value is given by the \ninitial\n portion of the \nstring\n. If\n    the \nstring\n starts with valid numeric data, this will be the value\n    used, \notherwise 0\n\n\n\n\nValid numeric data is an optional sign, followed by one or more\n    digits optionally containing a decimal point, followed by an\n    optional exponent ('e' or 'E\u2018) followed by digits.\n\n\n\n\n\n\nExamples\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n?php\n\n\n$foo\n \n=\n \n1\n \n+\n \n10.5\n;\n \n// $foo is float (11.5)\n\n\n\n$foo\n \n=\n \n1\n \n+\n \n-1.3e3\n;\n \n// $foo is float (-1299)\n\n\n\n$foo\n \n=\n \n1\n \n+\n \nbob3\n;\n \n// $foo is integer (1) since bob is 0\n\n\n\n$foo\n \n=\n \n1\n \n+\n \n10 Small Pigs\n;\n \n// $foo is integer (11)\n\n\n\n$foo\n \n=\n \n4\n \n+\n \n10.2 Little Piggies\n;\n \n// $foo is float (14.2)\n\n\n?\n\n\n\n\n\n\n\nConversions to Strings\n\n\n\n\n\n\nstring conversion is done automatically in scope of the expression\n    (e.g., \necho\n function takes string arguments)\n\n\n\n\n\n\nBoolean true is converted to \u201c1\u201d\n\n\n\n\n\n\nBoolean false is \u201c\u201d (empty string)\n\n\n\n\n\n\narrays -\n \u201cArray\u201d\n\n\n\n\n\n\nobjects -\n __toString method is invoked, otherwise \u201cObject\u201d\n\n\n\n\n\n\nString type\n\n\n\n\n\n\nseries of bytes, each byte represents a character -\n NOT Unicode\n\n\n\n\n\n\nPHP does not have char type or byte type\n\n\n\n\n\n\n256 char set, but PHP does not dictate the encoding -\n encoding\n    is based on the encoding of the PHP script\n\n\n\n\n\n\nmaximum length of a string = 2GB\n\n\n\n\n\n\nString literals\n\n\nSingle Quotes\n\n\n\n\n\n\nPreserves exact content\n\n\n\n\n\n\nall characters are literals except escape sequences \\\\ and \\\u2019\n    (only 2 escape sequences)\n\n\n\n\n\n\nMore performant\n\n\n\n\n\n\nDouble quotes\n\n\n\n\n\n\nmultiple escape sequences, like \n\\\\n\n, \n\\\\t\n, \n\\\\$\n, \u2026\n\n\n\n\n\n\nvariable names will be expanded -\n values of variables are\n    substituted into the string -\n Interpolation\n\n\n\n\n\n\nExample\n\n\n1\n2\n3\n4\n5\n6\n7\n$user = \u201cBill\u201d;\n\n\n\necho \nHi $user\n; //Hi $user\n\n\n\necho \u201cHi $user\u201d; //Hi Bill\n\n\n\n//you can always use the concatenation operator .\n\n\n\n\n\n\n\nVariable expansion / interpolation\n\n\n\n\nstrings with double quotes or heredoc have variables parsed\n\n\nSimple syntax: whenever parser sees $, the subsequent characters are\n    parsed as much as possible to become a valid variable name\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n$juice = \u201capple\u201d;\n\n\n\n//works:\n\n\n\necho \u201cHe drank some $juice juice.\u201d //output: He drank some apple juice.\n\n\n\n//the s is parsed to be in the variable name, which is empty string\n\n\n\n//UNINITIALIZED variables have a default value\n\n\n\necho \u201cHe drank some juice made of $juices.\u201d;\n\n\n\n//output: He drank some juice made of .\n\n\n\n\n\n\n\nVariable expansion \u2013 complex syntax (curly braces)\n\n\n\n\n\n\nput variable within \n{}\n, no spaces\n\n\n\n\n\n\nallows for the use of complex expressions within a string\n\n\n\n\n\n\nany scalar variable, array element or object property with a string\n    representation can be included via this syntax\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n$great = \nfantastic\n;\n\n\n\n// Works, outputs: This is fantastic  \n\n\necho \nThis is {$great}\n;  \n\n\necho \nThis is ${great}\n;\n\n\n\n$preparation = \nBraise\n;\n\n\n\n$meat = \nBeef\n;\n\n\n\nprint \n{$preparation}d $meat with Vegetables\n;\n\n\n\n\n\n\n\nVariable variables\n\n\n\n\nvariable variables: variable name which can be set and used\n    dynamically\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n$a = \nhello\n;\n\n\n\n$$a = \u2018world\u2019; //variable called $hello\n\n\n\necho \u201c$a ${$a}\u201d; // same as $a $hello\n\n\n\n{} are optional but resolve ambiguity\n\n\n\ne.g.: $$a\\[1\\] is interpreted an be ${$a\\[1\\]} but could be read as\n\n\n${$a}\\[1\\]\n\n\n\n\n\n\n\nString literals \u2013 Heredoc and Nowdoc\n\n\n\n\nHeredoc \n - behaves like a double-quoted string\n\n\n\n\n1\n2\n3\necho \n DOC\n\n\n    string contents\n\n\nDOC;\n\n\n\n\n\n\n\n\n\nthe line with the closing identifier must start after the new\n    line (\\n) and contain no other characters, except a semicolon (;)\n    -\n not even an indent or comment\n\n\nbehaves like \u201c\u201d string (but quotes don\u2019t need to be escaped) -\n\n    more escape sequences, variables are expanded\n\n\ncan use reuse heredoc names\n\n\nNowdoc is same, except behaves like single-quoted string\n\n\n\n\n1\n2\n3\necho \n \u2018DOC\u2019\n\n\nstring contents\n\n\nDOC;\n\n\n\n\n\n\n\nStrings\n\n\n\n\n\n\n0-indexed \u2013 can be accessed like a numeric array of characters\n\n\n\n\n\n\n$str\\[12\\]\n \u2013 accesses or modifies the 13\nth\n character\n\n\n\n\n\n\nreading from out-of-range \u2013 warning uninitialized string offset\n\n\n\n\n\n\nwriting to out-of-range \u2013 pads the string with spaces until reach\n    the character\n\n\n\n\n\n\nPHP 5.4 + offset must be an integer or a integer string (only\n    digits); other types will cause a warning\n\n\n\n\n\n\nPHP 7.1 Negative numeric indices supported\n\n\n\n\n\n\n1\n2\n3\n$string = \nstring\n;\n\n\necho \nThe character at index -2 is $string\\[-2\\]. \n\n\n \u2018n\u2019\n\n\n\n\n\n\n\nString and numeric comparisons\n\n\n\n\n\n\n==\n, \n!=\n, \n check for equality \nafter\n type juggling\n\n\n\n\n\n\n=\n, \n!\n check for identical\n\n\n\n\n\n\n, \n=\n, \n,\n=\n all have type juggling\n\n\n\n\n\n\nCompare string with a numeric (no quotation marks)\n\n\n\n\nstring is converted to a numeric, and the comparison is numeric\n\n\n\n\n\n\n\n\nString comparison\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n// These values are compared using dictionary order since at least one has char and both are strings\n\n\n\n(\u2018A 54321\u2019 \n \n5678 X\n) - True\n\n\n\n// These values are compared using numeric order since entirely numeric\n\n\neven though they are string\n\n\n\n(\n54321\n \n \n5678\n) - True\n\n\n\n// These values are compared using dictionary order since both have char\n\n\n\n(\n6 pack\n \n \n55 card stud\n) - False\n\n\n\n// These values are compared as strings since using dictionary order\n\n\nsince at least one has char and both are strings\n\n\n\nif (\n6 pack\n \n \u201c55\u201d) - False\n\n\n\n// These values are compared using numeric order since **one** is a\n\n\nnumeric, not string\n\n\n\nif (\n6 pack\n \n 55) - True\n\n\n\n\n\n\n\nCommon string functions\n\n\n\n\n\n\nmany general functions, incl Perl-compatible regex functions,\n    functions for URL strings, hashing/encryption, \u2026.\n\n\n\n\n\n\nstrcmp()\n always compares with dictionary order\n\n\n\n\n\n\ntrim()\n\n\n\n\n\n\nstrlen()\n\n\n\n\n\n\n==\n for value comparison, \n===\n for type and value\n\n\n\n\n\n\nstrcasecmp()\n \u2013 returns 0 if both are same case\n\n\n\n\n\n\nstrtolower()\n, \nstrtoupper()\n\n\n\n\n\n\nucwords()\n \u2013 uppercases the first letter of each word\n\n\n\n\n\n\nsubstr()\n\n\n\n\n\n\nUseful numeric functions\n\n\n\n\n\n\nround()\n function rounds a number to a certain number of decimals\n\n\n\n\n\n\nnumber\\_format()\n adds commas\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n$n = 3.14;\n\n\n\n$n = round ($n); // 3\n\n\n\n$n = 3.142857;\n\n\n\n$n = round ($n, 3); // 3.143\n\n\n\n$n = 20943;\n\n\n\n$n = number\\_format ($n); // 20,943\n\n\n\n$n = 20943;\n\n\n\n$n = number\\_format ($n, 2); // 20,943.00", 
            "title": "02 String"
        }, 
        {
            "location": "/Internet-App-Dev-III/02-String/#variable-typing", 
            "text": "PHP is a weakly typed language.", 
            "title": "Variable typing"
        }, 
        {
            "location": "/Internet-App-Dev-III/02-String/#type-juggling", 
            "text": "Automatic conversion from a number to a string 1\n2\n3\n4 ?php  $number   =   12345   *   1000 ;  echo   substr ( $number ,   3 ,   1 );  ?   \nResult: 4 ($number contain 12345000, substr started at the 3 rd char 0-indexed,\nlength 1)", 
            "title": "Type juggling"
        }, 
        {
            "location": "/Internet-App-Dev-III/02-String/#string-conversion-to-numbers-rules", 
            "text": "If the string does  not  contain any of the characters '.', 'e',\n    or 'E'  and  the numeric value fits into integer type limits (as\n    defined by PHP_INT_MAX), the string will be evaluated as\n    an integer.  In all other cases it will be evaluated as a float.  The value is given by the  initial  portion of the  string . If\n    the  string  starts with valid numeric data, this will be the value\n    used,  otherwise 0   Valid numeric data is an optional sign, followed by one or more\n    digits optionally containing a decimal point, followed by an\n    optional exponent ('e' or 'E\u2018) followed by digits.    Examples     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 ?php  $foo   =   1   +   10.5 ;   // $foo is float (11.5)  $foo   =   1   +   -1.3e3 ;   // $foo is float (-1299)  $foo   =   1   +   bob3 ;   // $foo is integer (1) since bob is 0  $foo   =   1   +   10 Small Pigs ;   // $foo is integer (11)  $foo   =   4   +   10.2 Little Piggies ;   // $foo is float (14.2)  ?", 
            "title": "String conversion to numbers - rules"
        }, 
        {
            "location": "/Internet-App-Dev-III/02-String/#conversions-to-strings", 
            "text": "string conversion is done automatically in scope of the expression\n    (e.g.,  echo  function takes string arguments)    Boolean true is converted to \u201c1\u201d    Boolean false is \u201c\u201d (empty string)    arrays -  \u201cArray\u201d    objects -  __toString method is invoked, otherwise \u201cObject\u201d", 
            "title": "Conversions to Strings"
        }, 
        {
            "location": "/Internet-App-Dev-III/02-String/#string-type", 
            "text": "series of bytes, each byte represents a character -  NOT Unicode    PHP does not have char type or byte type    256 char set, but PHP does not dictate the encoding -  encoding\n    is based on the encoding of the PHP script    maximum length of a string = 2GB", 
            "title": "String type"
        }, 
        {
            "location": "/Internet-App-Dev-III/02-String/#string-literals", 
            "text": "", 
            "title": "String literals"
        }, 
        {
            "location": "/Internet-App-Dev-III/02-String/#single-quotes", 
            "text": "Preserves exact content    all characters are literals except escape sequences \\\\ and \\\u2019\n    (only 2 escape sequences)    More performant", 
            "title": "Single Quotes"
        }, 
        {
            "location": "/Internet-App-Dev-III/02-String/#double-quotes", 
            "text": "multiple escape sequences, like  \\\\n ,  \\\\t ,  \\\\$ , \u2026    variable names will be expanded -  values of variables are\n    substituted into the string -  Interpolation    Example  1\n2\n3\n4\n5\n6\n7 $user = \u201cBill\u201d;  echo  Hi $user ; //Hi $user  echo \u201cHi $user\u201d; //Hi Bill  //you can always use the concatenation operator .", 
            "title": "Double quotes"
        }, 
        {
            "location": "/Internet-App-Dev-III/02-String/#variable-expansion-interpolation", 
            "text": "strings with double quotes or heredoc have variables parsed  Simple syntax: whenever parser sees $, the subsequent characters are\n    parsed as much as possible to become a valid variable name    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 $juice = \u201capple\u201d;  //works:  echo \u201cHe drank some $juice juice.\u201d //output: He drank some apple juice.  //the s is parsed to be in the variable name, which is empty string  //UNINITIALIZED variables have a default value  echo \u201cHe drank some juice made of $juices.\u201d;  //output: He drank some juice made of .", 
            "title": "Variable expansion / interpolation"
        }, 
        {
            "location": "/Internet-App-Dev-III/02-String/#variable-expansion-complex-syntax-curly-braces", 
            "text": "put variable within  {} , no spaces    allows for the use of complex expressions within a string    any scalar variable, array element or object property with a string\n    representation can be included via this syntax     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 $great =  fantastic ;  // Works, outputs: This is fantastic    echo  This is {$great} ;    echo  This is ${great} ;  $preparation =  Braise ;  $meat =  Beef ;  print  {$preparation}d $meat with Vegetables ;", 
            "title": "Variable expansion \u2013 complex syntax (curly braces)"
        }, 
        {
            "location": "/Internet-App-Dev-III/02-String/#variable-variables", 
            "text": "variable variables: variable name which can be set and used\n    dynamically    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 $a =  hello ;  $$a = \u2018world\u2019; //variable called $hello  echo \u201c$a ${$a}\u201d; // same as $a $hello  {} are optional but resolve ambiguity  e.g.: $$a\\[1\\] is interpreted an be ${$a\\[1\\]} but could be read as  ${$a}\\[1\\]", 
            "title": "Variable variables"
        }, 
        {
            "location": "/Internet-App-Dev-III/02-String/#string-literals-heredoc-and-nowdoc", 
            "text": "Heredoc   - behaves like a double-quoted string   1\n2\n3 echo   DOC      string contents  DOC;     the line with the closing identifier must start after the new\n    line (\\n) and contain no other characters, except a semicolon (;)\n    -  not even an indent or comment  behaves like \u201c\u201d string (but quotes don\u2019t need to be escaped) - \n    more escape sequences, variables are expanded  can use reuse heredoc names  Nowdoc is same, except behaves like single-quoted string   1\n2\n3 echo   \u2018DOC\u2019  string contents  DOC;", 
            "title": "String literals \u2013 Heredoc and Nowdoc"
        }, 
        {
            "location": "/Internet-App-Dev-III/02-String/#strings", 
            "text": "0-indexed \u2013 can be accessed like a numeric array of characters    $str\\[12\\]  \u2013 accesses or modifies the 13 th  character    reading from out-of-range \u2013 warning uninitialized string offset    writing to out-of-range \u2013 pads the string with spaces until reach\n    the character    PHP 5.4 + offset must be an integer or a integer string (only\n    digits); other types will cause a warning    PHP 7.1 Negative numeric indices supported    1\n2\n3 $string =  string ;  echo  The character at index -2 is $string\\[-2\\].    \u2018n\u2019", 
            "title": "Strings"
        }, 
        {
            "location": "/Internet-App-Dev-III/02-String/#string-and-numeric-comparisons", 
            "text": "== ,  != ,   check for equality  after  type juggling    = ,  !  check for identical    ,  = ,  , =  all have type juggling    Compare string with a numeric (no quotation marks)   string is converted to a numeric, and the comparison is numeric", 
            "title": "String and numeric comparisons"
        }, 
        {
            "location": "/Internet-App-Dev-III/02-String/#string-comparison", 
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22 // These values are compared using dictionary order since at least one has char and both are strings  (\u2018A 54321\u2019    5678 X ) - True  // These values are compared using numeric order since entirely numeric  even though they are string  ( 54321     5678 ) - True  // These values are compared using dictionary order since both have char  ( 6 pack     55 card stud ) - False  // These values are compared as strings since using dictionary order  since at least one has char and both are strings  if ( 6 pack    \u201c55\u201d) - False  // These values are compared using numeric order since **one** is a  numeric, not string  if ( 6 pack    55) - True", 
            "title": "String comparison"
        }, 
        {
            "location": "/Internet-App-Dev-III/02-String/#common-string-functions", 
            "text": "many general functions, incl Perl-compatible regex functions,\n    functions for URL strings, hashing/encryption, \u2026.    strcmp()  always compares with dictionary order    trim()    strlen()    ==  for value comparison,  ===  for type and value    strcasecmp()  \u2013 returns 0 if both are same case    strtolower() ,  strtoupper()    ucwords()  \u2013 uppercases the first letter of each word    substr()", 
            "title": "Common string functions"
        }, 
        {
            "location": "/Internet-App-Dev-III/02-String/#useful-numeric-functions", 
            "text": "round()  function rounds a number to a certain number of decimals    number\\_format()  adds commas     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 $n = 3.14;  $n = round ($n); // 3  $n = 3.142857;  $n = round ($n, 3); // 3.143  $n = 20943;  $n = number\\_format ($n); // 20,943  $n = 20943;  $n = number\\_format ($n, 2); // 20,943.00", 
            "title": "Useful numeric functions"
        }, 
        {
            "location": "/Internet-App-Dev-III/02-Term-definitions/", 
            "text": "case sensitive\n\n\n$this\n\n\ndon't start with \n$__\n \"magical\"\n\n\n\n\n\n\ndefault values if not initialized. If not potential security issue\n\n\nvar_dump($var);\n \n NULL\n\n\n\n\nif/elseif/else\n\n\n1\n2\n3\n4\n5\n6\nif (condition) {\n\n\n} elseif (condition2) {\n\n\n    // more performant\n\n\n} else {\n\n\n\n}\n\n\n\n\n\n\n\nTRUE\n\n\nTRUE\n\n\n\n\nother than 0 (numeric, string \n0\n)\n\n\nnot \"\"\n\n\nnot emptyy array\n\n\nnot NULL\n\n\ncase insensitive =\n TRUE, true, TrUe\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n$msg= 5;\n\n\n\nif ($msg = 10){ // assignment\n\n\n    echo \nYou have 10 messages\n;\n\n\n}\n\n\n\nif (strpos(\nabcdef\n,\nabc\n)) {\n\n\n    echo \nfound it\n;\n\n\n} else {\n\n\n    echo \nnot there\n;\n\n\n}\n\n\n\n\n\n\n\n\nstrpos\n\n\nReturns index where found of FALSE\n\n1\nmixed strpos ( string $haystack , mixed $needle [, int $offset = 0 ] )\n\n\n\n\n\n\nhttp://php.net/manual/en/function.strpos.php\n\n\nArrays\n\n\n\n\nHashtable dictionary\n\n\nkey-value pairs\n\n\nkey: numeric (int) strings\n\n\nvalue: any data type\n\n\n\n\n\n\norder: based when we did key-value purge added\n\n\n\n\nNumeric array\n\n\nUses numbers for keys\n\n\nAssociative array\n\n\nUses numbers and strings\n\n1\n2\n3\n4\n5\n6\n$array = [\n\n\n    \nkey1\n=\n \nvalue1\n,\n\n\n    17 =\n \nvalue2\n,\n\n\n    \n1\n =\n \nvalue3\n\n\n] \n\n\n           //^converted to numeric\n\n\n\n\n\n* Mix of key types in same array\n* Mix of value types in same array\n    * if a string key is valid integer\n        * converted to integer\n    * if key float, boolean, null\n    * converted to int\n    * ##warning if you try to use array, object as key##\n    * \nis_set($array[\njaya\n])\n\n        * Good way to find out if a key is used\n\n\nExample arrays and behaviour\n\n\n1\n2\n3\n4\n5\n6\n7\n$array = [\n\n\n    1 =\n \na\n,\n\n\n    \n1\n =\n \nb\n,\n\n\n    1.6 =\n \nc\n,\n\n\n    true =\n \nd\n,\n\n\n    1 =\n \nd\n\n\n]\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n$array1 = [\n\n\n    \nfoo\n =\n \nbar\n,\n\n\n    \nbar\n =\n \nfoo\n,\n\n\n    100 =\n -100,\n\n\n    -100 =\n 100\n\n\n]\n\n\n\n$array2 = [\n\n\n    \nbar\n,\n\n\n    \nfoo\n,\n\n\n    -100,\n\n\n    100\n\n\n]\n\n\n\necho $array2[0]; // bar\n\n\necho $array1[0]; // \n\n\n\n\n\n\n\nIf you don't define keys, the array acts like \"normal\" as seen above\n\n\n1\n2\n3\n4\n5\n6\n7\n// Key is based on highest previous numeric\n\n\n$array3 = [\n\n\n    \nbar\n, // key: 0\n\n\n    6 =\n \nfoo\n, // key: 6\n\n\n    -100, // key: 7\n\n\n    100 // key: 8\n\n\n]\n\n\n\n\n\n\n\nisset\n\n\n1\nbool isset ( mixed $var [, mixed $... ] )\n\n\n\n\n\n\n\nunset\n\n\nDescription:\n\n1\nvoid unset ( mixed $var [, mixed $... ] )\n\n\n\n\n\n\n1\n$cars = [\nVolvo\n, \nBMW\n, \nToyota\n];\n\n\n\n\n\n\n1\n2\n3\nunset($cars[0]); // removing the key-value\n\n\n\n$length = count($cars);\n\n\n\n\n\n\nfor loop\n\n\n1\n2\n3\n4\nfor($i = 0; $1 \n $length, $i++) {\n\n\n    echo $cars[$i]; \n\n\n    // undefined offset warning null -\n \n\n\n}\n\n\n\n\n\n\n\nforeach\n\n\nDescription:\n\n1\nforeach($array as $iterator)\n\n\n\n\n\nExample:\n\n1\n2\n3\n4\n5\nforeach($cars as $value) {\n\n\n    echo $value;\n\n\n}\n\n\n\necho $car.\n.$value;\n\n\n\n\n\n\nArrays and Strings\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n$array = explode($separator, $string);\n\n\n$s1 = \nMon-Tue-Wed\n;\n\n\n$days = explode(\n-\n, $s1),\n\n\n/*\n\n\n    0 --\n \nMon\n\n\n    1 --\n \nTwo\n\n\n    2 --\n \nWed\n\n\n*/\n\n\n\n\n\n\n\nexplode\n\n\nSplit a string by string\n\n1\narray explode ( string $delimiter , string $string [, int $limit = PHP_INT_MAX ] )\n\n\n\n\n\n\nReturns an array of strings, each of which is a substring of string formed by splitting it on boundaries formed by the string delimiter.\n\n\nhttp://php.net/manual/en/function.explode.php\n\n\nswitch statement\n\n\n\n\ncomparison is loose \n==\n\n\nnot \n===\n\n\n\n\n\n\nsupports fallthrough\n\n\ncase expression must evaluate to \nint\n/\nfloat\n/\nstring\n/\nboolean\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n?php\n\n\n$mixed\n \n=\n \n0\n;\n\n\nswitch\n(\n$mixed\n)\n \n{\n\n    \ncase\n \nNULL\n:\n \n        \necho\n \nNULL\n;\n\n        \nbreak\n;\n\n    \ncase\n \n0\n:\n\n        \necho\n \n0\n;\n\n        \nbreak\n;\n\n    \ndefault\n \necho\n \nother\n;\n\n\n}\n\n\n?\n\n\n\n\n\n\n\nYou could match on conditions, replacing if/else/ifelse like this:\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n?php\n\n\n// this is terrible code dont do it\n\n\nswitch\n(\nTRUE\n)\n \n{\n\n    \ncase\n \n(\n$mixed\n \n===\n \nNULL\n)\n:\n \n        \necho\n \nNULL\n;\n\n        \nbreak\n;\n\n    \ncase\n \n(\n$mixed\n \n===\n \n0\n)\n:\n\n        \necho\n \n0\n;\n\n        \nbreak\n;\n\n    \ndefault\n \necho\n \nother\n;\n\n\n}\n\n\n?\n\n\n\n\n\n\nTernary operators\n\n\n\n\nWarning\n\n\nDon't nest them plox \ud83d\ude4f\n\n\n\n\nleft to right associativity not right to left\n\n\n1\n2\necho (true ? \ntrue\n: false ? \nf\n: \nt\n);\n\n\n// f\n\n\n\n\n\n\n\nThe first one feeds into the second one\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n?php\n\n\n$arg\n \n=\n \nT\n\n\n\n$vehicle\n \n=\n \n    \n(\n$arg\n \n==\n \nB\n)\n?\nbus\n:\n\n    \n(\n$arg\n \n==\n \nT\n)\n?\ntrain\n:\n\n    \n(\n$arg\n \n==\n \nS\n)\n?\nkpop\n:\n\n    \nfeet\n\n\n?\n\n\n// kpop\n\n\n\n\n\n\n\nIncluding multiple files\n\n\n\n\nBreak up long scripts\n\n\nSeparate reusable\n\n\n template code\n\n\nfunctions/class\n\n\ncommon variables\n\n\n\n\n\n\n\n\n4 functions\n\n\n\n\ninclude ('filename.php')\n\n\nLooks for file if doesnt find, no errors\n\n\n\n\n\n\ninclude_once\n\n\nEnsures the file wasn't already included\n\n\n\n\n\n\nrequire\n\n\nlike include except error\n\n\n\n\n\n\nrequire_once\n\n\ncopy paste file contents in that place\n\n\n\n\n\n\n\n\nReindex an array\n\n\n$array = array_values($array)\n \u2014\n keys start at 0\n\n\n$array[] = 7\n;\n\n\n0 =\n 6\n\n\n1 =\n 7", 
            "title": "02 Term definitions"
        }, 
        {
            "location": "/Internet-App-Dev-III/02-Term-definitions/#ifelseifelse", 
            "text": "1\n2\n3\n4\n5\n6 if (condition) {  } elseif (condition2) {      // more performant  } else {  }", 
            "title": "if/elseif/else"
        }, 
        {
            "location": "/Internet-App-Dev-III/02-Term-definitions/#true", 
            "text": "TRUE   other than 0 (numeric, string  0 )  not \"\"  not emptyy array  not NULL  case insensitive =  TRUE, true, TrUe  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 $msg= 5;  if ($msg = 10){ // assignment      echo  You have 10 messages ;  }  if (strpos( abcdef , abc )) {      echo  found it ;  } else {      echo  not there ;  }", 
            "title": "TRUE"
        }, 
        {
            "location": "/Internet-App-Dev-III/02-Term-definitions/#strpos", 
            "text": "Returns index where found of FALSE 1 mixed strpos ( string $haystack , mixed $needle [, int $offset = 0 ] )    http://php.net/manual/en/function.strpos.php", 
            "title": "strpos"
        }, 
        {
            "location": "/Internet-App-Dev-III/02-Term-definitions/#arrays", 
            "text": "Hashtable dictionary  key-value pairs  key: numeric (int) strings  value: any data type    order: based when we did key-value purge added", 
            "title": "Arrays"
        }, 
        {
            "location": "/Internet-App-Dev-III/02-Term-definitions/#numeric-array", 
            "text": "Uses numbers for keys", 
            "title": "Numeric array"
        }, 
        {
            "location": "/Internet-App-Dev-III/02-Term-definitions/#associative-array", 
            "text": "Uses numbers and strings 1\n2\n3\n4\n5\n6 $array = [       key1 =   value1 ,      17 =   value2 ,       1  =   value3  ]              //^converted to numeric   \n* Mix of key types in same array\n* Mix of value types in same array\n    * if a string key is valid integer\n        * converted to integer\n    * if key float, boolean, null\n    * converted to int\n    * ##warning if you try to use array, object as key##\n    *  is_set($array[ jaya ]) \n        * Good way to find out if a key is used", 
            "title": "Associative array"
        }, 
        {
            "location": "/Internet-App-Dev-III/02-Term-definitions/#example-arrays-and-behaviour", 
            "text": "1\n2\n3\n4\n5\n6\n7 $array = [      1 =   a ,       1  =   b ,      1.6 =   c ,      true =   d ,      1 =   d  ]     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 $array1 = [       foo  =   bar ,       bar  =   foo ,      100 =  -100,      -100 =  100  ]  $array2 = [       bar ,       foo ,      -100,      100  ]  echo $array2[0]; // bar  echo $array1[0]; //     If you don't define keys, the array acts like \"normal\" as seen above  1\n2\n3\n4\n5\n6\n7 // Key is based on highest previous numeric  $array3 = [       bar , // key: 0      6 =   foo , // key: 6      -100, // key: 7      100 // key: 8  ]", 
            "title": "Example arrays and behaviour"
        }, 
        {
            "location": "/Internet-App-Dev-III/02-Term-definitions/#isset", 
            "text": "1 bool isset ( mixed $var [, mixed $... ] )", 
            "title": "isset"
        }, 
        {
            "location": "/Internet-App-Dev-III/02-Term-definitions/#unset", 
            "text": "Description: 1 void unset ( mixed $var [, mixed $... ] )    1 $cars = [ Volvo ,  BMW ,  Toyota ];    1\n2\n3 unset($cars[0]); // removing the key-value  $length = count($cars);", 
            "title": "unset"
        }, 
        {
            "location": "/Internet-App-Dev-III/02-Term-definitions/#for-loop", 
            "text": "1\n2\n3\n4 for($i = 0; $1   $length, $i++) {      echo $cars[$i];       // undefined offset warning null -    }", 
            "title": "for loop"
        }, 
        {
            "location": "/Internet-App-Dev-III/02-Term-definitions/#foreach", 
            "text": "Description: 1 foreach($array as $iterator)   \nExample: 1\n2\n3\n4\n5 foreach($cars as $value) {      echo $value;  }  echo $car. .$value;", 
            "title": "foreach"
        }, 
        {
            "location": "/Internet-App-Dev-III/02-Term-definitions/#arrays-and-strings", 
            "text": "1\n2\n3\n4\n5\n6\n7\n8 $array = explode($separator, $string);  $s1 =  Mon-Tue-Wed ;  $days = explode( - , $s1),  /*      0 --   Mon      1 --   Two      2 --   Wed  */", 
            "title": "Arrays and Strings"
        }, 
        {
            "location": "/Internet-App-Dev-III/02-Term-definitions/#explode", 
            "text": "Split a string by string 1 array explode ( string $delimiter , string $string [, int $limit = PHP_INT_MAX ] )    Returns an array of strings, each of which is a substring of string formed by splitting it on boundaries formed by the string delimiter.  http://php.net/manual/en/function.explode.php", 
            "title": "explode"
        }, 
        {
            "location": "/Internet-App-Dev-III/02-Term-definitions/#switch-statement", 
            "text": "comparison is loose  ==  not  ===    supports fallthrough  case expression must evaluate to  int / float / string / boolean    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 ?php  $mixed   =   0 ;  switch ( $mixed )   { \n     case   NULL :  \n         echo   NULL ; \n         break ; \n     case   0 : \n         echo   0 ; \n         break ; \n     default   echo   other ;  }  ?    You could match on conditions, replacing if/else/ifelse like this:  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 ?php  // this is terrible code dont do it  switch ( TRUE )   { \n     case   ( $mixed   ===   NULL ) :  \n         echo   NULL ; \n         break ; \n     case   ( $mixed   ===   0 ) : \n         echo   0 ; \n         break ; \n     default   echo   other ;  }  ?", 
            "title": "switch statement"
        }, 
        {
            "location": "/Internet-App-Dev-III/02-Term-definitions/#ternary-operators", 
            "text": "Warning  Don't nest them plox \ud83d\ude4f   left to right associativity not right to left  1\n2 echo (true ?  true : false ?  f :  t );  // f    The first one feeds into the second one   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 ?php  $arg   =   T  $vehicle   =  \n     ( $arg   ==   B ) ? bus : \n     ( $arg   ==   T ) ? train : \n     ( $arg   ==   S ) ? kpop : \n     feet  ?  // kpop", 
            "title": "Ternary operators"
        }, 
        {
            "location": "/Internet-App-Dev-III/02-Term-definitions/#including-multiple-files", 
            "text": "Break up long scripts  Separate reusable   template code  functions/class  common variables     4 functions   include ('filename.php')  Looks for file if doesnt find, no errors    include_once  Ensures the file wasn't already included    require  like include except error    require_once  copy paste file contents in that place", 
            "title": "Including multiple files"
        }, 
        {
            "location": "/Internet-App-Dev-III/02-Term-definitions/#reindex-an-array", 
            "text": "$array = array_values($array)  \u2014  keys start at 0  $array[] = 7 ;  0 =  6  1 =  7", 
            "title": "Reindex an array"
        }, 
        {
            "location": "/Internet-App-Dev-III/03-References/", 
            "text": "references\n\n\nPHP has a garbage collector\n- every variable in container\n    - type\n    - value\n    - count to the number of references\n- \nunset($var)\n\n    - or \n$var=NULL\n\n    - decrease the reference count\n- count reaches 0\n    - garbage collector run\n- recommendation\n    - unset or set to null if variable no longer required\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n?php\n\n\n$name\n \n=\n \nBob\n;\n\n\n$other\n \n=\n \n$name\n;\n \n//copy of the container\n\n\n$otherref\n \n=\n \n \n$name\n;\n \n// \n = by reference\n\n\n$name\n \n=\n \nJaya\n;\n\n\n\necho\n \n$other\n \n// Bob\n\n\necho\n \n$otherref\n \n// Jaya\n\n\n?\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n?php\n\n\n$vals\n \n=\n \n[\n\n    \n$key1\n \n=\n \n$value1\n,\n\n    \n$key2\n \n=\n \nvalue2\n\n\n],\n\n\n\n$valNumeric\n \n=\n \n[\n\n    \n$value1\n,\n\n    \n$value2\n\n\n];\n\n\n\n$valMix\n \n=\n \n[\n\n    \n$value1\n,\n \n// 0\n\n    \n$value2\n,\n \n// 1\n\n    \n0\n \n=\n \n$value3\n,\n \n// 6\n\n    \n$value4\n \n// 7\n\n\n]\n\n\n\n$array\n \n=\n \n[\n\n    \n1\n,\n\n    \n2\n,\n \n// 1\n\n    \n0\n=\n5\n,\n \n// 0\n\n    \n8\n \n// 3\n\n\n]\n\n\n\n$array\n[\njaya\n]\n \n// accessor - warning undefined\n\n\n// modify --\n add to array at end\n\n\nisset\n(\n$array\n[\n$key\n])\n\n\n?\n\n\n\n\n\n\n\nforEach loop (with references)\n\n\n\n\ndon't need to know key\n\n\n\n\n1\nforeach ($array as $value) {}\n\n\n\n\n\n- \n$array\n = collection\n- \n$value\n = iterator\n- \n{}\n = on every iteration internal pointer\n2. Know key and value\n\n1\nforeach ($array as $key=\n$value) {}\n\n\n\n\n\nIterator pattern \n changing \n$value(iterator)\n\n- either syntax error doesn't change (PHP)\n- holds a copy of the array element\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n?php\n\n\n$arr\n \n=\n \n[\n1\n,\n2\n,\n3\n,\n4\n];\n\n\n\n//reference every same memory array element\n\n\nforeach\n \n(\n$arr\n \nas\n \n$value\n)\n \n{\n\n    \n$value\n \n=\n \n$value\n \n*\n \n2\n\n\n}\n\n\n\n// $arr = 2 4 6 8\n\n\necho\n \n$value\n;\n \n// 8\n\n\n// NO BLOCK SCOPE\n\n\n?\n\n\n\n\n\n\n$value\n will continue to refer to last element in $arr\n\n\nSafety, so that elsewhere can reuse variable name\n\n\n1\n2\n// breaks the reference\n\n\nunset ($value)", 
            "title": "03 References"
        }, 
        {
            "location": "/Internet-App-Dev-III/03-References/#references", 
            "text": "PHP has a garbage collector\n- every variable in container\n    - type\n    - value\n    - count to the number of references\n-  unset($var) \n    - or  $var=NULL \n    - decrease the reference count\n- count reaches 0\n    - garbage collector run\n- recommendation\n    - unset or set to null if variable no longer required  1\n2\n3\n4\n5\n6\n7\n8\n9 ?php  $name   =   Bob ;  $other   =   $name ;   //copy of the container  $otherref   =     $name ;   //   = by reference  $name   =   Jaya ;  echo   $other   // Bob  echo   $otherref   // Jaya  ?     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29 ?php  $vals   =   [ \n     $key1   =   $value1 , \n     $key2   =   value2  ],  $valNumeric   =   [ \n     $value1 , \n     $value2  ];  $valMix   =   [ \n     $value1 ,   // 0 \n     $value2 ,   // 1 \n     0   =   $value3 ,   // 6 \n     $value4   // 7  ]  $array   =   [ \n     1 , \n     2 ,   // 1 \n     0 = 5 ,   // 0 \n     8   // 3  ]  $array [ jaya ]   // accessor - warning undefined  // modify --  add to array at end  isset ( $array [ $key ])  ?", 
            "title": "references"
        }, 
        {
            "location": "/Internet-App-Dev-III/03-References/#foreach-loop-with-references", 
            "text": "don't need to know key   1 foreach ($array as $value) {}   \n-  $array  = collection\n-  $value  = iterator\n-  {}  = on every iteration internal pointer\n2. Know key and value 1 foreach ($array as $key= $value) {}   Iterator pattern   changing  $value(iterator) \n- either syntax error doesn't change (PHP)\n- holds a copy of the array element  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 ?php  $arr   =   [ 1 , 2 , 3 , 4 ];  //reference every same memory array element  foreach   ( $arr   as   $value )   { \n     $value   =   $value   *   2  }  // $arr = 2 4 6 8  echo   $value ;   // 8  // NO BLOCK SCOPE  ?    $value  will continue to refer to last element in $arr  Safety, so that elsewhere can reuse variable name  1\n2 // breaks the reference  unset ($value)", 
            "title": "forEach loop (with references)"
        }, 
        {
            "location": "/Internet-App-Dev-III/03-arrays/", 
            "text": "Arrays\n\n\n\n\n\n\nall\n arrays in PHP are ordered maps (or hash\n    tables, dictionaries) \u2013 key-value pairs\n\n\n\n\n\n\nordering based on \nwhen\n added to array, \nnot\n on the key\u2019s\n    value\n\n\n\n\n\n\nto order based on keys \u2013 ksort function\n\n\n\n\n\n\nIndexed arrays (numeric arrays) use numbers for keys\n\n\n\n\n\n\nkeys begin at 0 by default\n\n\n\n\nAssociative arrays use strings and/or numbers as keys -\n in fact\nall arrays in PHP are associative\n\n\nvalues can be any type, including arrays (multi-dimensional)\n\n\n\n\n\n\n\n\nCreating an array\n\n\nsyntax as of php 5.4: []\n\n\n1\n2\n3\n4\n$vals = \\[  \n    \u201ckey1\n =\n \u201cvalue1\n,  \n    \u201ckey2\n =\n \u201cvalue2\n  \n\\];\n\n\n\n\n\n\nor\n\n\n$vals = \\[\u201cvalue1\u201d, \u201cvalue2\u201d\\]; //numeric key\n\n\npre php 5.4 : \narray()\n is a language construct (not a function)\n\n\nGeneral syntax: \n\n1\n2\n3\n4\n$vals = array(  \n    \u201ckey1\n =\n \u201cvalue1\n,  \n    \u201ckey2\n =\n \u201cvalue2\n  \n);  \n\n\n\n\n- comma separated list of key =\n values\n\n\n\n\n\n\nif the key is numeric, supply a comma-separated list of elements\n\n1\n$vals = array(\u201cvalue1\u201d, \u201cvalue2\u201d);\n\n\n\n\nNumeric arrays are associative\n\n\n\n\n\n\nkeys are either strings or integers\n\n\n\n\n\n\ncan have a mix of key types in same array -\n PHP does not\n    distinguish between indexed (numeric) and associative arrays\n\n\n\n\n\n\nbehavior of numeric array is the same as an associative array\n\n\n\n\n\n\nindexed arrays don\u2019t have to start at index 0 and increase\n\n\n\n\n\n\nif the key is a string which is a valid integer, it will be\n    converted to an integer\n\n\n\n\n\n\nif try to use a key which is a float, Boolean, or null -\n they\n    will be converted to integers\n\n\n\n\n\n\nwarning if use array or object as key\n\n\n\n\n\n\nExamples\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n$array = \\[  \n    1    =\n \na\n,  \n    \n1\n  =\n \nb\n,  \n    1.5  =\n \nc\n, //truncated  \n    true =\n \nd\n,  \n\\];  \nvar\\_dump($array);\n\narray(1) {\n\n\\[1\\]=\n\n\nstring(1) \nd\n\n\n}\n\n//only sees one key value since they are all cast/converted to integer,\nso the value is overwritten each time\n\nisset($array\\[\u2018jaya\u2019\\]) -\ngt; false\n\n\n\n\nExamples\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n$array = \\[  \n    \nfoo\n =\n \nbar\n,  \n    \nbar\n =\n \nfoo\n,  \n    100   =\n -100,  \n    -100  =\n 100,  \n\\];  \nvar\\_dump($array);\n\narray(4) {\n\n\\[\nfoo\n\\]=\n\n\nstring(3) \nbar\u201c\n\n\\[\nbar\n\\]=\n\n\nstring(3) \nfoo\u201c\n\n\\[100\\]=\n int(-100)\n\n\\[-100\\]=\n int(100)\n\n}\n\n\n\n\n\nIndexed arrays\n\n\n\n\noptional to specify the key, in which case 0 indexed and\n    incrementing index\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n$array = \\[\nfoo\n, \nbar\n, \nhello\n, \nworld\u201c\\];  \nvar\\_dump($array);\n\narray(4) {\n\n\\[0\\]=\n string(3) \nfoo\n\n\n\\[1\\]=\n string(3) \nbar\n\n\n\\[2\\]=\n string(5) \nhello\n\n\n\\[3\\]=\n string(5) \nworld\n\n\n}\n\n\n\n\n\n\n\nReview - Arrays\n\n\nInitialize an array\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n$vals = \\[  \n    \u201ckey1\n =\n \u201cvalue1\n,  \n    \u201ckey2\n =\n \u201cvalue2\n  \n\\];\n\n$vals = \\[\u201cvalue1\n, \u201cvalue2\u201c\\]; =\n starts at 0\n\n$vals = \\[  \n         \na\n,  \n         \nb\n,  \n    6 =\n \nc\n,  \n         \nd\n  \n\\]; =\n 0,1,6,7 as the keys\n\n$array = \\[1, 2, 0 =\n 5, 8\\];\n\nvar\\_dump($array);\n\n1 =\n 2\n\n0 =\n 5\n\n2 =\n 8\n\n\n\n\n\n\nAccessing elements\n\n\n$array\\[\u201ckey\u201d\\]\n\n\n\n\nif the key has not been defined, get the same \nwarning\n a\n    accessing any \nother undefined variable\n (e-notice error), and the\n    \nresult will be null\n\n\n1\n2\n3\nvar\\_dump($array\\[\u201cjaya\n\\]); //result is null if key \u201cjaya\u201d doesn\u2019t exist\n\nif (isset($array\\[\u201ckey\u201d\\]) =\n true only if the key is in use\n\n\n\n\n\n\n\nModifying arrays\n\n\n$arr\\[\u201ckey\u201d\\] = value;\n\n\nIf \n$array\n doesn't exist yet, it will be created, so this is also an\nalternative way to create an \narray\n.\n\n\nBUT WARNING if \n$array\n is already a string then the \n\\[num\\]\n may\nactually be interpreted as a \nstring access operator\n.\n\n\n$str\\[5\\] -\ngt;\n returns the character at 5\n\n1\n$arr\\[\\] = value2; //adds a last element, with next numeric index, 0 if first numeric index\n\n\n\n\n\n\n\nTo remove a key/value pair, call the \nunset()\n function on it.\n\n1\n2\n3\nunset($arr\\[\u201ckey\u201d\\]); //element is removed from array, but keys are NOT recalculated, there will be a gap\n\nunset($arr); //deletes the whole array\n\n\n\n\n\n\n\nLoops and arrays\n\n\n1\ncount($array) \u2013 returns the length of the array\n\n\n\n\n-   but beware using in a for loop:\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n$cars=array(\nVolvo\n,\nBMW\n,\nToyota\n);\n\nunset($cars\\[0\\]);//removes the key-value pair  \n$length=count($cars);  \n\nfor($x=0;$x\nlt;$length;$x++) {  \n  echo $cars\\[$x\\]; //undefined offset warning, null  \n  echo \nlt;br\ngt;\n;  \n}\n\n\n\n\n\nArrays and Strings\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n$array = explode (separator, $string); //explode converts between string\n\n\nto array\n\n\n\n$string = implode (glue, $array); //implode glues array elements into\n\n\nstring\n\n\n\n$s1 = \nMon-Tue-Wed-Thu-Fri\n;\n\n\n\n$days\\_array = explode (\n-\n, $s1);\n\n\n\n// $days\\_array now a five-element array, with Mon indexed at 0.\n\n\n\n$s2 = implode (\n, \n, $days\\_array);\n\n\n\n// $s2 now a comma-separated list of days: Mon, Tue, Wed, Thu, Fri.\n\n\n\n\n\n\n\nforeach loop\n\n\n\n\n\n\ndon\u2019t rely on the key / index value to iterate through an array\n    -\n use a foreach loop\n\n\n\n\n\n\ntwo ways -\n needing to know the key and not\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nforeach ($array as $value)\n\n\n\necho $value;\n\n\n\n//on each iteration, the current value is assigned to $value and the\n\n\ninternal array pointer advances by 1\n\n\n\nforeach ($array as $key =\n $value)\n\n\n\necho $key.$value; //current element key and value are assigned\n\n\n\n\n\n\n\n\n\n\nPHP memory management\n\n\n\n\n\n\nPHP has a garbage collector, like Java\n\n\n\n\n\n\nInternal mechanism:\n\n\n\n\n\n\nevery variable is stored in a container (called zval)\n\n\n\n\n\n\nthe container has the variable type, value, count of the number\n    of references to it\n\n\n\n\n\n\neach time you unset or make a variable = NULL the refcount will\n    decrease\n\n\n\n\n\n\nwhen refcount is 0, garbage collection will happen\n\n\n\n\n\n\n\n\n\n\nGarbage collection only if idle CPU cycles, or running out of memory\n\n\n\n\n\n\nChoices:\n\n\n\n\n\n\nmemory will be released at end of script \u2013 short running web\n    page\n\n\n\n\n\n\nunset():\n\n\n\n\nlanguage construct that removes the variable name from the\n    table, and removes a reference\n\n\n\n\n\n\n\n\nmake variable = null \u2013 variable still exists\n\n\n\n\n\n\n\n\n\n\nVariables\n\n\n\n\n\n\nassign by value\n\n\n\n\nvalue of variable/expression is copied\n\n\n\n\n\n\n\n\nassign by reference\n\n\n\n\n\n\nnew variable becomes an alias / refers to the original variable\n\n\n\n\n\n\nonly possible for named variables (not expressions)\n\n1\n2\n3\n4\n5\nfoo = \nBob\n;     // Assign the value \nBob\n to $foo  \n\n\n$bar = \n$foo;   // Reference $foo via $bar.  \n\n\n$bar = \nMy name is $bar\n;  // Alter $bar...  \n\n\necho $bar;  \n\n\necho $foo;      // $foo is altered too.\n\n\n\n\n\nChange \n$value\n in a foreach loop\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n$value\n is available outside the construct (we\u2019ll cover scope when we do functions)\n\n\n\n\n\n\nif you change $value, you can change the last element of the array\n    since it is a reference, even if you think you are redefining $value\n    (i.e., using it in another foreach loop)\n\n\n\n\nsolution\n: unset($value); // breaks the reference of $value, so no\nlonger an alias\n\n\nExample\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n$array = \\[1, 2, 3\\];\n\n\n\nforeach ($array as \n$value) {} // by reference\n\n\n\nvar\\_dump($array);\n\n\n\nforeach ($array as $value) {} // by value (i.e., copy)\n\n\n\nvar\\_dump($array);\n\n\n\n\n\n\nResults:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\narray (size=3)\n\n\n\n0 =\n int 1\n\n\n\n1 =\n int 2\n\n\n\n2 =\n \nint 3\n\n\n\narray (size=3)\n\n\n\n0 =\n int 1\n\n\n\n1 =\n int 2\n\n\n\n2 =\n \nint 2\n\n\n\n\n\n\nWhy?\n\n\nAfter going through the first foreach loop, $array remains unchanged but\n$value is left as a \ndangling reference\n to the last element in $array\n(since that foreach loop accessed $value by reference).\n\n\nwhen we go through the second foreach loop, since $value is now being\naccessed \nby value\n (i.e., by copy), \nforeach copies each sequential\n$array element into $value\n in each step of the loop.\n\n\nAs a result, here\u2019s what happens during each step of the second foreach\nloop:\n\n\nPass 1: Copies $array[0] (i.e., \u201c1\u201d) into $value (which is a reference\nto $array[2]), so $array[2] now equals 1. So $array now contains\n\n[1, 2, 1].\n\n\nPass 2: Copies $array[1] (i.e., \u201c2\u201d) into $value (which is a reference\nto $array[2]), so $array[2] now equals 2. So $array now contains\n\n[1, 2, 2].\n\n\nPass 3: Copies $array[2] (which now equals \u201c2\u201d) into $value (which is\na reference to $array[2]), so $array[2] still equals 2. So $array\nnow contains \n[1, 2, 2].\n\n\nSorting Arrays\n\n\n\n\n\n\nsort(), by value, dropping the keys\n\n\n\n\n\n\nasort(), by value, maintaining the keys\n\n\n\n\n\n\nksort(), by key, maintaining the values\n\n\n\n\n\n\nrsort(), sort() in reverse order\n\n\n\n\n\n\narsort(), asort() in reverse order\n\n\n\n\n\n\nkrsort(), ksort() in reverse order\n\n\n\n\n\n\nUseful array tricks\n\n\n\n\n\n\nrange() function to fill an array with numeric sequence\n\n\n\n\ne.g., $month = range (1,12);\n\n\n\n\n\n\n\n\n$tv[] = \u2018Seinfeld\u2019; //adds \u2018Seinfeld to end of array, or creates a\n    new one if it doesn\u2019t exist yet\n\n\n\n\n\n\nto be safe: first to unset($tv);\n\n\n\n\n\n\nIndices and reindexing\n\n\n\n\n\n\nwhen you unset, the element is removed, but the key is \u201cremembered\u201d\n\n\n\n\n\n\nwhen you add a new element, it will be at the maximal index + 1\n    where the maximal index existed at some point\n\n\n\n\n\n\nthe array_values() function will reindex with numeric\n\n\n\n\n\n\nto reindex: array_values() method OR unset the entire array!!\n\n\n\n\n\n\nExample\n\n\n// Create a simple array.\n\n\n\\(array = \\[1, 2, 3, 4, 5\\];  \nvar\\_dump(\\)\narray); //5 values  \n\n\n// Now delete every item, but leave the array itself intact:\n\nforeach (\n\\(array as \n(i =\n \n\\(value) {  \n    unset(\\)\narray\\[\\)\ni\\]);  \n}  \nvar\\_dump(\\)\narray); //empty  \n\n\n// Append an item (note that the new key is 5, instead of 0).\n\n\n\\(array\\[\\] = 6;  \nvar\\_dump(\\)\narray); //key 5 to value 6  \n\n\n// Re-index:\n\n\n\\(array = array\\_values(\\)\narray);\n\n\n\\(array\\[\\] = 7;  \nvar\\_dump(\\)\narray); //[0]=\n6 [1]=\n7", 
            "title": "03 arrays"
        }, 
        {
            "location": "/Internet-App-Dev-III/03-arrays/#arrays", 
            "text": "all  arrays in PHP are ordered maps (or hash\n    tables, dictionaries) \u2013 key-value pairs    ordering based on  when  added to array,  not  on the key\u2019s\n    value    to order based on keys \u2013 ksort function    Indexed arrays (numeric arrays) use numbers for keys    keys begin at 0 by default   Associative arrays use strings and/or numbers as keys -  in fact\nall arrays in PHP are associative  values can be any type, including arrays (multi-dimensional)", 
            "title": "Arrays"
        }, 
        {
            "location": "/Internet-App-Dev-III/03-arrays/#creating-an-array", 
            "text": "syntax as of php 5.4: []  1\n2\n3\n4 $vals = \\[  \n    \u201ckey1  =  \u201cvalue1 ,  \n    \u201ckey2  =  \u201cvalue2   \n\\];   or  $vals = \\[\u201cvalue1\u201d, \u201cvalue2\u201d\\]; //numeric key  pre php 5.4 :  array()  is a language construct (not a function)  General syntax:  1\n2\n3\n4 $vals = array(  \n    \u201ckey1  =  \u201cvalue1 ,  \n    \u201ckey2  =  \u201cvalue2   \n);    \n- comma separated list of key =  values    if the key is numeric, supply a comma-separated list of elements 1 $vals = array(\u201cvalue1\u201d, \u201cvalue2\u201d);  \nNumeric arrays are associative    keys are either strings or integers    can have a mix of key types in same array -  PHP does not\n    distinguish between indexed (numeric) and associative arrays    behavior of numeric array is the same as an associative array    indexed arrays don\u2019t have to start at index 0 and increase    if the key is a string which is a valid integer, it will be\n    converted to an integer    if try to use a key which is a float, Boolean, or null -  they\n    will be converted to integers    warning if use array or object as key    Examples  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 $array = \\[  \n    1    =   a ,  \n     1   =   b ,  \n    1.5  =   c , //truncated  \n    true =   d ,  \n\\];  \nvar\\_dump($array);\n\narray(1) {\n\n\\[1\\]= \n\nstring(1)  d \n\n}\n\n//only sees one key value since they are all cast/converted to integer,\nso the value is overwritten each time\n\nisset($array\\[\u2018jaya\u2019\\]) - gt; false  \nExamples  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 $array = \\[  \n     foo  =   bar ,  \n     bar  =   foo ,  \n    100   =  -100,  \n    -100  =  100,  \n\\];  \nvar\\_dump($array);\n\narray(4) {\n\n\\[ foo \\]= \n\nstring(3)  bar\u201c\n\n\\[ bar \\]= \n\nstring(3)  foo\u201c\n\n\\[100\\]=  int(-100)\n\n\\[-100\\]=  int(100)\n\n}", 
            "title": "Creating an array"
        }, 
        {
            "location": "/Internet-App-Dev-III/03-arrays/#indexed-arrays", 
            "text": "optional to specify the key, in which case 0 indexed and\n    incrementing index  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 $array = \\[ foo ,  bar ,  hello ,  world\u201c\\];  \nvar\\_dump($array);\n\narray(4) {\n\n\\[0\\]=  string(3)  foo \n\n\\[1\\]=  string(3)  bar \n\n\\[2\\]=  string(5)  hello \n\n\\[3\\]=  string(5)  world \n\n}", 
            "title": "Indexed arrays"
        }, 
        {
            "location": "/Internet-App-Dev-III/03-arrays/#review-arrays", 
            "text": "", 
            "title": "Review - Arrays"
        }, 
        {
            "location": "/Internet-App-Dev-III/03-arrays/#initialize-an-array", 
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 $vals = \\[  \n    \u201ckey1  =  \u201cvalue1 ,  \n    \u201ckey2  =  \u201cvalue2   \n\\];\n\n$vals = \\[\u201cvalue1 , \u201cvalue2\u201c\\]; =  starts at 0\n\n$vals = \\[  \n          a ,  \n          b ,  \n    6 =   c ,  \n          d   \n\\]; =  0,1,6,7 as the keys\n\n$array = \\[1, 2, 0 =  5, 8\\];\n\nvar\\_dump($array);\n\n1 =  2\n\n0 =  5\n\n2 =  8", 
            "title": "Initialize an array"
        }, 
        {
            "location": "/Internet-App-Dev-III/03-arrays/#accessing-elements", 
            "text": "$array\\[\u201ckey\u201d\\]   if the key has not been defined, get the same  warning  a\n    accessing any  other undefined variable  (e-notice error), and the\n     result will be null  1\n2\n3 var\\_dump($array\\[\u201cjaya \\]); //result is null if key \u201cjaya\u201d doesn\u2019t exist\n\nif (isset($array\\[\u201ckey\u201d\\]) =  true only if the key is in use", 
            "title": "Accessing elements"
        }, 
        {
            "location": "/Internet-App-Dev-III/03-arrays/#modifying-arrays", 
            "text": "$arr\\[\u201ckey\u201d\\] = value;  If  $array  doesn't exist yet, it will be created, so this is also an\nalternative way to create an  array .  BUT WARNING if  $array  is already a string then the  \\[num\\]  may\nactually be interpreted as a  string access operator .  $str\\[5\\] - gt;  returns the character at 5 1 $arr\\[\\] = value2; //adds a last element, with next numeric index, 0 if first numeric index    To remove a key/value pair, call the  unset()  function on it. 1\n2\n3 unset($arr\\[\u201ckey\u201d\\]); //element is removed from array, but keys are NOT recalculated, there will be a gap\n\nunset($arr); //deletes the whole array", 
            "title": "Modifying arrays"
        }, 
        {
            "location": "/Internet-App-Dev-III/03-arrays/#loops-and-arrays", 
            "text": "1 count($array) \u2013 returns the length of the array  \n-   but beware using in a for loop: 1\n2\n3\n4\n5\n6\n7\n8\n9 $cars=array( Volvo , BMW , Toyota );\n\nunset($cars\\[0\\]);//removes the key-value pair  \n$length=count($cars);  \n\nfor($x=0;$x lt;$length;$x++) {  \n  echo $cars\\[$x\\]; //undefined offset warning, null  \n  echo  lt;br gt; ;  \n}", 
            "title": "Loops and arrays"
        }, 
        {
            "location": "/Internet-App-Dev-III/03-arrays/#arrays-and-strings", 
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 $array = explode (separator, $string); //explode converts between string  to array  $string = implode (glue, $array); //implode glues array elements into  string  $s1 =  Mon-Tue-Wed-Thu-Fri ;  $days\\_array = explode ( - , $s1);  // $days\\_array now a five-element array, with Mon indexed at 0.  $s2 = implode ( ,  , $days\\_array);  // $s2 now a comma-separated list of days: Mon, Tue, Wed, Thu, Fri.", 
            "title": "Arrays and Strings"
        }, 
        {
            "location": "/Internet-App-Dev-III/03-arrays/#foreach-loop", 
            "text": "don\u2019t rely on the key / index value to iterate through an array\n    -  use a foreach loop    two ways -  needing to know the key and not  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 foreach ($array as $value)  echo $value;  //on each iteration, the current value is assigned to $value and the  internal array pointer advances by 1  foreach ($array as $key =  $value)  echo $key.$value; //current element key and value are assigned", 
            "title": "foreach loop"
        }, 
        {
            "location": "/Internet-App-Dev-III/03-arrays/#php-memory-management", 
            "text": "PHP has a garbage collector, like Java    Internal mechanism:    every variable is stored in a container (called zval)    the container has the variable type, value, count of the number\n    of references to it    each time you unset or make a variable = NULL the refcount will\n    decrease    when refcount is 0, garbage collection will happen      Garbage collection only if idle CPU cycles, or running out of memory    Choices:    memory will be released at end of script \u2013 short running web\n    page    unset():   language construct that removes the variable name from the\n    table, and removes a reference     make variable = null \u2013 variable still exists", 
            "title": "PHP memory management"
        }, 
        {
            "location": "/Internet-App-Dev-III/03-arrays/#variables", 
            "text": "assign by value   value of variable/expression is copied     assign by reference    new variable becomes an alias / refers to the original variable    only possible for named variables (not expressions) 1\n2\n3\n4\n5 foo =  Bob ;     // Assign the value  Bob  to $foo    $bar =  $foo;   // Reference $foo via $bar.    $bar =  My name is $bar ;  // Alter $bar...    echo $bar;    echo $foo;      // $foo is altered too.   \nChange  $value  in a foreach loop       Note  $value  is available outside the construct (we\u2019ll cover scope when we do functions)    if you change $value, you can change the last element of the array\n    since it is a reference, even if you think you are redefining $value\n    (i.e., using it in another foreach loop)   solution : unset($value); // breaks the reference of $value, so no\nlonger an alias  Example 1\n2\n3\n4\n5\n6\n7\n8\n9 $array = \\[1, 2, 3\\];  foreach ($array as  $value) {} // by reference  var\\_dump($array);  foreach ($array as $value) {} // by value (i.e., copy)  var\\_dump($array);    Results:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 array (size=3)  0 =  int 1  1 =  int 2  2 =   int 3  array (size=3)  0 =  int 1  1 =  int 2  2 =   int 2    Why?  After going through the first foreach loop, $array remains unchanged but\n$value is left as a  dangling reference  to the last element in $array\n(since that foreach loop accessed $value by reference).  when we go through the second foreach loop, since $value is now being\naccessed  by value  (i.e., by copy),  foreach copies each sequential\n$array element into $value  in each step of the loop.  As a result, here\u2019s what happens during each step of the second foreach\nloop:  Pass 1: Copies $array[0] (i.e., \u201c1\u201d) into $value (which is a reference\nto $array[2]), so $array[2] now equals 1. So $array now contains [1, 2, 1].  Pass 2: Copies $array[1] (i.e., \u201c2\u201d) into $value (which is a reference\nto $array[2]), so $array[2] now equals 2. So $array now contains [1, 2, 2].  Pass 3: Copies $array[2] (which now equals \u201c2\u201d) into $value (which is\na reference to $array[2]), so $array[2] still equals 2. So $array\nnow contains  [1, 2, 2].", 
            "title": "Variables"
        }, 
        {
            "location": "/Internet-App-Dev-III/03-arrays/#sorting-arrays", 
            "text": "sort(), by value, dropping the keys    asort(), by value, maintaining the keys    ksort(), by key, maintaining the values    rsort(), sort() in reverse order    arsort(), asort() in reverse order    krsort(), ksort() in reverse order", 
            "title": "Sorting Arrays"
        }, 
        {
            "location": "/Internet-App-Dev-III/03-arrays/#useful-array-tricks", 
            "text": "range() function to fill an array with numeric sequence   e.g., $month = range (1,12);     $tv[] = \u2018Seinfeld\u2019; //adds \u2018Seinfeld to end of array, or creates a\n    new one if it doesn\u2019t exist yet    to be safe: first to unset($tv);", 
            "title": "Useful array tricks"
        }, 
        {
            "location": "/Internet-App-Dev-III/03-arrays/#indices-and-reindexing", 
            "text": "when you unset, the element is removed, but the key is \u201cremembered\u201d    when you add a new element, it will be at the maximal index + 1\n    where the maximal index existed at some point    the array_values() function will reindex with numeric    to reindex: array_values() method OR unset the entire array!!    Example  // Create a simple array.  \\(array = \\[1, 2, 3, 4, 5\\];  \nvar\\_dump(\\) array); //5 values    // Now delete every item, but leave the array itself intact: \nforeach ( \\(array as  (i =   \\(value) {  \n    unset(\\) array\\[\\) i\\]);  \n}  \nvar\\_dump(\\) array); //empty    // Append an item (note that the new key is 5, instead of 0).  \\(array\\[\\] = 6;  \nvar\\_dump(\\) array); //key 5 to value 6    // Re-index:  \\(array = array\\_values(\\) array);  \\(array\\[\\] = 7;  \nvar\\_dump(\\) array); //[0]= 6 [1]= 7", 
            "title": "Indices and reindexing"
        }, 
        {
            "location": "/Internet-App-Dev-III/03-constructs/", 
            "text": "Conditionals\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n?php\n\n\nif\n \n(\ncondition\n)\n \n{\n\n    \n// Do this!\n\n\n}\n\n\nif\n \n(\ncondition\n)\n \n{\n\n    \n// Do this!\n\n\n}\n \nelse\n \n{\n\n    \n// Do that!\n\n\n}\n\n\nif\n \n(\ncondition1\n)\n \n{\n\n    \n// Do this!\n\n\n}\n\n\nelseif\n(\ncondition2\n)\n \n{\n\n        \n// Do that!\n\n    \n}\n \nelse\n \n{\n\n        \n// Do whatever!\n\n    \n}\n \n\n?\n\n\n\n\n\n\n?php\n\n\nWhat is true?\n\n\nALL expressions are either true or false\n\n\nTrue =\n\n\n\n\n$var\n, if \nvar\n has a value \nother\n than 0 (numeric or string), an\n\n\n\n\nempty string, empty array, \nFALSE\n, or \nNULL\n\n\n\n\nisset($var)\n, if \n$var\n has any value other than \nNULL\n, including 0,\n\n\n\n\nFALSE\n, or an empty string\n\n\n\n\nTRUE\n, \ntrue\n, \nTrue\n, etc.\n\n\n\n\nDangerous behaviour\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n?php\n\n\nif\n \n(\n$msgs\n \n=\n \n10\n)\n \n//evaluates to 10, which is true!!\n\n\n    \necho\n\u201c\n \nyou\n \nhave\n \nten\n \nmessages\u201d\n;\n\n\n\nif\n \n(\nstrpos\n(\nabcdefg\n,\n \nxyz\n))\n \n{\n \n//evaluates to false  \n\n    \necho\n \nfound it!\n;\n\n\n}\n \nelse\n \n{\n\n    \necho\n \ndidn\\\nt find it.\n;\n\n\n}\n\n\n?\n\n\n\n\n\n\n\nBUT!!!\n\n\nif (strpos('abcdefg','abc')){ //evaluates to position 0 which is false\n\n\nIn PHP -\n use \n===\n to distinguish between 0 and false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n?php\n\n\nif\n \n(\nstrpos\n(\nabcdefg\n,\nabc\n)\n \n!===\n \nfalse\n){\n \n//evaluates false only if not\n\n\nfound\n,\n \nso\n \n0\n \nand\n \nfalse\n \nare\n \nnot\n \nsame\n \nsince\n \nnot\n \nsame\n \ntype\n  \n\necho\n \nfound it!\n;\n  \n\n}\nelse\n{\n  \n\necho\n \ndidn\nt find it..\n;\n  \n\n}\n\n\n?\n\n\n\n\n\n\n\nLoops\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n?php\n\n\nwhile\n \n(\ncondition\n)\n \n{\n\n    \n// Do something.\n\n\n}\n\n\n\nfor\n \n(\n$i\n \n=\n \n1\n;\n \n$i\n \nlt\n;\n=\n \n10\n;\n \n$i\n++\n)\n \n{\n\n    \necho\n \n$i\n;\n\n\n}\n\n\n?\n\n\n\n\n\n\n\nBreak and continue\n\n\nbreak 2; //2\n indicates number of enclosing structures to break out of\n\n\n\n\n\n\ncannot pass in a variable as an argument to break\n\n\n\n\n\n\ncannot break 0 or less\n\n\n\n\n\n\nsame for continue; - can tell it how many enclosing structures to\n    skip to the end\n\n\n\n\nbreaks out of the inner structures, continues the outer-most\n\n\n\n\n\n\n\n\nExamples\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n?php\n\n\nfor\n \n(\n$i\n=\n0\n;\n \n$i\nlt\n;\n10\n;\n \n$i\n++\n)\n \n{\n\n  \necho\n \nat i \n$i\n.\n/br\n;\n\n  \nfor\n \n(\n$j\n \n=\n \n0\n;\n \n$j\n \nlt\n;\n \n10\n;\n \n$j\n++\n){\n\n    \nif\n \n(\n$j\n \n==\n \n7\n)\n\n      \nbreak\n \n2\n;\n\n    \necho\n \nat j \n$j\n \n;\n\n  \n}\n\n\n}\n\n\nat\n \ni\n \n0\n  \n\nat\n \nj\n \n0\n \nat\n \nj\n \n1\n \nat\n \nj\n \n2\n \nat\n \nj\n \n3\n \nat\n \nj\n \n4\n \nat\n \nj\n \n5\n \nat\n \nj\n \n6\n\n\n\nfor\n \n(\n$i\n=\n0\n;\n \n$i\nlt\n;\n10\n;\n \n$i\n++\n)\n \n{\n\n  \necho\n \nat i \n$i\n.\n/br\n;\n\n  \nfor\n \n(\n$j\n \n=\n \n0\n;\n \n$j\n \nlt\n;\n \n10\n;\n \n$j\n++\n){\n\n    \nif\n \n(\n$j\n \n==\n \n7\n)\n\n      \ncontinue\n \n2\n;\n\n    \necho\n \nat j \n$j\n \n;\n\n  \n}\n\n\n}\n\n\n\nat\n \ni\n \n0\n  \n\nat\n \nj\n \n0\n \nat\n \nj\n \n1\n \nat\n \nj\n \n2\n \nat\n \nj\n \n3\n \nat\n \nj\n \n4\n \nat\n \nj\n \n5\n \nat\n \nj\n \n6\n \nat\n \ni\n \n1\n  \n\nat\n \nj\n \n0\n \nat\n \nj\n \n1\n \nat\n \nj\n \n2\n \nat\n \nj\n \n3\n \nat\n \nj\n \n4\n \nat\n \nj\n \n5\n \nat\n \nj\n \n6\n \nat\n \ni\n \n2\n  \n\nat\n \nj\n \n0\n \nat\n \nj\n \n1\n \nat\n \nj\n \n2\n \nat\n \nj\n \n3\n \nat\n \nj\n \n4\n \nat\n \nj\n \n5\n \nat\n \nj\n \n6\n \nat\n \ni\n \n3\n  \n\nat\n \nj\n \n0\n \nat\n \nj\n \n1\n \nat\n \nj\n \n2\n \nat\n \nj\n \n3\n \nat\n \nj\n \n4\n \nat\n \nj\n \n5\n \nat\n \nj\n \n6\n \nat\n \ni\n \n4\n  \n\nat\n \nj\n \n0\n \nat\n \nj\n \n1\n \nat\n \nj\n \n2\n \nat\n \nj\n \n3\n \nat\n \nj\n \n4\n \nat\n \nj\n \n5\n \nat\n \nj\n \n6\n \nat\n \ni\n \n5\n  \n\nat\n \nj\n \n0\n \nat\n \nj\n \n1\n \nat\n \nj\n \n2\n \nat\n \nj\n \n3\n \nat\n \nj\n \n4\n \nat\n \nj\n \n5\n \nat\n \nj\n \n6\n \nat\n \ni\n \n6\n  \n\nat\n \nj\n \n0\n \nat\n \nj\n \n1\n \nat\n \nj\n \n2\n \nat\n \nj\n \n3\n \nat\n \nj\n \n4\n \nat\n \nj\n \n5\n \nat\n \nj\n \n6\n \nat\n \ni\n \n7\n  \n\nat\n \nj\n \n0\n \nat\n \nj\n \n1\n \nat\n \nj\n \n2\n \nat\n \nj\n \n3\n \nat\n \nj\n \n4\n \nat\n \nj\n \n5\n \nat\n \nj\n \n6\n \nat\n \ni\n \n8\n  \n\nat\n \nj\n \n0\n \nat\n \nj\n \n1\n \nat\n \nj\n \n2\n \nat\n \nj\n \n3\n \nat\n \nj\n \n4\n \nat\n \nj\n \n5\n \nat\n \nj\n \n6\n \nat\n \ni\n \n9\n  \n\nat\n \nj\n \n0\n \nat\n \nj\n \n1\n \nat\n \nj\n \n2\n \nat\n \nj\n \n3\n \nat\n \nj\n \n4\n \nat\n \nj\n \n5\n \nat\n \nj\n \n6\n\n\n?\n\n\n\n\n\n\n\nswitch statement\n\n\n\n\n\n\ncomparison is loose (i.e., \n, not strict with =\n)\n\n\n\n\n\n\nwhen a case statement match is found, executes statements until end\n    of switch block or break/continue statement -\n fallthrough\n\n\n\n\n\n\ncontinue is similar to break \u2013 takes you out of switch\n\n\n\n\nuse it if you need continue 2; to get out of outside loop too\n\n\n\n\n\n\n\n\ncan be more efficient that nested if\n\n\n\n\n\n\ncondition expression is evaluated once only, compared using ==\n\n\n\n\n\n\nnested if \u2013 condition expression may be evaluated multiple times\n    (depending on how you code it)\n\n\n\n\n\n\n\n\n\n\ncase expression must evaluate to integer/floating point/string\n\n\n\n\ncan be an expression\n\n\n\n\n\n\n\n\nBe careful \u2013 switch statement uses ==\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n?php\n\n\n$mixed\n \n=\n \n0\n;\n\n\nswitch\n \n(\n$mixed\n)\n \n{\n\n    \ncase\n \nNULL\n:\n \n//true here\n\n        \necho\n \nNULL\n;\n\n        \nbreak\n;\n\n    \ncase\n \n0\n:\n\n        \necho\n \nzero\n;\n\n        \nbreak\n;\n\n    \ndefault\n:\n\n        \necho\n \nother\n;\n\n\n}\n\n\n\n//SOLUTION:\n\n\n\n$mixed\n \n=\n \n0\n;\n\n\nswitch\n \n(\nTRUE\n)\n \n{\n\n    \ncase\n \n(\n$mixed\n \n===\n \nNULL\n)\n:\n\n        \necho\n \nNULL\n;\n\n        \nbreak\n;\n\n    \ncase\n \n(\n$mixed\n \n===\n \n0\n)\n:\n\n        \necho\n \nzero\n;\n\n        \nbreak\n;\n\n    \ndefault\n:\n\n        \necho\n \nother\n;\n\n\n}\n\n\n?\n\n\n\n\n\n\n\nExample \u2013 range check\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n?php\n\n\n$randomizer\n \n=\n \nrand\n(\n1\n,\n \n50\n);\n \n//random integer between 1 and 50 inclusive\n\n\nswitch\n \n(\ntrue\n)\n \n\n// it will match on the case that is true  \n\n\n{\n\n    \ncase\n \n(\n$randomizer\n \n \nlt\n;\n \n=\n \n20\n)\n:\n\n        \n$font\\\n \n_size\n \n=\n \n11\n;\n\n        \nbreak\n;\n\n\n    \ncase\n \n(\n$randomizer\n \n \nlt\n;\n \n=\n \n30\n)\n:\n\n        \n$font\\\n \n_size\n \n=\n \n16\n;\n\n        \nbreak\n;\n\n\n    \ncase\n \n(\n$randomizer\n \n \nlt\n;\n \n=\n \n40\n)\n:\n\n        \n$font\\\n \n_size\n \n=\n \n18\n;\n\n        \nbreak\n;\n\n\n    \ncase\n \n(\n$randomizer\n \n \nlt\n;\n \n=\n \n50\n)\n:\n\n        \n$font\\\n \n_size\n \n=\n \n20\n;\n\n        \nbreak\n;\n\n\n}\n\n\n?\n\n\n\n\n\n\nTernary operator - Beware\n\n\n\n\nLeft-to-right associativity (instead of right \u2013to-left)\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n?php\n\n\necho\n\u00a0\n(\ntrue\n \n?\n \n \ntrue\n \n:\n \nfalse\n \n?\n \nf\n \n:\n \nt\n);\n \n//prints f not true\n\n\n//equivalent to:\n\n\necho\n\u00a0\n((\ntrue\n\u00a0\n?\n\u00a0\ntrue\n\u00a0\n:\n\u00a0false\n)\n\u00a0\n?\n\u00a0\nf\n;\n\u00a0\n:\n\u00a0\nt\n;);\n\n\n//in other words, the result of first ternary is used in the next expression evaluation\n\n\n//\u00a0the\u00a0first\u00a0expression\u00a0is\u00a0evaluated\u00a0to\u00a0true,\u00a0which\n\n\n// is a non-empty) string, so it is true\n\n\n?\n\n\n\n\n\n\n\nExample\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n?php\n\n\n$arg\n \n=\n \nT\n;\n\n\n\n$vehicle\n \n=\n \n(\n \n$arg\n \n==\n \nB\n \n)\n \n?\n \nbus\n \n:\n \n(\n \n$arg\n \n==\n \nA\n)\n\n    \n?\n \nairplane\n \n:\n \n(\n \n$arg\n \n==\n \nT\n \n)\n\n    \n?\n \ntrain\n \n:\n \n(\n \n$arg\n \n==\n \nC\n \n)\n \n?\n \ncar\n \n:\n \n(\n \n$arg\n \n==\n \nH\n \n)\n\n    \n?\n \nhorse\n \n:\n \nfeet\n \n);\n\n\n\necho\n \n$vehicle\n;\n \n//horse\n\n\n?", 
            "title": "03 constructs"
        }, 
        {
            "location": "/Internet-App-Dev-III/03-constructs/#conditionals", 
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 ?php  if   ( condition )   { \n     // Do this!  }  if   ( condition )   { \n     // Do this!  }   else   { \n     // Do that!  }  if   ( condition1 )   { \n     // Do this!  }  elseif ( condition2 )   { \n         // Do that! \n     }   else   { \n         // Do whatever! \n     }   ?    ?php", 
            "title": "Conditionals"
        }, 
        {
            "location": "/Internet-App-Dev-III/03-constructs/#what-is-true", 
            "text": "ALL expressions are either true or false  True =   $var , if  var  has a value  other  than 0 (numeric or string), an   empty string, empty array,  FALSE , or  NULL   isset($var) , if  $var  has any value other than  NULL , including 0,   FALSE , or an empty string   TRUE ,  true ,  True , etc.", 
            "title": "What is true?"
        }, 
        {
            "location": "/Internet-App-Dev-III/03-constructs/#dangerous-behaviour", 
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 ?php  if   ( $msgs   =   10 )   //evaluates to 10, which is true!! \n\n     echo \u201c   you   have   ten   messages\u201d ;  if   ( strpos ( abcdefg ,   xyz ))   {   //evaluates to false   \n     echo   found it! ;  }   else   { \n     echo   didn\\ t find it. ;  }  ?    BUT!!!  if (strpos('abcdefg','abc')){ //evaluates to position 0 which is false  In PHP -  use  ===  to distinguish between 0 and false  1\n2\n3\n4\n5\n6\n7\n8 ?php  if   ( strpos ( abcdefg , abc )   !===   false ){   //evaluates false only if not  found ,   so   0   and   false   are   not   same   since   not   same   type    echo   found it! ;    } else {    echo   didn t find it.. ;    }  ?", 
            "title": "Dangerous behaviour"
        }, 
        {
            "location": "/Internet-App-Dev-III/03-constructs/#loops", 
            "text": "1\n2\n3\n4\n5\n6\n7\n8\n9 ?php  while   ( condition )   { \n     // Do something.  }  for   ( $i   =   1 ;   $i   lt ; =   10 ;   $i ++ )   { \n     echo   $i ;  }  ?", 
            "title": "Loops"
        }, 
        {
            "location": "/Internet-App-Dev-III/03-constructs/#break-and-continue", 
            "text": "break 2; //2  indicates number of enclosing structures to break out of    cannot pass in a variable as an argument to break    cannot break 0 or less    same for continue; - can tell it how many enclosing structures to\n    skip to the end   breaks out of the inner structures, continues the outer-most     Examples   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33 ?php  for   ( $i = 0 ;   $i lt ; 10 ;   $i ++ )   { \n   echo   at i  $i . /br ; \n   for   ( $j   =   0 ;   $j   lt ;   10 ;   $j ++ ){ \n     if   ( $j   ==   7 ) \n       break   2 ; \n     echo   at j  $j   ; \n   }  }  at   i   0    at   j   0   at   j   1   at   j   2   at   j   3   at   j   4   at   j   5   at   j   6  for   ( $i = 0 ;   $i lt ; 10 ;   $i ++ )   { \n   echo   at i  $i . /br ; \n   for   ( $j   =   0 ;   $j   lt ;   10 ;   $j ++ ){ \n     if   ( $j   ==   7 ) \n       continue   2 ; \n     echo   at j  $j   ; \n   }  }  at   i   0    at   j   0   at   j   1   at   j   2   at   j   3   at   j   4   at   j   5   at   j   6   at   i   1    at   j   0   at   j   1   at   j   2   at   j   3   at   j   4   at   j   5   at   j   6   at   i   2    at   j   0   at   j   1   at   j   2   at   j   3   at   j   4   at   j   5   at   j   6   at   i   3    at   j   0   at   j   1   at   j   2   at   j   3   at   j   4   at   j   5   at   j   6   at   i   4    at   j   0   at   j   1   at   j   2   at   j   3   at   j   4   at   j   5   at   j   6   at   i   5    at   j   0   at   j   1   at   j   2   at   j   3   at   j   4   at   j   5   at   j   6   at   i   6    at   j   0   at   j   1   at   j   2   at   j   3   at   j   4   at   j   5   at   j   6   at   i   7    at   j   0   at   j   1   at   j   2   at   j   3   at   j   4   at   j   5   at   j   6   at   i   8    at   j   0   at   j   1   at   j   2   at   j   3   at   j   4   at   j   5   at   j   6   at   i   9    at   j   0   at   j   1   at   j   2   at   j   3   at   j   4   at   j   5   at   j   6  ?", 
            "title": "Break and continue"
        }, 
        {
            "location": "/Internet-App-Dev-III/03-constructs/#switch-statement", 
            "text": "comparison is loose (i.e.,  , not strict with = )    when a case statement match is found, executes statements until end\n    of switch block or break/continue statement -  fallthrough    continue is similar to break \u2013 takes you out of switch   use it if you need continue 2; to get out of outside loop too     can be more efficient that nested if    condition expression is evaluated once only, compared using ==    nested if \u2013 condition expression may be evaluated multiple times\n    (depending on how you code it)      case expression must evaluate to integer/floating point/string   can be an expression     Be careful \u2013 switch statement uses ==   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27 ?php  $mixed   =   0 ;  switch   ( $mixed )   { \n     case   NULL :   //true here \n         echo   NULL ; \n         break ; \n     case   0 : \n         echo   zero ; \n         break ; \n     default : \n         echo   other ;  }  //SOLUTION:  $mixed   =   0 ;  switch   ( TRUE )   { \n     case   ( $mixed   ===   NULL ) : \n         echo   NULL ; \n         break ; \n     case   ( $mixed   ===   0 ) : \n         echo   zero ; \n         break ; \n     default : \n         echo   other ;  }  ?    Example \u2013 range check  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22 ?php  $randomizer   =   rand ( 1 ,   50 );   //random integer between 1 and 50 inclusive  switch   ( true )   // it will match on the case that is true    { \n     case   ( $randomizer     lt ;   =   20 ) : \n         $font\\   _size   =   11 ; \n         break ; \n\n     case   ( $randomizer     lt ;   =   30 ) : \n         $font\\   _size   =   16 ; \n         break ; \n\n     case   ( $randomizer     lt ;   =   40 ) : \n         $font\\   _size   =   18 ; \n         break ; \n\n     case   ( $randomizer     lt ;   =   50 ) : \n         $font\\   _size   =   20 ; \n         break ;  }  ?", 
            "title": "switch statement"
        }, 
        {
            "location": "/Internet-App-Dev-III/03-constructs/#ternary-operator-beware", 
            "text": "Left-to-right associativity (instead of right \u2013to-left)   1\n2\n3\n4\n5\n6\n7\n8 ?php  echo \u00a0 ( true   ?     true   :   false   ?   f   :   t );   //prints f not true  //equivalent to:  echo \u00a0 (( true \u00a0 ? \u00a0 true \u00a0 : \u00a0false ) \u00a0 ? \u00a0 f ; \u00a0 : \u00a0 t ;);  //in other words, the result of first ternary is used in the next expression evaluation  //\u00a0the\u00a0first\u00a0expression\u00a0is\u00a0evaluated\u00a0to\u00a0true,\u00a0which  // is a non-empty) string, so it is true  ?", 
            "title": "Ternary operator - Beware"
        }, 
        {
            "location": "/Internet-App-Dev-III/03-constructs/#example", 
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 ?php  $arg   =   T ;  $vehicle   =   (   $arg   ==   B   )   ?   bus   :   (   $arg   ==   A ) \n     ?   airplane   :   (   $arg   ==   T   ) \n     ?   train   :   (   $arg   ==   C   )   ?   car   :   (   $arg   ==   H   ) \n     ?   horse   :   feet   );  echo   $vehicle ;   //horse  ?", 
            "title": "Example"
        }, 
        {
            "location": "/Internet-App-Dev-III/06-forms/", 
            "text": "Http Methods\n\n\n\n\nGET\n - \nurl?name=value\nname2=value2\n\n\nquery string\n\n\nonly use for READ operations\n\n\nsearch query\n\n\nbookmark\n\n\nPOST - puts the name=value\nname2=value2 in http message body\n\n\nuse for WRITE operation =\n server side state change\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\nform\n \naction\n=\nscript.php\n \nmethod\n=\npost\n\n  \nlabel\n Enter name:\n    \ninput\n \ntype\n=\ntext\n\n           \nname\n=\nfirstname\n\n           \nvalue\n=\ndefault\n\n    \n/\n\n  \n/\nlabel\n\n  \ninput\n \ntype\n=\nradio\n\n         \nname\n=\nage\n\n         \nvalue\n=\n20\n\n  \n/\n\n  \ninput\n \ntype\n=\ncheckbox\n\n         \nname\n=\nhaircolour[]\n\n         \nvalue\n=\nblonde\n\n  \n/\n\n  \ntextarea\n \nrow\n=\n5\n \ncol\n=\n20\n \nname\n=\ncomment\n\n  \n/\ntextarea\n\n\n/\nform\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n?php\n\n  \nif\n \n(\n!\nempty\n(\n$\n.\nPOST\n[\nfirstname\n]))\n\n    \n$firstname\n \n=\n \n$_POST\n[\nfirstname\n];\n\n\nelse\n \n{\n\n  \necho\n \np class=\nerror\nYou must provide a name\n/p\n;\n\n  \n$firstname\n \n=\n \nNULL\n;\n\n\n}\n \n// validate presence of all input\n\n\nif\n \n(\n$firstname\n \n \n$email\n \n \n$numPushups\n \n!==\n \nNULL\n)\n\n  \necho\n \np\nHello \n$firstname\n at \n$email\n/p\n\n\n?\n\n\n\n\n\n\n\nSanitizing user input\n\n\nNever trust user input\n\n\nhtmlentities()\n\n\nTurns all special characters into HTML entity format\n\n\n\n\nhtmlentities($values)\n\n\n\n\nbrowserdisplays()\n\n\nThe characters don't interpret as HTML tags\n\n\n\n\nscripttags($value)\n\n\nremove all HTML tags\n\n\nfits your code:\n\n\n$firstname = htmlentities($_POST[\nfirstname\n])", 
            "title": "06 forms"
        }, 
        {
            "location": "/Internet-App-Dev-III/06-forms/#http-methods", 
            "text": "GET  -  url?name=value name2=value2  query string  only use for READ operations  search query  bookmark  POST - puts the name=value name2=value2 in http message body  use for WRITE operation =  server side state change    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 form   action = script.php   method = post \n   label  Enter name:\n     input   type = text \n            name = firstname \n            value = default \n     / \n   / label \n   input   type = radio \n          name = age \n          value = 20 \n   / \n   input   type = checkbox \n          name = haircolour[] \n          value = blonde \n   / \n   textarea   row = 5   col = 20   name = comment \n   / textarea  / form     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 ?php \n   if   ( ! empty ( $ . POST [ firstname ])) \n     $firstname   =   $_POST [ firstname ];  else   { \n   echo   p class= error You must provide a name /p ; \n   $firstname   =   NULL ;  }   // validate presence of all input  if   ( $firstname     $email     $numPushups   !==   NULL ) \n   echo   p Hello  $firstname  at  $email /p  ?", 
            "title": "Http Methods"
        }, 
        {
            "location": "/Internet-App-Dev-III/06-forms/#sanitizing-user-input", 
            "text": "Never trust user input", 
            "title": "Sanitizing user input"
        }, 
        {
            "location": "/Internet-App-Dev-III/06-forms/#htmlentities", 
            "text": "Turns all special characters into HTML entity format   htmlentities($values)", 
            "title": "htmlentities()"
        }, 
        {
            "location": "/Internet-App-Dev-III/06-forms/#browserdisplays", 
            "text": "The characters don't interpret as HTML tags   scripttags($value)  remove all HTML tags  fits your code:  $firstname = htmlentities($_POST[ firstname ])", 
            "title": "browserdisplays()"
        }, 
        {
            "location": "/Internet-App-Dev-III/07-functions/", 
            "text": "Functions\n\n\nSyntax\n\n\n1\n2\n3\n4\n5\nfunction\n \nfunction_name\n(\n \n[\nargument_list\n \n\u2026\n]\n \n)\n\n\n{\n\n    \n[\nstatements\n;]\n\n    \n[\nreturn\n \nreturn_values\n;]\n\n\n}\n\n\n\n\n\n\n\nOptional: Type declaration\n\n\nType declarations allow functions to require that parameters are of a certain type at call time\nvalid types:\n* array\n* callable (i.e., a function)\n* bool\n* float\n* int\n* string\n* class/interface\n* self (i.e., parameter is an instanceof the same class as where the method is)\n* callback functions -\n a lot like delegates \u2013 first class function (function is assigned to a variable)\nphp 7 -\n exception thrown if type is not as expected\n\n\nScope of functions\n\n\nAll functions in PHP have the global scope\nthey can be called from anywhere once they exist\nfunctions do not need to be defined before they are referenced \nEXCEPT\n when\nthey are defined in a conditional block\nor they are defined within another a function\nin this case, available only after program execution has reached them\n\n\nFunctions within functions\n\n\nAny valid PHP code may appear inside a function, even other functions and class definitions\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nfunction\n\u00a0\nbuyBeer\n()\n\u00a0\n{\n\u00a0\u00a0\n    \nfunction\n\u00a0\ndrinkBeer\n()\n \n{\n\n        \necho\n\u00a0\nI\u00a0don\nt\u00a0exist\u00a0until\u00a0buyBeer()\u00a0is\u00a0called.\\n\n;\n\u00a0\u00a0\n    \n}\n\n\n}\n\n\n/*\u00a0We\u00a0can\nt\u00a0call\u00a0drinkBeer()\u00a0yet\u00a0since\u00a0it\u00a0doesn\nt\u00a0exist.\u00a0*/\n\n\nbuyBeer\n();\n\n\n\n/*\u00a0Now\u00a0we\u00a0can\u00a0call\u00a0drinkBeer(), buyBeer()\ns\u00a0processing\u00a0has \u00a0made\u00a0it\u00a0accessible.\u00a0*/\n\n\ndrinkBeer\n();\n\n\n\n\n\n\nWhy useful? \ndrinkBeer\n function is only available after \nbuyBeer\n function is called to initialize everything!\n\n\nConditionally defined functions\nfunction definition within a another construct, which may not yet be interpreted\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n$adult\n\u00a0\n=\n\u00a0\ntrue\n;\n\n\n/*\u00a0We\u00a0can\nt\u00a0call\u00a0drinkbeer()\u00a0from\u00a0here\u00a0\u00a0since\u00a0it\u00a0doesn\nt\u00a0exist\u00a0yet, but\u00a0we\u00a0can\u00a0call\u00a0buybeer()\u00a0*/\n\n\n\nbuybeer\n();\n \n//visible since it is in global scope\n\n\n\nif\n\u00a0\n(\n$adult\n)\n\u00a0\n{\n\u00a0\u00a0\n    \nfunction\n\u00a0\ndrinkbeer\n(){\n\n        \n//this is defining drinkbeer ONLY if $adult was true when these lines were executed\u00a0\u00a0\u00a0\u00a0\n\n        \necho\n\u00a0\nI\u00a0don\nt\u00a0exist\u00a0until\u00a0program\u00a0execution, NOT compilation,\u00a0reaches\u00a0me.\n;\n\u00a0\u00a0\n    \n}\n\n\n}\n\n\n/*\u00a0Now\u00a0we\u00a0can\u00a0safely\u00a0call\u00a0drinkbeer()\u00a0\u00a0\u00a0since\u00a0$adult\u00a0was\u00a0true\u00a0*/\n\n\n$adult\n \n=\n \nfalse\n;\n \n\n\n//no impact since $adult was true when the code above was executeddrinkbeer();\n\n\nfunction\n\u00a0\nbuybeer\n()\n \n{\n\u00a0\u00a0\n    \necho\n\u00a0\nI\u00a0exist\u00a0immediately\u00a0upon\u00a0program\u00a0start since compiler found me.\\n\n;\n\n\n}\n\n\n\n\n\n\nFunction overloading\n\n\nPHP does not support function overloading\nfunction name only is used to determine signature\ncannot redefine previously-declared functions\nto work around lack of overloading -\n variable number of arguments and default arguments\n\n\nDefault argument values\n\n\ndefault values for scalar arguments\n\n1\n2\n3\n4\n5\n6\n7\nfunction\n\u00a0\nmakecoffee\n(\n$type\n\u00a0\n=\n\u00a0\ncappuccino\n){\n\u00a0\u00a0\u00a0\u00a0\n    \nreturn\n\u00a0\nMaking\u00a0a\u00a0cup\u00a0of\u00a0$type.\\n\n;\n\n\n}\n\n\necho\n\u00a0\nmakecoffee\n();\n  \n\n// Making a cup of cappuccino.echo\u00a0makecoffee(null); \n\n\n// Making a cup of .echo\u00a0makecoffee(\nespresso\n); \n\n\n// Making a cup of espresso. \n\n\n\n\n\n- default value must be a constant expression\n- defaults after non-default arguments, otherwise warning \n\n\nExample\n\n\n1\n2\n3\n4\n5\n6\n7\n?php\n\n\nfunction\u00a0makeyogurt\n(\n$type\u00a0\n=\n\u00a0\ngreek\n,\n\u00a0\n$flavour\n){\n\u00a0\u00a0\u00a0\u00a0\n\n    \nreturn\n\u00a0\nMaking\u00a0a\u00a0bowl\u00a0of\u00a0\n$type\u00a0$flavour\n.\n\\n\n;\n\n\n}\n\u00a0\n\n\necho\n\u00a0makeyogurt\n(\nraspberry\n);\n\u00a0\u00a0\n\n\n//Warning: Missing argument 2 in call to makeyogurt() in /usr/local/etc/httpd/htdocs/phptest/functest.html on line 41 Making a bowl of raspberry . \n\n\n?\n\u00a0\n\n\n\n\n\n\n\nDefault values \u2013 non-scalar (arrays)\n\n\n1\n2\n3\n?php\n\n\nfunction\u00a0makecoffee\n(\n$types\u00a0\n=\n\u00a0\n[\ncappuccino\n],\n\u00a0\n$coffeeMaker\u00a0\n=\nNULL\n){\n\u00a0\u00a0\u00a0\u00a0\n$device\u00a0\n=\n\u00a0is_null\n(\n$coffeeMaker\n)\n\u00a0\n?\n\u00a0\nhands\n\u00a0\n:\n\u00a0\n$coffeeMaker\n;\n\u00a0\u00a0\u00a0\u00a0return\u00a0\nMaking\u00a0a\u00a0cup\u00a0of\u00a0\n.\nimplode\n(\n,\u00a0\n,\n\u00a0\n$types\n)\n.\n\u00a0with\u00a0\n$device\n.\n\\n\n;}\necho\n\u00a0makecoffee\n();\necho\n\u00a0makecoffee\n([\ncappuccino\n,\n\u00a0\nlavazza\n],\n\u00a0\nteapot\n);\n\n\n?\n\n\n\n\n\n\n\nVariable length arg list\n\n\n\u2026 since PHP 5.6 \n\n\nfunction sum(\u2026$numbers)   //will be passed in as an array\n\n\nPassing by reference\n\n\n\n\n\n\nDefault = pass by value, even for arrays (arrays are treated like scalars)\n\n\n\n\n\n\nTo pass by reference: \n prefix on the argument name in function definition\n\n1\n2\n3\n?php\n\n\nfunction\u00a0add_some_extra\n(\n$string\n){\n\u00a0\u00a0\u00a0\u00a0\n$string\u00a0\n.=\n\u00a0\nand\u00a0something\u00a0extra.\n;}\n$str\u00a0\n=\n\u00a0\nThis\u00a0is\u00a0a\u00a0string,\u00a0\n;\nadd_some_extra\n(\n$str\n);\necho\n\u00a0\n$str\n;\n\u00a0\u00a0\u00a0\u00a0\n//\u00a0outputs\u00a0This\u00a0is\u00a0a\u00a0string,\u00a0and\u00a0something\u00a0extra.\n\n\n?\n\n\n\n\n\n\n\n\n\n\nReturn values\n\n\nOptional return statement\n\n\n\n\nIf no return, \nNULL\n is returned\n\n\nTo return a reference from a function: reference operator \n in both the function header and when assigning the return value\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n?php\n\n\n// You have to force pass by reference and return by reference on scalarsfunction \nincx($x)\n\n\n{\n\n    \n$y\n \n=\n \n$x\n++\n;\n\n    \nreturn\n \n$y\n;\n\n\n}\n\n\n$x1\n \n=\n \n1\n;\n\n\n$x2\n \n=\n \nincx\n(\n$x1\n);\n\n\necho\n \n$x1\n,\n \n$x2\n;\n \n// both are 1\n\n\nVariable\n \nfunction\n \nnames\n\n\n$func\n=\n \ntest\u2019\n;\n\n\n\n$func\n();\n \n// invokes test()\n\n\n?\n\n\n\n\n\n\n\nUsing variable function names for textbox validation\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n?php\n\n\n/**\u00a0\n\n\n* This\u00a0function\u00a0can\u00a0be\u00a0used\u00a0to\u00a0check\u00a0the\u00a0sanity\u00a0\n\n\n* of\u00a0variables\u00a0\u00a0\u00a0\u00a0\n\n\n*\u00a0@param\u00a0string\u00a0$name\u00a0The\u00a0input\u00a0name\u00a0you\u00a0would\u00a0like\u00a0to\u00a0check    \n\n\n* @param string $type The type expected (numeric, int, float, string\u00a0\u00a0\u00a0\u00a0\n\n\n*\u00a0@param\u00a0int\u00a0$maxlength\u00a0The\u00a0maximum\u00a0length\u00a0of\u00a0the\u00a0variable\u00a0\u00a0\u00a0\u00a0\n\n\n* @return\u00a0bool if invalid, null if error, else the value\u00a0\u00a0\u00a0\u00a0\n\n\n*/\n\n\nfunction\n \nvalidateTextbox\n(\n$name\n,\n \n$type\n,\n \n$maxlength\n)\n \n{\n\n    \nif\n \n(\n!\nisset\n(\n$_POST\n[\n$name\n]))\n\n        \nreturn\n \nFALSE\n;\n\n    \n$value\n \n=\n \ntrim\n(\n$_POST\n[\n$name\n]);\n\n    \nif\n \n(\nempty\n(\n$value\n))\n\n        \nreturn\n \nFALSE\n;\n\n    \n$datatype\n \n=\n \nis_\u2019.$type; //variable function name\n\n\n       //make sure it is indeed a function\n\n\n    if (is_callable($datatype)) {\n\n\n        //can now invoke $datatype\n\n\n        if(!$datatype($value))\n\n\n            return FALSE;\n\n\n        switch ($type) {\n\n\n            case \nstring\n: $value = htmlentities($_POST[$name]);\n\n\n                        if (strlen($value) \n $maxlength)\n\n\n                            return FALSE;\n\n\n                        return $value;\n\n\n            case \nint\n:\n\n\n            case \nnumeric\n:\n\n\n            case \nfloat\n:\n   \nif\n \n(\n$value\n \n \n$maxlength\n)\n\n                                \nreturn\n \nFALSE\n;\n\n                            \nreturn\n \n$value\n;\n\n        \n}\n\n        \nreturn\n \nFALSE\n;\n      \n    \n}\n\n\n}\n \n//will return NULL if $datatype was not callable\n\n\n?\n\n\n\n\n\n\n\nUsing it\n\n\n1\n2\n3\n4\n5\n6\n7\n?php\n\n\n$fname\n \n=\n \nvalidateTextbox\n(\nfname\n,\n \nstring\n,\n \n20\n);\n\n\nif\n \n(\n$fname\n \n===\n \nNULL\n)\n\n    \nexit\n;\n \n//program error\n\n\nif\n \n(\n$fname\n \n===\n \nFALSE\n)\n\n    \necho\n \np class=\nerror\nYou forgot to enter your first name!\n/p\n;\n\n\n?\n\n\n\n\n\n\n\nVariable scope - Page\n\n\nIf you define a variable, the rest of the page can access it\n\n\nIncluded files act as if they were part of the original (including) script, variables defined before an include( ) line are available to the included file\n\n1\n2\n3\n4\n5\n?php\n\n\n$a\u00a0\n=\n\u00a01\n;\n\n\ninclude\n\u00a0\nb.inc\n;\n \n\n//$a is available inside b.inc script\n\n\n?\n\n\n\n\n\nVariables defined within the included file are available to the parent (including) script after the \ninclude()\n line.\n\n\nA php script is all the code sent to the PHP interpreter, irregardless of php blocks within the script\n\n\n1\n2\n3\n4\n?php\n \n\n$page_title\n \n=\n \nWelcome to this Site!\n;\n\n\ninclude\n \nincludes/header.html.inc\n;\n\n\n?\n\n\n\n\n\n\n\nIn \nheader.html.inc\n:\n\n1\n2\nh1\nLorem Ipsum \n?php echo $page_title; ?\n \n/\nh1\n\nthus variables defined in an included file are available throughout the script\n\n\n\n\n\nVariable scope - function\n\n\nUser-defined functions have their own scope: \n* Variables defined within a function are not available outside of it\n* Variables defined outside of a function are not available within it.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n?php\n\n\n$a\u00a0\n=\n\u00a01\n;\n\u00a0\n\n\n/*\u00a0page\u00a0scope\u00a0*/\n\u00a0\n\n\nfunction\u00a0test\n(){\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\n    \necho\n\u00a0\n$a\n;\n\u00a0\n/*\u00a0reference\u00a0to\u00a0local\u00a0scope\u00a0variable\u00a0*/\n\u00a0\n  \n    \n//$a will initialized to \n\u201d since it is used in an echo statement \n\n\n}\n\u00a0\n\n\ntest\n();\n\n\n?\n\n\n\n\n\n\n\nglobal keyword\n\n\nTo alter the variable scope within a function, you can use the global statement.\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n?php\n\n\nfunction\n \nfunction_name\n()\n \n{\n\n    \nglobal\n \n$var\n;\n\n    \necho\n \n$var\n;\n\n    \n$var\n++\n;\n\n\n}\n\n\n$var\n \n=\n \n20\n;\n\n\nfunction_name\n();\n \n// Function call.\n\n\necho\n \n$var\n;\n\n\n?\n\n\n\n\n\nIn this example, \n$var\n inside of the function is now the same as \n$var\n outside of it. \nif \n$var\n changes inside of the function, the external \n$var\n\u2019s value will also change.\n\n\n\n\nSame as passing by reference\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n?php\n\n\n$a\n=\n \n1\n;\n\n\n$b\n=\n \n2\n;\n\n\nfunction\n \nmyFunction\n(){\n\n    \nglobal\n \n$a\n,\n \n$b\n;\n\n    \n$a\n=\n \n$a\n+\n \n$b\n;\n\n\n}\n\n\nmyFunction\n();\n\n\n$a\n=\n \n1\n;\n\n\n$b\n \n=\n \n2\n;\n\n\nfunction\n \nmyFunction\n(\n$var1\n,\n \n$var2\n){\n\n    \n$var1\n \n=\n \n$var1\n \n+\n \n$var2\n;\n\n\n}\n\n\nmyFunction\n(\n$a\n,\n \n$b\n);\n\n\n?\n\n\n\n\n\n\n\n\n\nAnother option for globals:\n\n\n$GLOBALS\n array references all variables available in global scope\n\n\nThe \n$GLOBALS\n array is an associative array with the name of the global variable name being the key and the contents of that variable being the value of the array element.\n\n\n$GLOBALS\n is a superglobal. It exists in any scope (page and function)\n\n1\n2\n3\n4\n5\n6\n7\n8\n?php\n\n\n$a\u00a0\n=\n\u00a01\n;\n\n\n$b\u00a0\n=\n\u00a02\n;\n\n\nfunction\u00a0myFunction\n(){\n\u00a0\u00a0\u00a0\u00a0\n\n    \n$GLOBALS\n[\na\n]\n\u00a0\n=\n\u00a0\n$GLOBALS\n[\na\n]\n\u00a0\n+\n\u00a0\n$GLOBALS\n[\nb\n];\n\n\n}\n\u00a0\n\n\nsum\n();\n\n\n?\n\n\n\n\n\n\nSummary \u2013 Variable scope\n\n\n\n\n\n\nSuperglobal \u2013 arrays that are available anywhere\n\n\n\n\n\n\nGlobal or Page - variables defined at the page level (ie, not within a function) \u2013 accessible throughout page after they are set\n\n\n\n\nIncludes any included files\n\n\n\n\n\n\nLocal - Function have their own scope\n\n\nVariables here are locally scoped\n\n\nTo access the globally scoped variables, need the global keyword\n\n\nglobal $var;\n\n\n\n\n\n\nOr pass as a reference argument to function\n\n\nOr access the \n$GLOBALS\n super global array\n\n\nKeys are all variables at global scope\n\n\n\n\n\n\n\n\n\n\n\n\nStatic variables within functions\n\n\nA static variable exists only in a local function scope, but it does not lose its value when program execution leaves this scope\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n?php\n\n\nfunction\u00a0test\n(){\n\u00a0\u00a0\u00a0\u00a0\n\n    \nstatic\n\u00a0\n$a\u00a0\n=\n\u00a00\n;\n  \n    \n//only runs on first function invocation\n\n    \n//cannot initially assign to an expression \u2013 must be resolved at compile-time\u00a0\u00a0\u00a0\u00a0\n\n    \necho\n\u00a0\n$a\n;\n\u00a0\u00a0\u00a0\u00a0\n\n    \n$a\n++\n;\n\n\n}\n\n\n?\n\n\n\n\n\n- very useful for recursion\n\n\n\n\nPHP makes two passes over a script\n\n\nPass 1: Compile \u2013 parsing of the script\n\n\n\n\ndone only once when the script is loaded into memory (through use of an opcode cache)\n\n\n\n\nPass 2: Interpret / execute\n\n\n\n\nConstants\n\n\n\n\nOnce you have defined a constant, its value is set for the remainder of the program and cannot be altered.\n\n\nConstant must NOT be prefaced with a $ sign (as with regular variables)\n\n\nCan only be defined using the define function \n\n\nCase sensitive\n\n\nConvention: Use only uppercase for constant variable names (convention)\n\n\nSuperglobal scope\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n?php\n\n\ndefine\n \n(\nNAME\n,\n \nvalue\n);\n\n\n\ndefine\n \n(\nUSERNAME\n,\n \njaya\n);\n\n\ndefine\n \n(\nPI\n,\n \n3.14\n);\n\n\n\necho\n \nHello, USERNAME\n;\n \n// no expansion of constants!\n\n\necho\n \nHello, \n \n.\n \nUSERNAME\n;\n\n\n?", 
            "title": "07 functions"
        }, 
        {
            "location": "/Internet-App-Dev-III/07-functions/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/Internet-App-Dev-III/07-functions/#syntax", 
            "text": "1\n2\n3\n4\n5 function   function_name (   [ argument_list   \u2026 ]   )  { \n     [ statements ;] \n     [ return   return_values ;]  }", 
            "title": "Syntax"
        }, 
        {
            "location": "/Internet-App-Dev-III/07-functions/#optional-type-declaration", 
            "text": "Type declarations allow functions to require that parameters are of a certain type at call time\nvalid types:\n* array\n* callable (i.e., a function)\n* bool\n* float\n* int\n* string\n* class/interface\n* self (i.e., parameter is an instanceof the same class as where the method is)\n* callback functions -  a lot like delegates \u2013 first class function (function is assigned to a variable)\nphp 7 -  exception thrown if type is not as expected", 
            "title": "Optional: Type declaration"
        }, 
        {
            "location": "/Internet-App-Dev-III/07-functions/#scope-of-functions", 
            "text": "All functions in PHP have the global scope\nthey can be called from anywhere once they exist\nfunctions do not need to be defined before they are referenced  EXCEPT  when\nthey are defined in a conditional block\nor they are defined within another a function\nin this case, available only after program execution has reached them", 
            "title": "Scope of functions"
        }, 
        {
            "location": "/Internet-App-Dev-III/07-functions/#functions-within-functions", 
            "text": "Any valid PHP code may appear inside a function, even other functions and class definitions  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 function \u00a0 buyBeer () \u00a0 { \u00a0\u00a0\n     function \u00a0 drinkBeer ()   { \n         echo \u00a0 I\u00a0don t\u00a0exist\u00a0until\u00a0buyBeer()\u00a0is\u00a0called.\\n ; \u00a0\u00a0\n     }  }  /*\u00a0We\u00a0can t\u00a0call\u00a0drinkBeer()\u00a0yet\u00a0since\u00a0it\u00a0doesn t\u00a0exist.\u00a0*/  buyBeer ();  /*\u00a0Now\u00a0we\u00a0can\u00a0call\u00a0drinkBeer(), buyBeer() s\u00a0processing\u00a0has \u00a0made\u00a0it\u00a0accessible.\u00a0*/  drinkBeer ();    Why useful?  drinkBeer  function is only available after  buyBeer  function is called to initialize everything!  Conditionally defined functions\nfunction definition within a another construct, which may not yet be interpreted  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 $adult \u00a0 = \u00a0 true ;  /*\u00a0We\u00a0can t\u00a0call\u00a0drinkbeer()\u00a0from\u00a0here\u00a0\u00a0since\u00a0it\u00a0doesn t\u00a0exist\u00a0yet, but\u00a0we\u00a0can\u00a0call\u00a0buybeer()\u00a0*/  buybeer ();   //visible since it is in global scope  if \u00a0 ( $adult ) \u00a0 { \u00a0\u00a0\n     function \u00a0 drinkbeer (){ \n         //this is defining drinkbeer ONLY if $adult was true when these lines were executed\u00a0\u00a0\u00a0\u00a0 \n         echo \u00a0 I\u00a0don t\u00a0exist\u00a0until\u00a0program\u00a0execution, NOT compilation,\u00a0reaches\u00a0me. ; \u00a0\u00a0\n     }  }  /*\u00a0Now\u00a0we\u00a0can\u00a0safely\u00a0call\u00a0drinkbeer()\u00a0\u00a0\u00a0since\u00a0$adult\u00a0was\u00a0true\u00a0*/  $adult   =   false ;   //no impact since $adult was true when the code above was executeddrinkbeer();  function \u00a0 buybeer ()   { \u00a0\u00a0\n     echo \u00a0 I\u00a0exist\u00a0immediately\u00a0upon\u00a0program\u00a0start since compiler found me.\\n ;  }", 
            "title": "Functions within functions"
        }, 
        {
            "location": "/Internet-App-Dev-III/07-functions/#function-overloading", 
            "text": "PHP does not support function overloading\nfunction name only is used to determine signature\ncannot redefine previously-declared functions\nto work around lack of overloading -  variable number of arguments and default arguments", 
            "title": "Function overloading"
        }, 
        {
            "location": "/Internet-App-Dev-III/07-functions/#default-argument-values", 
            "text": "default values for scalar arguments 1\n2\n3\n4\n5\n6\n7 function \u00a0 makecoffee ( $type \u00a0 = \u00a0 cappuccino ){ \u00a0\u00a0\u00a0\u00a0\n     return \u00a0 Making\u00a0a\u00a0cup\u00a0of\u00a0$type.\\n ;  }  echo \u00a0 makecoffee ();    // Making a cup of cappuccino.echo\u00a0makecoffee(null);   // Making a cup of .echo\u00a0makecoffee( espresso );   // Making a cup of espresso.    \n- default value must be a constant expression\n- defaults after non-default arguments, otherwise warning", 
            "title": "Default argument values"
        }, 
        {
            "location": "/Internet-App-Dev-III/07-functions/#example", 
            "text": "1\n2\n3\n4\n5\n6\n7 ?php  function\u00a0makeyogurt ( $type\u00a0 = \u00a0 greek , \u00a0 $flavour ){ \u00a0\u00a0\u00a0\u00a0 \n     return \u00a0 Making\u00a0a\u00a0bowl\u00a0of\u00a0 $type\u00a0$flavour . \\n ;  } \u00a0  echo \u00a0makeyogurt ( raspberry ); \u00a0\u00a0  //Warning: Missing argument 2 in call to makeyogurt() in /usr/local/etc/httpd/htdocs/phptest/functest.html on line 41 Making a bowl of raspberry .   ?", 
            "title": "Example"
        }, 
        {
            "location": "/Internet-App-Dev-III/07-functions/#default-values-non-scalar-arrays", 
            "text": "1\n2\n3 ?php  function\u00a0makecoffee ( $types\u00a0 = \u00a0 [ cappuccino ], \u00a0 $coffeeMaker\u00a0 = NULL ){ \u00a0\u00a0\u00a0\u00a0 $device\u00a0 = \u00a0is_null ( $coffeeMaker ) \u00a0 ? \u00a0 hands \u00a0 : \u00a0 $coffeeMaker ; \u00a0\u00a0\u00a0\u00a0return\u00a0 Making\u00a0a\u00a0cup\u00a0of\u00a0 . implode ( ,\u00a0 , \u00a0 $types ) . \u00a0with\u00a0 $device . \\n ;} echo \u00a0makecoffee (); echo \u00a0makecoffee ([ cappuccino , \u00a0 lavazza ], \u00a0 teapot );  ?", 
            "title": "Default values \u2013 non-scalar (arrays)"
        }, 
        {
            "location": "/Internet-App-Dev-III/07-functions/#variable-length-arg-list", 
            "text": "\u2026 since PHP 5.6   function sum(\u2026$numbers)   //will be passed in as an array", 
            "title": "Variable length arg list"
        }, 
        {
            "location": "/Internet-App-Dev-III/07-functions/#passing-by-reference", 
            "text": "Default = pass by value, even for arrays (arrays are treated like scalars)    To pass by reference:   prefix on the argument name in function definition 1\n2\n3 ?php  function\u00a0add_some_extra ( $string ){ \u00a0\u00a0\u00a0\u00a0 $string\u00a0 .= \u00a0 and\u00a0something\u00a0extra. ;} $str\u00a0 = \u00a0 This\u00a0is\u00a0a\u00a0string,\u00a0 ; add_some_extra ( $str ); echo \u00a0 $str ; \u00a0\u00a0\u00a0\u00a0 //\u00a0outputs\u00a0This\u00a0is\u00a0a\u00a0string,\u00a0and\u00a0something\u00a0extra.  ?", 
            "title": "Passing by reference"
        }, 
        {
            "location": "/Internet-App-Dev-III/07-functions/#return-values", 
            "text": "Optional return statement   If no return,  NULL  is returned  To return a reference from a function: reference operator   in both the function header and when assigning the return value    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 ?php  // You have to force pass by reference and return by reference on scalarsfunction  incx($x)  { \n     $y   =   $x ++ ; \n     return   $y ;  }  $x1   =   1 ;  $x2   =   incx ( $x1 );  echo   $x1 ,   $x2 ;   // both are 1  Variable   function   names  $func =   test\u2019 ;  $func ();   // invokes test()  ?", 
            "title": "Return values"
        }, 
        {
            "location": "/Internet-App-Dev-III/07-functions/#using-variable-function-names-for-textbox-validation", 
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36 ?php  /**\u00a0  * This\u00a0function\u00a0can\u00a0be\u00a0used\u00a0to\u00a0check\u00a0the\u00a0sanity\u00a0  * of\u00a0variables\u00a0\u00a0\u00a0\u00a0  *\u00a0@param\u00a0string\u00a0$name\u00a0The\u00a0input\u00a0name\u00a0you\u00a0would\u00a0like\u00a0to\u00a0check      * @param string $type The type expected (numeric, int, float, string\u00a0\u00a0\u00a0\u00a0  *\u00a0@param\u00a0int\u00a0$maxlength\u00a0The\u00a0maximum\u00a0length\u00a0of\u00a0the\u00a0variable\u00a0\u00a0\u00a0\u00a0  * @return\u00a0bool if invalid, null if error, else the value\u00a0\u00a0\u00a0\u00a0  */  function   validateTextbox ( $name ,   $type ,   $maxlength )   { \n     if   ( ! isset ( $_POST [ $name ])) \n         return   FALSE ; \n     $value   =   trim ( $_POST [ $name ]); \n     if   ( empty ( $value )) \n         return   FALSE ; \n     $datatype   =   is_\u2019.$type; //variable function name         //make sure it is indeed a function      if (is_callable($datatype)) {          //can now invoke $datatype          if(!$datatype($value))              return FALSE;          switch ($type) {              case  string : $value = htmlentities($_POST[$name]);                          if (strlen($value)   $maxlength)                              return FALSE;                          return $value;              case  int :              case  numeric :              case  float :     if   ( $value     $maxlength ) \n                                 return   FALSE ; \n                             return   $value ; \n         } \n         return   FALSE ;       \n     }  }   //will return NULL if $datatype was not callable  ?", 
            "title": "Using variable function names for textbox validation"
        }, 
        {
            "location": "/Internet-App-Dev-III/07-functions/#using-it", 
            "text": "1\n2\n3\n4\n5\n6\n7 ?php  $fname   =   validateTextbox ( fname ,   string ,   20 );  if   ( $fname   ===   NULL ) \n     exit ;   //program error  if   ( $fname   ===   FALSE ) \n     echo   p class= error You forgot to enter your first name! /p ;  ?", 
            "title": "Using it"
        }, 
        {
            "location": "/Internet-App-Dev-III/07-functions/#variable-scope-page", 
            "text": "If you define a variable, the rest of the page can access it  Included files act as if they were part of the original (including) script, variables defined before an include( ) line are available to the included file 1\n2\n3\n4\n5 ?php  $a\u00a0 = \u00a01 ;  include \u00a0 b.inc ;   //$a is available inside b.inc script  ?   \nVariables defined within the included file are available to the parent (including) script after the  include()  line.  A php script is all the code sent to the PHP interpreter, irregardless of php blocks within the script  1\n2\n3\n4 ?php   $page_title   =   Welcome to this Site! ;  include   includes/header.html.inc ;  ?    In  header.html.inc : 1\n2 h1 Lorem Ipsum  ?php echo $page_title; ?   / h1 \nthus variables defined in an included file are available throughout the script", 
            "title": "Variable scope - Page"
        }, 
        {
            "location": "/Internet-App-Dev-III/07-functions/#variable-scope-function", 
            "text": "User-defined functions have their own scope: \n* Variables defined within a function are not available outside of it\n* Variables defined outside of a function are not available within it.  1\n2\n3\n4\n5\n6\n7\n8\n9 ?php  $a\u00a0 = \u00a01 ; \u00a0  /*\u00a0page\u00a0scope\u00a0*/ \u00a0  function\u00a0test (){ \u00a0\u00a0\u00a0\u00a0\u00a0 \n     echo \u00a0 $a ; \u00a0 /*\u00a0reference\u00a0to\u00a0local\u00a0scope\u00a0variable\u00a0*/ \u00a0   \n     //$a will initialized to  \u201d since it is used in an echo statement   } \u00a0  test ();  ?", 
            "title": "Variable scope - function"
        }, 
        {
            "location": "/Internet-App-Dev-III/07-functions/#global-keyword", 
            "text": "To alter the variable scope within a function, you can use the global statement.  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 ?php  function   function_name ()   { \n     global   $var ; \n     echo   $var ; \n     $var ++ ;  }  $var   =   20 ;  function_name ();   // Function call.  echo   $var ;  ?   \nIn this example,  $var  inside of the function is now the same as  $var  outside of it. \nif  $var  changes inside of the function, the external  $var \u2019s value will also change.   Same as passing by reference   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 ?php  $a =   1 ;  $b =   2 ;  function   myFunction (){ \n     global   $a ,   $b ; \n     $a =   $a +   $b ;  }  myFunction ();  $a =   1 ;  $b   =   2 ;  function   myFunction ( $var1 ,   $var2 ){ \n     $var1   =   $var1   +   $var2 ;  }  myFunction ( $a ,   $b );  ?", 
            "title": "global keyword"
        }, 
        {
            "location": "/Internet-App-Dev-III/07-functions/#another-option-for-globals", 
            "text": "$GLOBALS  array references all variables available in global scope  The  $GLOBALS  array is an associative array with the name of the global variable name being the key and the contents of that variable being the value of the array element.  $GLOBALS  is a superglobal. It exists in any scope (page and function) 1\n2\n3\n4\n5\n6\n7\n8 ?php  $a\u00a0 = \u00a01 ;  $b\u00a0 = \u00a02 ;  function\u00a0myFunction (){ \u00a0\u00a0\u00a0\u00a0 \n     $GLOBALS [ a ] \u00a0 = \u00a0 $GLOBALS [ a ] \u00a0 + \u00a0 $GLOBALS [ b ];  } \u00a0  sum ();  ?", 
            "title": "Another option for globals:"
        }, 
        {
            "location": "/Internet-App-Dev-III/07-functions/#summary-variable-scope", 
            "text": "Superglobal \u2013 arrays that are available anywhere    Global or Page - variables defined at the page level (ie, not within a function) \u2013 accessible throughout page after they are set   Includes any included files    Local - Function have their own scope  Variables here are locally scoped  To access the globally scoped variables, need the global keyword  global $var;    Or pass as a reference argument to function  Or access the  $GLOBALS  super global array  Keys are all variables at global scope", 
            "title": "Summary \u2013 Variable scope"
        }, 
        {
            "location": "/Internet-App-Dev-III/07-functions/#static-variables-within-functions", 
            "text": "A static variable exists only in a local function scope, but it does not lose its value when program execution leaves this scope 1\n2\n3\n4\n5\n6\n7\n8\n9 ?php  function\u00a0test (){ \u00a0\u00a0\u00a0\u00a0 \n     static \u00a0 $a\u00a0 = \u00a00 ;   \n     //only runs on first function invocation \n     //cannot initially assign to an expression \u2013 must be resolved at compile-time\u00a0\u00a0\u00a0\u00a0 \n     echo \u00a0 $a ; \u00a0\u00a0\u00a0\u00a0 \n     $a ++ ;  }  ?   \n- very useful for recursion   PHP makes two passes over a script  Pass 1: Compile \u2013 parsing of the script   done only once when the script is loaded into memory (through use of an opcode cache)   Pass 2: Interpret / execute", 
            "title": "Static variables within functions"
        }, 
        {
            "location": "/Internet-App-Dev-III/07-functions/#constants", 
            "text": "Once you have defined a constant, its value is set for the remainder of the program and cannot be altered.  Constant must NOT be prefaced with a $ sign (as with regular variables)  Can only be defined using the define function   Case sensitive  Convention: Use only uppercase for constant variable names (convention)  Superglobal scope 1\n2\n3\n4\n5\n6\n7\n8\n9 ?php  define   ( NAME ,   value );  define   ( USERNAME ,   jaya );  define   ( PI ,   3.14 );  echo   Hello, USERNAME ;   // no expansion of constants!  echo   Hello,    .   USERNAME ;  ?", 
            "title": "Constants"
        }, 
        {
            "location": "/Internet-App-Dev-III/08-cURL_DOMDocumentation/", 
            "text": "Using classes\n\n\n\n\nYou can directly call a constructor:\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n?php\n\n\n$object\n \n=\n \nnew\n \nSomeClass\n(\n\u2026\n);\n \n//allocates and initializes\n\n\n\n$object\n-\nmethod\n();\n \n//-\n is the member access operator, not .\n\n\n\n$object\n-\nattribute\n;\n \n//NOT $object-\n$attribute\n\n\n\nSomeClass\n::\nstaticFunction\n();\n \n//:: is the scope resolution operator\n\n\n\nunset\n(\n$object\n);\n \n//same as $object = null, optional if you want to tag for garbage collection\n\n\n?\n\n\n\n\n\n\n\ncURL methods\n\n\n\n\ncURL library and cURL command line tools facilitate programmatically transferring data using different protocols\n\n\nsupports protocols like http, https, ftp, \u2026\n\n\nuses a URL to indicate the source\n\n\nFunctions, not classes\n\n\n\n\nTypical cURL usage\n\n\n\n\ncurl_init\n Initializes the session and returns a cURL handle which can be passed to other cURL functions.\n\n\ncurl_setopt\n This is the main work horse of cURL library. This function can be called multiple times and specifies all the options in the cURL session i.e., sets up the request as we need it.\n\n\ncurl_exec\n \u2013 Executes a cURL request.\n\n\ncurl_close\n \u2013 Closes the current cURL session.\n\n\n\n\nExample\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n?php\n\n\n$url\n \n=\n \nfull url to scrape\n;\n\n\n\n//GET is the default\n\n\n\n//add your query string to your URL\n\n\n\ne\n.\ng\n.\n,\n \n$queryString\n \n=\n \n?year=1937\ntop=500\ncountry=US\norder=0\npage=10\n;\n\n\n\n$ch\n \n=\n \ncurl_init\n(\n$url\n);\n \n//curl handle\n\n\n\n//or $ch = curl_init();\n\n\n\n//curl_setopt($ch, CURLOPT_URL, $url);\n\n\n\ncurl_setopt\n(\n$ch\n,\n \nCURLOPT_RETURNTRANSFER\n,\n \ntrue\n);\n \n//not to display on the console\n\n\n\ncurl_setopt\n(\n$ch\n,\n \nCURLOPT_POST\n,\n \ntrue\n);\n \n// for POST request only\n\n\n\n$page\n \n=\n \ncurl_exec\n(\n$ch\n);\n \n//execute the request\n\n\n\ncurl_close\n(\n$ch\n);\n \n//close this curl session, deletes the $ch\n\n\n?\n\n\n\n\n\n\n\nDocument Object Model\n\n\n\n\nstandardized (by W3C) convention for representing HTML and XML documents\n\n\nNodes are organized into a tree structure\n\n\nparent / child / sibling / ancestor / descendant nodes\n\n\nnodes \u2013 elements\n\n\nthey can have attributes\n\n\nthey can have values (between the \n and \n tags)\n\n\nStandardized \u2013 used by browsers to parse a document to render it\n\n\nUsed by JavaScript \u2013 DOM also includes the event model and modification of the document\n\n\n\n\nPHP DOMDocument classes\n\n\nDOMDocument \u2013 root of the tree\n\n1\n2\n3\n4\n5\n?php\n\n\n$html\n \n=\n \nnew\n \nDOMDocument\n();\n\n\n\n$html\n-\nloadHTML\n(\n$page\n);\n \n//-\n member access operator, not .\n\n\n?\n\n\n\n\n\nOnce it is loaded, traverse through looking for the data\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n?php\n\n\n$rows\n \n=\n \n$html\n-\ngetElementsByTagName\n(\ntr\n);\n\n\n\n//returns a DOMNodeList that you can iterate through or get length\n\n\n\n//iterate through the DOMNodeList, looking for attributes of each DOMNode\n\n\n\nforeach\n(\n$rows\n \nas\n \n$row\n)\n\n\n\nif\n \n(\n$row\n-\ngetAttribute\n(\nclass\n)\n \n==\n \nerror\n)\n\n\n\n//Or get the first DOMNode if you know you need the first row:\n\n\n\n$first\n \n=\n \n$rows\n-\nitem\n(\n0\n);\n\n\n\n// With each DOMNode, get the value between tags:\n\n\n\necho\n \n$row\n-\nnodeValue\n;\n \n//NOTE: attribute, not a method call\n\n\n\n//OR get an attribute\n\n\n\necho\n \n$row\n-\ngetAttribute\n(\nclass\n);\n\n\n?\n\n\n\n\n\n\nErrors\n\n\n\n\nyou may find badly formed HTML pages when you scrape\n\n\nto suppress DOM errors from flooding your screen, use the \n@\n symbol in front of the variable to assign\n\n\nCheck source at validator.w3.org\\\n\n1\n@$html -\nloadHTML($page);\n\n\n\n\n\n\n@\n = error control operator (fondly known as the stfu operator)\n\n\n\n\nPrefix it to an expression so that any error messages that might have been generated are ignored\n\n\n\n\nExample:\n\n1\n$file = @file_get_contents(\nfileToRead\n); //no errors if file not found\n\n\n\n\n\n\n\n\nDOMXPath\n\n\n\n\nXPath (XML Path Language) is a query language for selecting nodes from an XML document.\n\n\nXPath was defined by W3C\n\n\nDOMXPath query method takes an XPath expression; the expression is evaluated with respect to a context node\n\n\nExamples:\n\n1\n2\n3\n4\n5\n6\n7\n8\n?php\n\n\n$xpath\n \n=\n \nnew\n \nDOMXPath\n(\n$html\n);\n\n\n\n$xpath\n-\nquery\n(\n//tr\n)\n \nreturns\n \nDOMNodeList\n \nwith\n \nall\n \ntr\n,\n \nrelative\n \nto\n \nroot\n\n\n\n$xpath\n-\nquery\n(\n.//tr\n,\n \n$DOMNodeOfATable\n)\n \n\n// returns DOMNodeList with all tr, relative to the $DOMNodeOfATable -\n so only those within that table\n\n\n?\n\n\n\n\n\nXPath reference material: \nhttp://archive.oreilly.com/pub/a/perl/excerpts/system-admin-with-perl/ten-minute-xpath-utorial.html", 
            "title": "08 cURL DOMDocumentation"
        }, 
        {
            "location": "/Internet-App-Dev-III/08-cURL_DOMDocumentation/#using-classes", 
            "text": "You can directly call a constructor:    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 ?php  $object   =   new   SomeClass ( \u2026 );   //allocates and initializes  $object - method ();   //-  is the member access operator, not .  $object - attribute ;   //NOT $object- $attribute  SomeClass :: staticFunction ();   //:: is the scope resolution operator  unset ( $object );   //same as $object = null, optional if you want to tag for garbage collection  ?", 
            "title": "Using classes"
        }, 
        {
            "location": "/Internet-App-Dev-III/08-cURL_DOMDocumentation/#curl-methods", 
            "text": "cURL library and cURL command line tools facilitate programmatically transferring data using different protocols  supports protocols like http, https, ftp, \u2026  uses a URL to indicate the source  Functions, not classes", 
            "title": "cURL methods"
        }, 
        {
            "location": "/Internet-App-Dev-III/08-cURL_DOMDocumentation/#typical-curl-usage", 
            "text": "curl_init  Initializes the session and returns a cURL handle which can be passed to other cURL functions.  curl_setopt  This is the main work horse of cURL library. This function can be called multiple times and specifies all the options in the cURL session i.e., sets up the request as we need it.  curl_exec  \u2013 Executes a cURL request.  curl_close  \u2013 Closes the current cURL session.", 
            "title": "Typical cURL usage"
        }, 
        {
            "location": "/Internet-App-Dev-III/08-cURL_DOMDocumentation/#example", 
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 ?php  $url   =   full url to scrape ;  //GET is the default  //add your query string to your URL  e . g . ,   $queryString   =   ?year=1937 top=500 country=US order=0 page=10 ;  $ch   =   curl_init ( $url );   //curl handle  //or $ch = curl_init();  //curl_setopt($ch, CURLOPT_URL, $url);  curl_setopt ( $ch ,   CURLOPT_RETURNTRANSFER ,   true );   //not to display on the console  curl_setopt ( $ch ,   CURLOPT_POST ,   true );   // for POST request only  $page   =   curl_exec ( $ch );   //execute the request  curl_close ( $ch );   //close this curl session, deletes the $ch  ?", 
            "title": "Example"
        }, 
        {
            "location": "/Internet-App-Dev-III/08-cURL_DOMDocumentation/#document-object-model", 
            "text": "standardized (by W3C) convention for representing HTML and XML documents  Nodes are organized into a tree structure  parent / child / sibling / ancestor / descendant nodes  nodes \u2013 elements  they can have attributes  they can have values (between the   and   tags)  Standardized \u2013 used by browsers to parse a document to render it  Used by JavaScript \u2013 DOM also includes the event model and modification of the document", 
            "title": "Document Object Model"
        }, 
        {
            "location": "/Internet-App-Dev-III/08-cURL_DOMDocumentation/#php-domdocument-classes", 
            "text": "DOMDocument \u2013 root of the tree 1\n2\n3\n4\n5 ?php  $html   =   new   DOMDocument ();  $html - loadHTML ( $page );   //-  member access operator, not .  ?   \nOnce it is loaded, traverse through looking for the data  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 ?php  $rows   =   $html - getElementsByTagName ( tr );  //returns a DOMNodeList that you can iterate through or get length  //iterate through the DOMNodeList, looking for attributes of each DOMNode  foreach ( $rows   as   $row )  if   ( $row - getAttribute ( class )   ==   error )  //Or get the first DOMNode if you know you need the first row:  $first   =   $rows - item ( 0 );  // With each DOMNode, get the value between tags:  echo   $row - nodeValue ;   //NOTE: attribute, not a method call  //OR get an attribute  echo   $row - getAttribute ( class );  ?", 
            "title": "PHP DOMDocument classes"
        }, 
        {
            "location": "/Internet-App-Dev-III/08-cURL_DOMDocumentation/#errors", 
            "text": "you may find badly formed HTML pages when you scrape  to suppress DOM errors from flooding your screen, use the  @  symbol in front of the variable to assign  Check source at validator.w3.org\\ 1 @$html - loadHTML($page);    @  = error control operator (fondly known as the stfu operator)   Prefix it to an expression so that any error messages that might have been generated are ignored   Example: 1 $file = @file_get_contents( fileToRead ); //no errors if file not found", 
            "title": "Errors"
        }, 
        {
            "location": "/Internet-App-Dev-III/08-cURL_DOMDocumentation/#domxpath", 
            "text": "XPath (XML Path Language) is a query language for selecting nodes from an XML document.  XPath was defined by W3C  DOMXPath query method takes an XPath expression; the expression is evaluated with respect to a context node  Examples: 1\n2\n3\n4\n5\n6\n7\n8 ?php  $xpath   =   new   DOMXPath ( $html );  $xpath - query ( //tr )   returns   DOMNodeList   with   all   tr ,   relative   to   root  $xpath - query ( .//tr ,   $DOMNodeOfATable )   // returns DOMNodeList with all tr, relative to the $DOMNodeOfATable -  so only those within that table  ?   \nXPath reference material:  http://archive.oreilly.com/pub/a/perl/excerpts/system-admin-with-perl/ten-minute-xpath-utorial.html", 
            "title": "DOMXPath"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/", 
            "text": "Postgres database\n\n\nPostgreSQL is an open-source object-relational database\n\n\nused by Instagram, TripAdvisor\ninstalled in Homestead Vagrant box (along with MySQL)\nBeware: Postgres SQL is stricter than MySQL!\nDocumentation: \nhttps://www.postgresql.org/docs/9.4/static/index.html\n\n\nUsing psql Client\npsql is the PostGres interactive terminal client (similar to mysql client)\n\npsql -U username -h hostnam_e _databasename\n\nHosts: vagrant has a local PostGres database, or you can use Korra or Heroku\nUsing Vagrant:\n\n1\npsql \u2013U homestead -h localhost databasename\n\n\n\n\nprompts for password: secret\ndatabasename is optional. \n\n\nWe have a db called homestead or you can create own\nNOTE: your db and tables on Vagrant are NOT persisted!!!\nOnce connected - \nUseful commands\n\n\\list\n (or \n\\l\n)\n, lists all databases\n\n\nWe will use the homestead db\n\n\\connect homestead\n (or \n\\c homestead\n) instead of use database\n| Command| Definition|\n|----------|:-------------|\n| \n\\d\n| lists all tables in the current db |\n| \n\\d tablename\n | describes a table |\n| \n\\?\n | list of available commands |\n| \n\\q\n | quit |\n\n\nOnce connected - SQL queries\n\n\nWithin the psql client, every statement (SQL command) needs to be terminated by a semicolon.\n\n1\ncreate\n \ndatabase\n \ndbname\n;\n\n\n\n\n\n\nThese semicolons are an indication to the client that the query is complete and should be run.\nThe semicolons are not part of the SQL itself (this is a common point of confusion).\n\n\nThis means you can continue the same SQL statement over several lines within the client, which makes it easier to read and to edit\n\n\n\n\nRecall\n\n\nselecting a db: \n\\connect databasename\n\n\n\n\nUsing PHP with Postgres\n\n\nFor years, PHP developers used the standard or improved MySQL functions (called the mysql or mysqli extension) database specific, not object oriented.\n\n\nWe will use PDO (PHP Data Objects) in this class to remain object-oriented\nrequires PostgresSQL driver to be enabled:\n\n\nLook in \n/etc/php/7.1/fpm/php.ini\n for \nphp_pdo_pgsql.dll\n installed by default with Homestead\n\n\nThree important PDO classes\n\n\nPDO \u2013 db connection abstraction\n\n\nCan use directly for simple statements\n\n\nPDOException\n\n\nIssues with the connection\n\n\nPDOStatement\n\n\nPrepared statement with portions replaced by variables when execute.\n\n\n\n\nRecall: Using classes\n\n\nYou can directly call a constructor:\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n?php\n\n\n$object\n \n=\n \nnew\n \nSomeClass\n(\n\u2026\n);\n \n//allocates and initializes\n\n\n\n$object\n-\nmethod\n();\n \n//-\n is the member access operator, not .\n\n\n\n$object\n-\nattribute\n;\n \n//NOT $object-\n$attribute\n\n\n\nSomeClass\n::\nstaticFunction\n();\n \n//:: is the scope resolution operator\n\n\n\nunset\n(\n$object\n);\n \n//same as $object = null, optional if you want to tag for garbage collection\n\n\n?\n\n\n\n\n\n\n\n\nPDO- PHP Data Objects\n\n\nPDO provides a consistent way to execute queries regardless of the database application in use\n\n\nPostgres, MySQL, SQLite, Oracle, SQLServer, \u2026\nConnect to a database:\n\n1\n$pdo = new PDO(\ndataSourceName\n, \nuser\n, \npassword\n);\n\n\n\n\n\n\ndataSourceName syntax: \ndriver:name1=value1;name2=value2\n\n\ni.e., database application, followed by name-value pairs\n\n\nexample:\n\n1\n2\n3\npgsql:dbname=lab;host=localhost\n\nmysql:dbname=lab;host=localhost\n\n\n\n\nOn Vagrant \u2013 \nmake your database first!\n\n\n\n\nWarning\n\n\nPGSQL is slightly different from MySQL. no \nAUTO_INCREMENT\n property, instead the column is defined as \nSERIAL\n.\n\n\n\n\nSERIAL\n indicates integer, not null with values assigned from a sequence generator\nSimple statements \n$pdo-\nexec($query)\n\ngeneral syntax for simple statements that do not return result sets and have no parameters: \nCREATE\n, some \nINSERT\n, \nUPDATE\n, \nDELETE\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n?php\n\n\n$query\n \n=\n \nCREATE TABLE employees (id INT(8), lastname varchar(25) )\n;\n\n\n\n$pdo\n-\nexec\n(\n$query\n);\n\n\n\n$query\n \n=\n \nDELETE FROM employees;\n;\n \n//no where clause, deletes all\n\n\n\n$num\n \n=\n \n$pdo\n-\nexec\n(\n$query\n);\n \n//exec returns the number of rows affected\n\n\n\n$query\n \n=\n \nINSERT INTO customers(custName, country) VALUES (\nJaya\n, \nCanada\n);\n;\n\n\n\n$num\n \n=\n \n$pdo\n-\nexec\n(\n$query\n);\n \n//1 row affected\n\n\n\n$id\n \n=\n \n$pdo\n-\nlastInsertId\n();\n \n//returns the auto-incremented primary key value\n\n\n?\n\n\n\n\n\n\nIssue: SQL Injection\n\n\nAdd a user to the database:\n\n1\n2\n3\n4\n?php\n\n\n$q\n \n=\n \nINSERT INTO users (name) VALUES (\n$name\n);\n;\n\n\n$pdo\n-\nexec\n(\n \n$q\n);\n\n\n?\n\n\n\n\n\nif \n$name\n contains: \nJaya'); Drop Table users --\n, the query will be\n\n1\nINSERT\n \nINTO\n \nusers\n \n(\nname\n)\n \nVALUES\n \n(\nJaya\n);\n \nDrop\n \nTable\n \nusers\n \n--\n);\n\n\n\n\n\n\n--\n and \n#\nindicate SQL comment to end of line, so the \n');\n will be ignored\n\n\nSQL Injection \u2013 Another example\n\n\nAuthenticate a user:\n\n1\n2\n3\n4\n5\n?php\n\n\n$q\n \n=\n \nSELECT * FROM userinfo WHERE user= \n$user\n AND pwd = \n$pwd\n; \n;\n\n\n\n$pdo\n-\nexec\n(\n \n$q\n);\n\n\n?\n\n\n\n\n\nIf \n$user\n contains: \nadmin\n OR \n'1'='1'\n and \n$pwd\n is empty\n\n1\nSELECT\n \n*\n \nFROM\n \nuserinfo\n \nWHERE\n \nuser\n=\n \nadmin\n \nOR\n \n1\n=\n1\n \nAND\n \npwd\n \n=\n \n \n;\n\n\n\n\n\n\nAND\n has precedence over \nOR\n; even if the \nAND\n is false, if the user id is guessed correctly (ie, true), then the \nOR\n is true\n\n\nThey can log in as admin without any privileges\n\n\nWhy does it happen?\n\n\nUser input is concatenated directly into a SQL statement\n\n\nPresence of single quote \n'\n closes SQL string, allows additional SQL operators / statements.\n\n\nSanitize data and check data type - not best solution\nquote function wraps the strings in quotes so you don't have to in your query:\n\n1\n2\n3\n4\n5\n?php\n\n\n$data\n \n=\n \n$pdo\n-\nquote\n(\n$unsafe_data\n);\n\n\n\n$pdo\n-\nexec\n(\nINSERT INTO tablename (column1) VALUES (\n$data\n)\n);\n\n\n?\n\n\n\n\n\n\nUser can't close the single quotes.\n\n\nBest Solution- ALWAYS use prepared statements\n\n\nthe query is sent as one step and the specific data is sent separately. The end result can be much better performance and easier security management.\n\n\nTo use prepared statements, start with the \nprepare()\n method to get a \nPDOStatement\n.\nthe query, with the dynamic data represented by placeholders (e.g., question marks, not in quotes):\n\n$stmt = $pdo-\nprepare('SELECT * FROM users WHERE first=? AND last=?;');\n\n\nNext, invoke the \nexecute()\n method of the \nPDOStatement\n object, providing to it an array of actual values (if returns a boolean)\n\n\nif ($stmt-\nexecute(array('jaya', 'nila')))\n or\n\nif ($stmt-\nexecute( ['jaya', 'nila']))\n\n\nNamed placeholders\n\n\nNamed placeholders start with a colon, followed by a label:\n\n$stmt = $pdo-\nprepare('SELECT * FROM users WHERE first=:first AND last=:last');\n\n\nUse the placeholders as keys in the array passed to the \nexecute()\n method:\n\n$stmt-\nexecute([':first' =\n 'jaya', ':last' =\n 'nila']);\n\n\nAnother example\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n?php\n\n\n$q\n \n=\n \nINSERT INTO tasks (parent_id, task) VALUES (:parent_id, :task)\n;\n\n\n$stmt\n \n=\n \n$pdo\n-\nprepare\n(\n$q\n);\n\n\n\nif\n \n(\n$stmt\n-\nexecute\n(\n \n[\n:parent_id\n \n=\n \n$parent_id\n,\n \n:task\n \n=\n \n$task\n]))\n \n{\n\n    \necho\n \nThe task has been added!\n;\n\n\n}\n \nelse\n \n{\n\n    \necho\n \nThe task could not be added.\n;\n\n\n}\n\n\n?\n\n\n\n\n\nThe \nexecute()\n method returns a boolean indicating its success\n\n\n\n\nRecall\n\n\nDO NOT insert auto incremented columns\n\n\n\n\nBinding parameters to reuse statements\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n?php\n\n\n$stmt\n \n=\n \n$pdo\n-\nprepare\n \n(\nINSERT INTO REGISTRY (name, value) VALUES (:name, :value)\n);\n\n\n$stmt\n-\nbindParam\n(\n:name\n,\n \n$name\n);\n \n//binds the variable $name to the placeholder\n\n\n$stmt\n-\nbindParam\n(\n:value\n,\n \n$value\n);\n \n//binds the variable $value to the placeholder\n\n\n\n// insert one row\n\n\n$name\n \n=\n \none\n;\n\n\n$value\n \n=\n \n1\n;\n\n\n$stmt\n-\nexecute\n();\n\n\n\n// insert another row with different values\n\n\n$name\n \n=\n \ntwo\n;\n\n\n$value\n \n=\n \n2\n;\n\n\n$stmt\n-\nexecute\n();\n\n\n\nExample\n\n\n$query\n \n=\n \nSELECT * FROM users WHERE first=?AND last=?\n;\n \n//not named placeholder\n\n\n\ntry\n \n{\n\n\n\n$pdo\n \n=\n \nnew\n \nPDO\n(\npgsql:dbname= test;host=localhost\n,\n \nusername\n,\n\n\n\npassword\n);\n\n\n\n$pdo\n-\nsetAttribute\n(\nPDO\n::\nATTR_ERRMODE\n,\nPDO\n::\nERRMODE_EXCEPTION\n);\n \n//Ensures exceptions are thrown\n\n\n\n$stmt\n \n=\n \n$pdo\n-\nprepare\n(\n$query\n);\n\n\n\n$stmt\n-\nbindParam\n(\n1\n,\n \n$first\n);\n \n//BEWARE : 1 indexed!!!\n\n\n$stmt\n-\nbindParam\n(\n2\n,\n \n$last\n);\n\n\n\n//in a loop, I could keep changing $first and $last\n\n\n\nif\n \n(\n$stmt\n-\nexecute\n()\n \n)\n \n//returns a Boolean\n\n\n\n//yay!\n\n\n\nelse\n\n\n\n// boo!!\n\n\n\n}\n \ncatch\n \n(\nPDOException\n \n$e\n)\n \n{\n\n\n\necho\n \n$e\n-\ngetMessage\n();\n\n\n\n}\n \nfinally\n \n{\n\n\n\nunset\n(\n$pdo\n);\n \n//not required, connection is closed when script ends\n\n\n\n}\n\n\n?\n\n\n\n\n\n\n\nbindParam vs bindValue\n\n\nbindParam\n requires the variable to be passed by reference. It must be a variable since it is bound to the placeholder.\n\n\n\n\nvery useful when you prepare your statement outside the loop, and simply change variable values in the loop\n\n\n\n\nbindValue\n is used when you are passing by value\n* It can be used for calculated values, method calls, constants or literals, etc\n* need to re-bind on every iteration through the loop since it is copied by value\n\n\nQueries that return results \nexecute()\n method returns a Boolean indicating its success\n\n\nFetching data:\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n?php\n\n\n$stmt\n \n=\n \n$dbh\n-\nprepare\n(\nSELECT * FROM REGISTRY where name = ?\n);\n\n\n\n$stmt\n-\nbindParam\n(\n1\n,\n \n$name\n);\n\n\n$name\n=\nphp\n;\n\n\n\nif\n \n(\n$stmt\n-\nexecute\n())\n \n{\n\n    \nwhile\n \n(\n$row\n \n=\n \n$stmt\n-\nfetch\n())\n \n{\n \n//fetch() returns an associative array by default\n\n    \nvar_dump\n(\n$row\n);\n\n    \n}\n\n\n}\n\n\n?\n\n\n\n\n\n=\n the key is the column name and the value is the row value\n\n\nFetch methods and styles\n\n\n\n\n\n\n\n\nMethods/Styles\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfetch\n\n\nreturns one row at a time\n\n\n\n\n\n\nfetchAll\n\n\nreturns an array containing all the result rows in the style specified\n\n\n\n\n\n\nsetFetchMode(PDO:: FETCH_ASSOC)\n\n\nfetch styles that can be specified\n\n\n\n\n\n\nPDO::FETCH_ASSOC\n\n\nfor an associative array -\n default, both numeric and associative\n\n\n\n\n\n\nPDO::FETCH_NUM\n\n\nfor a numerically indexed array\n\n\n\n\n\n\nPDO::FETCH_OBJ\n\n\nfor a generic object (anonymous type) with property names being the column names\n\n\n\n\n\n\nPDO::FETCH_CLASS\n\n\nfor a specific type of object, use with \nFETCH_PROPS_LATE\n, mapping column names to properties\n\n\n\n\n\n\nPDO::FETCH_PROPS_LATE\n\n\nmapping column names to properties\n\n\n\n\n\n\n\n\nExamples \u2013 in an array\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n?php\n\n\n$stmt\n \n=\n \n$pdo\n-\nprepare\n(\nSELECT id, name FROM users\n);\n\n\n$stmt\n-\nexecute\n();\n\n\n\nwhile\n \n(\n$row\n \n=\n$stmt\n-\nfetch\n()))\n \n{\n \n//Default \u2013 associative array\n\n    \n// Use $row[\nid\n] for the id.\n\n    \n// Use $row[\nname\n] for the username.\n\n\n}\n\n\n?\n\n\n\n\n\nor\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n?php\n\n\n$results\n \n=\n \n$stmt\n-\nfetchAll\n();\n\n\n\nforeach\n(\n$results\n \nas\n \n$row\n)\n \n{\n\n    \n// Use $row[\nid\n] for the id.\n\n    \n// Use $row[\nname\n] for the username.\n\n\n}\n\n\n?\n\n\n\n\n\n\n\nExample - object\n\n\nThe returned records be turned into specific types of objects:\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n?php\n\n\nclass\n \nUser\n \n{\n\n    \nprivate\n \n$id\n;\n\n    \nprivate\n \n$name\n;\n\n\n    \npublic\n \ngetName\n()\n \n{\n\n        \nreturn\n \n$this\n-\nname\n;\n\n    \n}\n\n\n}\n\n\n?\n\n\n\n\n\nFetch database records into new User objects:\n\n1\n2\n3\n4\n5\n6\n7\n8\n?php\n\n\n$q\n \n=\n \n$pdo\n-\nprepare\n(\nSELECT id, name FROM users\n);\n\n\n$q\n-\nexecute\n();\n\n\n\nwhile\n \n(\n$row\n \n=\n$q\n-\n \nfetch\n(\n \nPDO\n::\nFETCH_CLASS\n|\n \nPDO\n::\nFETCH_PROPS_LATE\n,\n \nUser\n))\n \n{\n\n    \necho\n \n$row\n-\ngetUsername\n();\n\n\n}\n\n\n?\n\n\n\n\n\n\n$row\n will be a \nUser\n object, and it can invoke the \nUser\n methods.\n\n\nNotes\n\n\nPHP directly maps the returned column names to matching object attributes even if they are private.\n\n\nIf no comparable class attribute exists, PHP will create the column name as a new public attribute!!!\n\n\n\n\nDanger\n\n\nThe constructor is called after the attributes are set ?!! So either no constructor in your data transfer class, or use \n$q-\nfetch(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'User'))\n -\n constructor is executed before PDO assigns the object attributes\n\n\n\n\nColumn name to Attribute name mapping\n\n\nsql aliases are used to map the sql query result to the appropriate object attribute\nyou can force column names (and aliases) to a specific case pattern\n\n\ndefault will be all lower case\n\n$pdo-\nsetAttribute(PDO::ATTR_CASE, PDO::CASE_NATURAL );\n\n\nPDO::ATTR_CASE\n \u2013 forces columns to a case pattern\n\n\nPDO::CASE_NATURAL\n leaves them as they are returned\n\n\nsince we use an alias, the alias is used as is\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n?php\n\n\nclass\n \nCategory\n \n{\n\n    \npublic\n \n$id\n;\n\n    \npublic\n \n$fkId\n;\n\n    \npublic\n \n$shortName\n;\n\n    \npublic\n \n$longName\n;\n\n\n}\n\n\n\n$pdo\n-\nsetAttribute\n(\nPDO\n::\nATTR_CASE\n,\n \nPDO\n::\nCASE_NATURAL\n \n);\n \n\n\n//use an SQL alias\n\n\n$stmt\n \n=\n \n$pdo\n-\nprepare\n(\n\n    \nSELECT\n\n\n        id,\n\n\n        fk\\_id AS `fkId`,\n\n\n        short\\_name AS `shortName`,\n\n\n        long\\_name As `longName`\n\n\n    FROM `Category`;\n\n\n);\n\n\n$stmt\n \n-\n \nexecute\n();\n\n\n?\n\n\n\n\n\n\nSQL Review - Inserting records\n\n\nNamed columns:\n\n\nDon't insert the auto-increment columns\n\n1\nINSERT\n \nINTO\n \ntablename\n \n(\ncolumn1\n,\n \ncolumn2\n,\n \n\u2026\n)\n \nVALUES\n \n(\n?\n,\n?\n,\n\u2026\n)\n\n\n\n\n\n\nUnnamed columns:\n\n\nAll columns must be given in order of columns in the table\n\n\n\n\nin that case, value NULL for the auto-incremented column\n\n1\nINSERT\n \nINTO\n \ntablename\n \nVALUES\n \n(\nNULL\n,\n \n?\n,\n \n?\n...)\n\n\n\n\n\n\n\n\nExample CRUD - Create\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n?php\n\n\ntry\n \n{\n\n    \n$pdo\n \n=\n \nnew\n \nPDO\n(\npgsql:host=localhost;dbname=homestead\n,\n \n$username\n,\n \n$password\n);\n\n\n    \n$pdo\n-\nsetAttribute\n(\nPDO\n::\nATTR_ERRMODE\n,\n \nPDO\n::\nERRMODE_EXCEPTION\n);\n\n    \n$stmt\n \n=\n \n$pdo\n-\nprepare\n(\nINSERT INTO mytable VALUES(NULL, ?)\n);\n\n\n    \n$stmt\n-\nbindParam\n(\n1\n,\n \n$name\n);\n\n    \n$stmt\n-\nexecute\n();\n\n\n    \n// Affected Rows?\n\n    \necho\n \n$stmt\n-\nrowCount\n();\n \n// 1\n\n\n}\n \ncatch\n(\nPDOException\n \n$e\n)\n \n{\n\n\n\necho\n \nError: \n \n.\n \n$e\n-\ngetMessage\n();\n\n\n?\n\n\n\n\n\n\n\nUpdate and delete records\n\n\n1\nUPDATE\n \ntablename\n \nSET\n \ncolumn1\n=\nvalue1\n,\n \ncolumn2\n=\nvalue2\n \nWHERE\n \ncondition\n\n\n\n\n\n\n1\nDELETE\n \nFROM\n \ntablename\n \nWHERE\n \ncondition\n \nLIMIT\n \nnum\n \n(\ne\n.\ng\n.,\n \nonly\n \n1\n \nrow\n)\n\n\n\n\n\nAll rows:\n\n1\nTRUNCATE\n \nTABLE\n \ntablename\n\n\n\n\n\nEntire table:\n\n1\nDROP\n \nTABLE\n \ntablename\n\n\n\n\n\n\nExample CRUD - Update\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n?php\n\n\n$id\n \n=\n \n5\n;\n\n\n\n$name\n \n=\n \nJoe\n;\n\n\n\ntry\n \n{\n\n\n\n$pdo\n \n=\n \nnew\n \nPDO\n(\npgsql:host=localhost;dbname=homestead\n,\n \n$username\n,\n \n$password\n);\n\n\n\n$pdo\n-\nsetAttribute\n(\nPDO\n::\nATTR_ERRMODE\n,\n \nPDO\n::\nERRMODE_EXCEPTION\n);\n\n\n\n$stmt\n \n=\n \n$pdo\n-\nprepare\n(\nUPDATE mytable SET name = :name WHERE id = :id\n);\n\n\n\n$stmt\n-\nbindParam\n(\n:name\n,\n \n$name\n,\n \nPDO\n::\nPARAM_STR\n);\n \n//default\n\n\n\n$stmt\n-\nbindParam\n(\n:id\n,\n \n$id\n,\n \nPDO\n::\nPARAM_INT\n);\n \n// PDO::PARAM_INT will have no quotes in the sql query, usually just needed for limit clauses\n\n\n\n$stmt\n-\nexecute\n();\n\n\n\necho\n \n$stmt\n-\nrowCount\n();\n \n// 1\n\n\n\n}\n \ncatch\n(\nPDOException\n \n$e\n)\n \n{\n\n\n\necho\n \nError: \n \n.\n \n$e\n-\ngetMessage\n();\n\n\n\n}\n\n\n?\n\n\n\n\n\n\n\nExample CRUD - Delete\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n?php\n\n\n$id\n \n=\n \n5\n;\n \n// From a form or something similar\n\n\n\ntry\n \n{\n\n\n\n$pdo\n \n=\n \nnew\n \nPDO\n(\npgsql:host=localhost;dbname=someDatabase\n,\n \n$username\n,\n \n$password\n);\n\n\n\n$pdo\n-\nsetAttribute\n(\nPDO\n::\nATTR_ERRMODE\n,\n \nPDO\n::\nERRMODE_EXCEPTION\n);\n\n\n\n$stmt\n \n=\n \n$pdo\n-\nprepare\n(\nDELETE FROM mytable WHERE id = :id\n);\n\n\n\n$stmt\n-\nbindParam\n(\n:id\n,\n \n$id\n);\n\n\n\n$stmt\n-\nexecute\n();\n\n\n\necho\n \n$stmt\n-\nrowCount\n();\n \n// 1\n\n\n\n}\n \ncatch\n(\nPDOException\n \n$e\n)\n \n{\n\n\n\necho\n \nError: \n \n.\n \n$e\n-\ngetMessage\n();\n\n\n\n}\n\n\n?\n\n\n\n\n\n\n\nSelecting data\n\n\n1\nSELECT\n \ncolumns\n \nFROM\n \ntablename\n \nWHERE\n \ncondition\n\n\n\n\n\nconditions:\n- equality (e.g., date = '2012-01-26')\n- range (e.g., price BETWEEN 10.0 AND 20.0)\n- relative (e.g., quantity \n 5)\n- wildcard LIKE (name LIKE '%Smith%' )\n\n\nUsing a wildcard in a prepared statement:\n\n\n1\n2\n3\n4\n5\n?php\n\n\n$stmt\n \n=\n \n$pdo\n-\nprepare\n(\nSELECT columns FROM table WHERE column LIKE ? \n);\n\n\n\n$stmt\n-\n \nbindValue\n \n(\n1\n,\n \n%\n.\n$search\n.\n%\n);\n\n\n?\n\n\n\n\n\n\n\nConcatentation operator\n\n\nExample:\n\n1\n2\n3\n4\n5\nSELECT\n \nlast_name\n \n||\n \n, \n \n||\n \nfirst_name\n\n\n\nFROM\n \nusers\n;\n\n\n\nSELECT\n \nlast_name\n \n||\n \n, \n \n||\n \nfirst_name\n \nAS\n \nName\n \nFROM\n \nusers\n \nORDER\n \nBY\n \nName\n;\n\n\n\n\n\n\nFunctions\n\n\n1\n2\n3\nSELECT\n \nFUNCTION\n(\ncolumn\n)\n \nFROM\n \ntablename\n\n\n\nSELECT\n \ncolumn1\n,\n \nFUNCTION\n(\ncolumn2\n)\n \nAS\n \nblah\n,\n \ncolumn3\n \nFROM\n \ntablename\n\n\n\n\n\nExamples:\n\n1\n2\nSELECT\n \nlower\n(\ntitle\n),\n \ntrim\n(\ndescription\n)\n\n\nFROM\n \nbooks\n;\n\n\n\n\n\n\nSorting\n\n\n1\nSELECT\n \n*\n \nFROM\n \ntablename\n \nORDER\n \nBY\n \ncolumn\n \nDESC\n,\n \ncolumn2\n\n\n\n\n\nText sorting depends on collation\n\n\n\n\nCOLLATION\n dictates how values are compared and sorted\n\n\nTied to the character set (language support)\n\n\nTakes into account cultural habits\n\n\nCase-sensitive or insensitive\n\n\nCount accents or not?\n\n\n\n\nGrouping results\n\n\n1\nSELECT\n \nname\n \nFROM\n \nproducts\n \nWHERE\n \ncondition\n \nGROUP\n \nBY\n \nname\n\n\n\n\n\n* each product name occurs only once\n\n1\nSELECT\n \nname\n,\n \navg\n(\nprice\n)\n \nFROM\n \nproducts\n \nWHERE\n \ncondition\n \nGROUP\n \nBY\n \nname\n\n\n\n\n\nAggregate functions used for anything not grouped\n* e.g., \nMAX\n, \nMIN\n, \nCOUNT\n, \nSUM\n\n\nDistinct\n\n\nDISTINCT\n \u2013 provides unique values\n\n1\n2\n3\nSELECT\n \nCOUNT\n(\nDISTINCT\n \ncustomer_ID\n)\n \nFROM\n \naccounts\n\n\n\nSELECT\n \nAVG\n(\nbalance\n),\n \ncustomer_id\n \nFROM\n \naccounts\n \nGROUP\n \nBY\n \ncustomer_id\n\n\n\n\n\n\nJoins\n\n\nInner join, outer join on one, two, or more tables\nself join is possible \u2013 use aliases\n* normally use primary key and foreign key columns, but not always\n\n1\nSELECT\n \ncolumns\n \nFROM\n \ntableA\n \nJOIN_TYPE\n \ntableB\n \nJOIN_CONDITION\n \nWHERE\n \nconditions\n\n\n\n\n\ncolumns can be \ntablename.column\n to prevent ambiguity\n\n\n\n\nJOIN_TYPE: INNER JOIN table2 AS t2\n\n\nJOIN_CLAUSE: ON conditions\n\n\n\n\nTypes of joins\n\n\nINNER JOIN\n\n\nexclusive\n\n\n\n\nReturns all rows when there is at least one match in BOTH tables\n\n\nproduces a Cartesian product between the specified tables (that is, each and every row in the first table is joined to each and every row in the second table).\n\n\n\n\nOUTER JOIN:\n\n\ninclusive\n\n\nLEFT JOIN\n\n\nReturn all rows from the left table, and the matched rows from the right table (or \nNULL\n if no matching rows in right table)\n\n\n\n\nin PostgreSQL: \nJOIN\n is equivalent to \nINNER JOIN\n\n\nLEFT\n, \nRIGHT\n or \nFULL\n indicate \nOUTER JOIN\n\n\n\n\nJOIN ON vs WHERE conditions\n\n\nThe conditional_expr used with \nON\n is any conditional expression of the form that can be used in a \nWHERE\n clause.\n\n\nGenerally, you should use the \nON\n clause for conditions that specify how to join tables\nand the \nWHERE\n clause to restrict which rows you want in the result set.\n\n\nLimiting results\n\n\ne.g., only top 25:\n\n1\nSELECT\n \n*\n \nFROM\n \ntablename\n \nWHERE\n \nconditions\n \nORDER\n \nBY\n \ncolumn\n \nLIMIT\n \n25\n\n\n\n\n\nOne argument = value specifies the number of rows from the beginning of the result set\n\n1\nSELECT\n \n*\n \nFROM\n \ntablename\n \nWHERE\n \nconditions\n \nORDER\n \nBY\n \ncolumn\n \nLIMIT\n \nnum\n \nOFFSET\n \nskip\n\n\n\n\n\nTwo arguments = the first argument specifies the number of rows to return, and the second specifies the number of rows to skip.\n\n1\nSELECT\n \n*\n \nFROM\n \ntbl\n \nLIMIT\n \n5\n \nOFFSET\n \n10\n;\n \n#\n \nRetrieve\n \nrows\n \n11\n-\n16\n\n\n\n\n\n* If you use \nLIMIT\n, almost always use \nORDER BY\n\n* Large offsets: performance issues are possible\n    * Database still has to calculate the rows skipped by the offset even if they are not returned\n\n\nLIMIT\n\n\nThe higher the offset is, the longer the query is even if the number of rows retrieved is the same\n\n1\n2\n3\nSELECT\n \n*\n \nfrom\n \nlargetable\n \nORDER\n \nBY\n \nid\n \nLIMIT\n \n50\n \nOFFSET\n \n0\n \nis\n \nfaster\n \nthan\n\n\n\nSELECT\n \n*\n \nfrom\n \nlargetable\n \nORDER\n \nBY\n \nid\n \nLIMIT\n \n50\n \nOFFSET\n \n1000000\n\n\n\n\n\n* Second query is the same as saying \u2013 select * from the first 1000050 rows that match the criteria and give the last 50\n* You still have to perform all the matches to know that you are at the end\n* Even if you use indices, the query can be long since the many rows must be found\n\n\nSolution: If the Order By is sorted by unique keys\n\n\n1\nSELECT\n \n*\n \nfrom\n \nlargetable\n \nWHERE\n \nid\n \n \nlastID\n \nORDER\n \nBY\n \nid\n \nLIMIT\n \n50\n\n\n\n\n\nThis assumes you know the lastID that was requested\nthis assumes no holes in the ids:\ne.g. in a Paginated set: \nlastID = (pageNumber - 1) * records/page", 
            "title": "09 using postgres"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#postgres-database", 
            "text": "PostgreSQL is an open-source object-relational database  used by Instagram, TripAdvisor\ninstalled in Homestead Vagrant box (along with MySQL)\nBeware: Postgres SQL is stricter than MySQL!\nDocumentation:  https://www.postgresql.org/docs/9.4/static/index.html  Using psql Client\npsql is the PostGres interactive terminal client (similar to mysql client) psql -U username -h hostnam_e _databasename \nHosts: vagrant has a local PostGres database, or you can use Korra or Heroku\nUsing Vagrant: 1 psql \u2013U homestead -h localhost databasename  \nprompts for password: secret\ndatabasename is optional.   We have a db called homestead or you can create own\nNOTE: your db and tables on Vagrant are NOT persisted!!!\nOnce connected -  Useful commands \\list  (or  \\l ) , lists all databases  We will use the homestead db \\connect homestead  (or  \\c homestead ) instead of use database\n| Command| Definition|\n|----------|:-------------|\n|  \\d | lists all tables in the current db |\n|  \\d tablename  | describes a table |\n|  \\?  | list of available commands |\n|  \\q  | quit |", 
            "title": "Postgres database"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#once-connected-sql-queries", 
            "text": "Within the psql client, every statement (SQL command) needs to be terminated by a semicolon. 1 create   database   dbname ;    These semicolons are an indication to the client that the query is complete and should be run.\nThe semicolons are not part of the SQL itself (this is a common point of confusion).  This means you can continue the same SQL statement over several lines within the client, which makes it easier to read and to edit   Recall  selecting a db:  \\connect databasename", 
            "title": "Once connected - SQL queries"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#using-php-with-postgres", 
            "text": "For years, PHP developers used the standard or improved MySQL functions (called the mysql or mysqli extension) database specific, not object oriented.  We will use PDO (PHP Data Objects) in this class to remain object-oriented\nrequires PostgresSQL driver to be enabled:  Look in  /etc/php/7.1/fpm/php.ini  for  php_pdo_pgsql.dll  installed by default with Homestead", 
            "title": "Using PHP with Postgres"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#three-important-pdo-classes", 
            "text": "", 
            "title": "Three important PDO classes"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#pdo-db-connection-abstraction", 
            "text": "Can use directly for simple statements", 
            "title": "PDO \u2013 db connection abstraction"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#pdoexception", 
            "text": "Issues with the connection", 
            "title": "PDOException"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#pdostatement", 
            "text": "Prepared statement with portions replaced by variables when execute.   Recall: Using classes  You can directly call a constructor:  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 ?php  $object   =   new   SomeClass ( \u2026 );   //allocates and initializes  $object - method ();   //-  is the member access operator, not .  $object - attribute ;   //NOT $object- $attribute  SomeClass :: staticFunction ();   //:: is the scope resolution operator  unset ( $object );   //same as $object = null, optional if you want to tag for garbage collection  ?", 
            "title": "PDOStatement"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#pdo-php-data-objects", 
            "text": "PDO provides a consistent way to execute queries regardless of the database application in use  Postgres, MySQL, SQLite, Oracle, SQLServer, \u2026\nConnect to a database: 1 $pdo = new PDO( dataSourceName ,  user ,  password );    dataSourceName syntax:  driver:name1=value1;name2=value2  i.e., database application, followed by name-value pairs  example: 1\n2\n3 pgsql:dbname=lab;host=localhost\n\nmysql:dbname=lab;host=localhost  \nOn Vagrant \u2013  make your database first!   Warning  PGSQL is slightly different from MySQL. no  AUTO_INCREMENT  property, instead the column is defined as  SERIAL .   SERIAL  indicates integer, not null with values assigned from a sequence generator\nSimple statements  $pdo- exec($query) \ngeneral syntax for simple statements that do not return result sets and have no parameters:  CREATE , some  INSERT ,  UPDATE ,  DELETE   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 ?php  $query   =   CREATE TABLE employees (id INT(8), lastname varchar(25) ) ;  $pdo - exec ( $query );  $query   =   DELETE FROM employees; ;   //no where clause, deletes all  $num   =   $pdo - exec ( $query );   //exec returns the number of rows affected  $query   =   INSERT INTO customers(custName, country) VALUES ( Jaya ,  Canada ); ;  $num   =   $pdo - exec ( $query );   //1 row affected  $id   =   $pdo - lastInsertId ();   //returns the auto-incremented primary key value  ?", 
            "title": "PDO- PHP Data Objects"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#issue-sql-injection", 
            "text": "Add a user to the database: 1\n2\n3\n4 ?php  $q   =   INSERT INTO users (name) VALUES ( $name ); ;  $pdo - exec (   $q );  ?   \nif  $name  contains:  Jaya'); Drop Table users -- , the query will be 1 INSERT   INTO   users   ( name )   VALUES   ( Jaya );   Drop   Table   users   -- );    --  and  # indicate SQL comment to end of line, so the  ');  will be ignored", 
            "title": "Issue: SQL Injection"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#sql-injection-another-example", 
            "text": "Authenticate a user: 1\n2\n3\n4\n5 ?php  $q   =   SELECT * FROM userinfo WHERE user=  $user  AND pwd =  $pwd ;  ;  $pdo - exec (   $q );  ?   \nIf  $user  contains:  admin  OR  '1'='1'  and  $pwd  is empty 1 SELECT   *   FROM   userinfo   WHERE   user =   admin   OR   1 = 1   AND   pwd   =     ;    AND  has precedence over  OR ; even if the  AND  is false, if the user id is guessed correctly (ie, true), then the  OR  is true  They can log in as admin without any privileges", 
            "title": "SQL Injection \u2013 Another example"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#why-does-it-happen", 
            "text": "User input is concatenated directly into a SQL statement  Presence of single quote  '  closes SQL string, allows additional SQL operators / statements.  Sanitize data and check data type - not best solution\nquote function wraps the strings in quotes so you don't have to in your query: 1\n2\n3\n4\n5 ?php  $data   =   $pdo - quote ( $unsafe_data );  $pdo - exec ( INSERT INTO tablename (column1) VALUES ( $data ) );  ?    User can't close the single quotes.", 
            "title": "Why does it happen?"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#best-solution-always-use-prepared-statements", 
            "text": "the query is sent as one step and the specific data is sent separately. The end result can be much better performance and easier security management.  To use prepared statements, start with the  prepare()  method to get a  PDOStatement .\nthe query, with the dynamic data represented by placeholders (e.g., question marks, not in quotes): $stmt = $pdo- prepare('SELECT * FROM users WHERE first=? AND last=?;');  Next, invoke the  execute()  method of the  PDOStatement  object, providing to it an array of actual values (if returns a boolean)  if ($stmt- execute(array('jaya', 'nila')))  or if ($stmt- execute( ['jaya', 'nila']))", 
            "title": "Best Solution- ALWAYS use prepared statements"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#named-placeholders", 
            "text": "Named placeholders start with a colon, followed by a label: $stmt = $pdo- prepare('SELECT * FROM users WHERE first=:first AND last=:last');  Use the placeholders as keys in the array passed to the  execute()  method: $stmt- execute([':first' =  'jaya', ':last' =  'nila']);  Another example  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 ?php  $q   =   INSERT INTO tasks (parent_id, task) VALUES (:parent_id, :task) ;  $stmt   =   $pdo - prepare ( $q );  if   ( $stmt - execute (   [ :parent_id   =   $parent_id ,   :task   =   $task ]))   { \n     echo   The task has been added! ;  }   else   { \n     echo   The task could not be added. ;  }  ?   \nThe  execute()  method returns a boolean indicating its success   Recall  DO NOT insert auto incremented columns", 
            "title": "Named placeholders"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#binding-parameters-to-reuse-statements", 
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51 ?php  $stmt   =   $pdo - prepare   ( INSERT INTO REGISTRY (name, value) VALUES (:name, :value) );  $stmt - bindParam ( :name ,   $name );   //binds the variable $name to the placeholder  $stmt - bindParam ( :value ,   $value );   //binds the variable $value to the placeholder  // insert one row  $name   =   one ;  $value   =   1 ;  $stmt - execute ();  // insert another row with different values  $name   =   two ;  $value   =   2 ;  $stmt - execute ();  Example  $query   =   SELECT * FROM users WHERE first=?AND last=? ;   //not named placeholder  try   {  $pdo   =   new   PDO ( pgsql:dbname= test;host=localhost ,   username ,  password );  $pdo - setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION );   //Ensures exceptions are thrown  $stmt   =   $pdo - prepare ( $query );  $stmt - bindParam ( 1 ,   $first );   //BEWARE : 1 indexed!!!  $stmt - bindParam ( 2 ,   $last );  //in a loop, I could keep changing $first and $last  if   ( $stmt - execute ()   )   //returns a Boolean  //yay!  else  // boo!!  }   catch   ( PDOException   $e )   {  echo   $e - getMessage ();  }   finally   {  unset ( $pdo );   //not required, connection is closed when script ends  }  ?", 
            "title": "Binding parameters to reuse statements"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#bindparam-vs-bindvalue", 
            "text": "bindParam  requires the variable to be passed by reference. It must be a variable since it is bound to the placeholder.   very useful when you prepare your statement outside the loop, and simply change variable values in the loop   bindValue  is used when you are passing by value\n* It can be used for calculated values, method calls, constants or literals, etc\n* need to re-bind on every iteration through the loop since it is copied by value  Queries that return results  execute()  method returns a Boolean indicating its success  Fetching data:  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 ?php  $stmt   =   $dbh - prepare ( SELECT * FROM REGISTRY where name = ? );  $stmt - bindParam ( 1 ,   $name );  $name = php ;  if   ( $stmt - execute ())   { \n     while   ( $row   =   $stmt - fetch ())   {   //fetch() returns an associative array by default \n     var_dump ( $row ); \n     }  }  ?   \n=  the key is the column name and the value is the row value", 
            "title": "bindParam vs bindValue"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#fetch-methods-and-styles", 
            "text": "Methods/Styles  Description      fetch  returns one row at a time    fetchAll  returns an array containing all the result rows in the style specified    setFetchMode(PDO:: FETCH_ASSOC)  fetch styles that can be specified    PDO::FETCH_ASSOC  for an associative array -  default, both numeric and associative    PDO::FETCH_NUM  for a numerically indexed array    PDO::FETCH_OBJ  for a generic object (anonymous type) with property names being the column names    PDO::FETCH_CLASS  for a specific type of object, use with  FETCH_PROPS_LATE , mapping column names to properties    PDO::FETCH_PROPS_LATE  mapping column names to properties", 
            "title": "Fetch methods and styles"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#examples-in-an-array", 
            "text": "1\n2\n3\n4\n5\n6\n7\n8\n9 ?php  $stmt   =   $pdo - prepare ( SELECT id, name FROM users );  $stmt - execute ();  while   ( $row   = $stmt - fetch ()))   {   //Default \u2013 associative array \n     // Use $row[ id ] for the id. \n     // Use $row[ name ] for the username.  }  ?   \nor  1\n2\n3\n4\n5\n6\n7\n8 ?php  $results   =   $stmt - fetchAll ();  foreach ( $results   as   $row )   { \n     // Use $row[ id ] for the id. \n     // Use $row[ name ] for the username.  }  ?", 
            "title": "Examples \u2013 in an array"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#example-object", 
            "text": "The returned records be turned into specific types of objects:  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 ?php  class   User   { \n     private   $id ; \n     private   $name ; \n\n     public   getName ()   { \n         return   $this - name ; \n     }  }  ?   \nFetch database records into new User objects: 1\n2\n3\n4\n5\n6\n7\n8 ?php  $q   =   $pdo - prepare ( SELECT id, name FROM users );  $q - execute ();  while   ( $row   = $q -   fetch (   PDO :: FETCH_CLASS |   PDO :: FETCH_PROPS_LATE ,   User ))   { \n     echo   $row - getUsername ();  }  ?    $row  will be a  User  object, and it can invoke the  User  methods.", 
            "title": "Example - object"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#notes", 
            "text": "PHP directly maps the returned column names to matching object attributes even if they are private.  If no comparable class attribute exists, PHP will create the column name as a new public attribute!!!   Danger  The constructor is called after the attributes are set ?!! So either no constructor in your data transfer class, or use  $q- fetch(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'User'))  -  constructor is executed before PDO assigns the object attributes", 
            "title": "Notes"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#column-name-to-attribute-name-mapping", 
            "text": "sql aliases are used to map the sql query result to the appropriate object attribute\nyou can force column names (and aliases) to a specific case pattern  default will be all lower case $pdo- setAttribute(PDO::ATTR_CASE, PDO::CASE_NATURAL );  PDO::ATTR_CASE  \u2013 forces columns to a case pattern  PDO::CASE_NATURAL  leaves them as they are returned  since we use an alias, the alias is used as is  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 ?php  class   Category   { \n     public   $id ; \n     public   $fkId ; \n     public   $shortName ; \n     public   $longName ;  }  $pdo - setAttribute ( PDO :: ATTR_CASE ,   PDO :: CASE_NATURAL   );   //use an SQL alias  $stmt   =   $pdo - prepare ( \n     SELECT          id,          fk\\_id AS `fkId`,          short\\_name AS `shortName`,          long\\_name As `longName`      FROM `Category`;  );  $stmt   -   execute ();  ?", 
            "title": "Column name to Attribute name mapping"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#sql-review-inserting-records", 
            "text": "", 
            "title": "SQL Review - Inserting records"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#named-columns", 
            "text": "Don't insert the auto-increment columns 1 INSERT   INTO   tablename   ( column1 ,   column2 ,   \u2026 )   VALUES   ( ? , ? , \u2026 )", 
            "title": "Named columns:"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#unnamed-columns", 
            "text": "All columns must be given in order of columns in the table   in that case, value NULL for the auto-incremented column 1 INSERT   INTO   tablename   VALUES   ( NULL ,   ? ,   ? ...)", 
            "title": "Unnamed columns:"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#example-crud-create", 
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 ?php  try   { \n     $pdo   =   new   PDO ( pgsql:host=localhost;dbname=homestead ,   $username ,   $password ); \n\n     $pdo - setAttribute ( PDO :: ATTR_ERRMODE ,   PDO :: ERRMODE_EXCEPTION ); \n     $stmt   =   $pdo - prepare ( INSERT INTO mytable VALUES(NULL, ?) ); \n\n     $stmt - bindParam ( 1 ,   $name ); \n     $stmt - execute (); \n\n     // Affected Rows? \n     echo   $stmt - rowCount ();   // 1  }   catch ( PDOException   $e )   {  echo   Error:    .   $e - getMessage ();  ?", 
            "title": "Example CRUD - Create"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#update-and-delete-records", 
            "text": "1 UPDATE   tablename   SET   column1 = value1 ,   column2 = value2   WHERE   condition    1 DELETE   FROM   tablename   WHERE   condition   LIMIT   num   ( e . g .,   only   1   row )   \nAll rows: 1 TRUNCATE   TABLE   tablename   \nEntire table: 1 DROP   TABLE   tablename", 
            "title": "Update and delete records"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#example-crud-update", 
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27 ?php  $id   =   5 ;  $name   =   Joe ;  try   {  $pdo   =   new   PDO ( pgsql:host=localhost;dbname=homestead ,   $username ,   $password );  $pdo - setAttribute ( PDO :: ATTR_ERRMODE ,   PDO :: ERRMODE_EXCEPTION );  $stmt   =   $pdo - prepare ( UPDATE mytable SET name = :name WHERE id = :id );  $stmt - bindParam ( :name ,   $name ,   PDO :: PARAM_STR );   //default  $stmt - bindParam ( :id ,   $id ,   PDO :: PARAM_INT );   // PDO::PARAM_INT will have no quotes in the sql query, usually just needed for limit clauses  $stmt - execute ();  echo   $stmt - rowCount ();   // 1  }   catch ( PDOException   $e )   {  echo   Error:    .   $e - getMessage ();  }  ?", 
            "title": "Example CRUD - Update"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#example-crud-delete", 
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 ?php  $id   =   5 ;   // From a form or something similar  try   {  $pdo   =   new   PDO ( pgsql:host=localhost;dbname=someDatabase ,   $username ,   $password );  $pdo - setAttribute ( PDO :: ATTR_ERRMODE ,   PDO :: ERRMODE_EXCEPTION );  $stmt   =   $pdo - prepare ( DELETE FROM mytable WHERE id = :id );  $stmt - bindParam ( :id ,   $id );  $stmt - execute ();  echo   $stmt - rowCount ();   // 1  }   catch ( PDOException   $e )   {  echo   Error:    .   $e - getMessage ();  }  ?", 
            "title": "Example CRUD - Delete"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#selecting-data", 
            "text": "1 SELECT   columns   FROM   tablename   WHERE   condition   \nconditions:\n- equality (e.g., date = '2012-01-26')\n- range (e.g., price BETWEEN 10.0 AND 20.0)\n- relative (e.g., quantity   5)\n- wildcard LIKE (name LIKE '%Smith%' )", 
            "title": "Selecting data"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#using-a-wildcard-in-a-prepared-statement", 
            "text": "1\n2\n3\n4\n5 ?php  $stmt   =   $pdo - prepare ( SELECT columns FROM table WHERE column LIKE ?  );  $stmt -   bindValue   ( 1 ,   % . $search . % );  ?", 
            "title": "Using a wildcard in a prepared statement:"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#concatentation-operator", 
            "text": "Example: 1\n2\n3\n4\n5 SELECT   last_name   ||   ,    ||   first_name  FROM   users ;  SELECT   last_name   ||   ,    ||   first_name   AS   Name   FROM   users   ORDER   BY   Name ;", 
            "title": "Concatentation operator"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#functions", 
            "text": "1\n2\n3 SELECT   FUNCTION ( column )   FROM   tablename  SELECT   column1 ,   FUNCTION ( column2 )   AS   blah ,   column3   FROM   tablename   \nExamples: 1\n2 SELECT   lower ( title ),   trim ( description )  FROM   books ;", 
            "title": "Functions"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#sorting", 
            "text": "1 SELECT   *   FROM   tablename   ORDER   BY   column   DESC ,   column2   \nText sorting depends on collation   COLLATION  dictates how values are compared and sorted  Tied to the character set (language support)  Takes into account cultural habits  Case-sensitive or insensitive  Count accents or not?", 
            "title": "Sorting"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#grouping-results", 
            "text": "1 SELECT   name   FROM   products   WHERE   condition   GROUP   BY   name   \n* each product name occurs only once 1 SELECT   name ,   avg ( price )   FROM   products   WHERE   condition   GROUP   BY   name   \nAggregate functions used for anything not grouped\n* e.g.,  MAX ,  MIN ,  COUNT ,  SUM", 
            "title": "Grouping results"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#distinct", 
            "text": "DISTINCT  \u2013 provides unique values 1\n2\n3 SELECT   COUNT ( DISTINCT   customer_ID )   FROM   accounts  SELECT   AVG ( balance ),   customer_id   FROM   accounts   GROUP   BY   customer_id", 
            "title": "Distinct"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#joins", 
            "text": "Inner join, outer join on one, two, or more tables\nself join is possible \u2013 use aliases\n* normally use primary key and foreign key columns, but not always 1 SELECT   columns   FROM   tableA   JOIN_TYPE   tableB   JOIN_CONDITION   WHERE   conditions   \ncolumns can be  tablename.column  to prevent ambiguity   JOIN_TYPE: INNER JOIN table2 AS t2  JOIN_CLAUSE: ON conditions", 
            "title": "Joins"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#types-of-joins", 
            "text": "", 
            "title": "Types of joins"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#inner-join", 
            "text": "exclusive   Returns all rows when there is at least one match in BOTH tables  produces a Cartesian product between the specified tables (that is, each and every row in the first table is joined to each and every row in the second table).", 
            "title": "INNER JOIN"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#outer-join", 
            "text": "inclusive", 
            "title": "OUTER JOIN:"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#left-join", 
            "text": "Return all rows from the left table, and the matched rows from the right table (or  NULL  if no matching rows in right table)   in PostgreSQL:  JOIN  is equivalent to  INNER JOIN  LEFT ,  RIGHT  or  FULL  indicate  OUTER JOIN", 
            "title": "LEFT JOIN"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#join-on-vs-where-conditions", 
            "text": "The conditional_expr used with  ON  is any conditional expression of the form that can be used in a  WHERE  clause.  Generally, you should use the  ON  clause for conditions that specify how to join tables\nand the  WHERE  clause to restrict which rows you want in the result set.", 
            "title": "JOIN ON vs WHERE conditions"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#limiting-results", 
            "text": "e.g., only top 25: 1 SELECT   *   FROM   tablename   WHERE   conditions   ORDER   BY   column   LIMIT   25   \nOne argument = value specifies the number of rows from the beginning of the result set 1 SELECT   *   FROM   tablename   WHERE   conditions   ORDER   BY   column   LIMIT   num   OFFSET   skip   \nTwo arguments = the first argument specifies the number of rows to return, and the second specifies the number of rows to skip. 1 SELECT   *   FROM   tbl   LIMIT   5   OFFSET   10 ;   #   Retrieve   rows   11 - 16   \n* If you use  LIMIT , almost always use  ORDER BY \n* Large offsets: performance issues are possible\n    * Database still has to calculate the rows skipped by the offset even if they are not returned", 
            "title": "Limiting results"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#limit", 
            "text": "The higher the offset is, the longer the query is even if the number of rows retrieved is the same 1\n2\n3 SELECT   *   from   largetable   ORDER   BY   id   LIMIT   50   OFFSET   0   is   faster   than  SELECT   *   from   largetable   ORDER   BY   id   LIMIT   50   OFFSET   1000000   \n* Second query is the same as saying \u2013 select * from the first 1000050 rows that match the criteria and give the last 50\n* You still have to perform all the matches to know that you are at the end\n* Even if you use indices, the query can be long since the many rows must be found", 
            "title": "LIMIT"
        }, 
        {
            "location": "/Internet-App-Dev-III/09-using_postgres/#solution-if-the-order-by-is-sorted-by-unique-keys", 
            "text": "1 SELECT   *   from   largetable   WHERE   id     lastID   ORDER   BY   id   LIMIT   50   \nThis assumes you know the lastID that was requested\nthis assumes no holes in the ids:\ne.g. in a Paginated set:  lastID = (pageNumber - 1) * records/page", 
            "title": "Solution: If the Order By is sorted by unique keys"
        }, 
        {
            "location": "/Internet-App-Dev-III/10-pagination/", 
            "text": "Pagination\n\n\n\n\n\n\nNote\n\n\nCan use similar technique for \"infinite scrolling\" except Javascript sends Ajax query instead of a user clicking on the links\n\n\n\n\n\n\nOFFSET\n and \nLIMIT\n restricts which subset of the matched records is actually returned.\n\n\nTo paginate the returned results of a query, each iteration of the page will run the same query using different \nOFFSET\n parameter.\n\n\nThe first page viewing will request the first X records; the second page viewing, the second group of X records; and so forth.\n\n\nTo make this work, two values must be used in the query\n\n\nOFFSET\n, or which record to start with (where to begin fetching records)\n\n\nLIMIT\n, or number of records to display -\n fixed\n\n\nThe page has to know where to start -\n needs to be passed to the page\n\n\n\n\nAlgorithm: pagination\n\n\n\n\ndecide how many records to show per page? (e.g., 10) This will be fixed\n\n\n\n\nCalculate / remember total number of pages based on total number of records\n\n\n\n\n\n\ndone once, first time on page\n\n\n\n\nrequired to decide if you need prev \u2013 next links\n\n\n\n\nput this variable in query string so you don't have to recalculate\n\n\n\n\n\n\nIndicate the page you want\n\n\n\n\n\n\npass this variable in query string\n\n\n\n\n\n\nuse it to calculate the offset\n\n\n\n\n\n\nTotal pages and current page need to be passed to script each time\n\n\n\n\nbest way: through the \nGET\n values (query string)\n\n1\n2\n3\n4\n?php\n\n\nusers\n.\nphp\n?\np\n=\n5\nt\n=\n10\n  \n\n//p is the current page, t is total pages\n\n\n?\n\n\n\n\n\n\n\n\nExample\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n?php\n\n\n// Decide number of records to show per page\n\n\n$display\n \n=\n \n10\n;\n\n\n\n// Determine total number of pages...\n\n\nif\n \n(\nisset\n(\n$_GET\n[\nt\n])\n \n \nis\\_numeric\n(\n$_GET\n[\nt\n]))\n \n{\n\n    \n// Already been determined\n\n    \n$pages\n \n=\n \n$_GET\n[\nt\n];\n\n\n}\n \nelse\n \n{\n\n\n    \n// Need to determine total pages\n\n    \n// Count the number of records -\n this logic is in a DAO\n\n\n    \n//pseudo code: $q = \nSELECT COUNT(id) FROM products\n;\n\n\n    \n// execute statement, fetch all to get the result array (which is an array of rows)\n\n    \n// in this case, only one rows\n\n    \n// each row is an array: in this case it only has 1 element, the count\n\n    \n$num\\_rows\n \n=\n \n$result\n[\n0\n][\n0\n];\n\n\n    \n// Calculate the number of pages...\n\n    \nif\n \n(\n$num\\_rows\n \n$display\n)\n \n{\n \n// More than 1 page.\n\n        \n$pages\n \n=\n \nceil\n \n(\n$num\\_rows\n/\n$display\n);\n\n    \n}\n \nelse\n \n{\n\n        \n$pages\n \n=\n \n1\n;\n\n    \n}\n\n\n\n}\n\n\n\n// Determine where in the database to start returning results...\n\n\nif\n \n(\nisset\n(\n$_GET\n[\np\n])\n \n \nis\\_numeric\n(\n$_GET\n[\np\n]))\n \n{\n\n    \n$current\n \n=\n \n$_GET\n[\np\n];\n\n    \n//page numbers are 1 indexed for humans\n\n    \n$offset\n \n=\n \n(\n$current\n-\n1\n)\n\\\n*\n$display\n;\n\n\n}\n \nelse\n \n{\n\n    \n$current\n \n=\n1\n;\n\n    \n$offset\n \n=\n \n0\n;\n\n\n}\n\n\n\n//Get the results for that page\n\n\n// Define the query in a DAO\n\n\n\n//pseudo code: \nSELECT \\* FROM products ORDER BY product\\_name ASC OFFSET :start LIMIT :display\n;\n\n\n\n// pseudo code: $stmt-\n bindParams (\n:start\n, $offset);\n\n\n\n// execute prepared statement\n\n\n// Fetch and display the records\n\n\n$results\n \n=\n \n$pdo\n-\nfetchAll\n();\n\n\n\n//iterate through results to display on page -\n in the view script\n\n\n// After display, make the links to previous and next, if necessary\n\n\nif\n \n(\n$pages\n \n \n1\n)\n \n{\n\n        \n// If it\ns not the first page, make a Previous button:\n\n        \nif\n \n(\n$current\n \n!=\n \n1\n)\n \n{\n\n            \necho\n \na href=\nproducts.php?p=\n \n.\n \n(\n$current\n-\n1\n)\n \n.\n \nt=\n \n.\n \n$pages\n \n.\n Previous\n/a\n \n;\n\n        \n}\n\n\n        \n// Make all the numbered pages:\n\n        \nfor\n \n(\n$i\n \n=\n \n1\n;\n \n$i\n \n=\n \n$pages\n;\n \n$i\n++\n)\n \n{\n\n                \nif\n \n(\n$i\n \n!=\n \n$current\n)\n \n{\n\n                    \necho\n \na href=\nusers.php?p=\n \n.\n \n$i\n \n.\n \nt=\n \n.\n \n$pages\n \n \n.\n \n$i\n \n.\n \n/a\n \n;\n\n                \n}\n \nelse\n \n{\n\n                    \necho\n \n$i\n \n.\n \n \n;\n \n//no link for current page\n\n                \n}\n\n\n        \n}\n \n// End of FOR loop.\n\n\n        \n// If it\ns not the last page, make a Next button:\n\n        \nif\n \n(\n$current\n \n!=\n \n$pages\n)\n \n{\n\n            \necho\n \na href=\nusers.php?p=\n \n.\n \n(\n$current\n+\n1\n)\n \n.\n \nt=\n \n.\n \n$pages\n \n.\n \nNext\n/a\n;\n\n        \n}\n\n\n}\n \n// End of links section.", 
            "title": "10 pagination"
        }, 
        {
            "location": "/Internet-App-Dev-III/10-pagination/#pagination", 
            "text": "Note  Can use similar technique for \"infinite scrolling\" except Javascript sends Ajax query instead of a user clicking on the links    OFFSET  and  LIMIT  restricts which subset of the matched records is actually returned.  To paginate the returned results of a query, each iteration of the page will run the same query using different  OFFSET  parameter.  The first page viewing will request the first X records; the second page viewing, the second group of X records; and so forth.  To make this work, two values must be used in the query  OFFSET , or which record to start with (where to begin fetching records)  LIMIT , or number of records to display -  fixed  The page has to know where to start -  needs to be passed to the page", 
            "title": "Pagination"
        }, 
        {
            "location": "/Internet-App-Dev-III/10-pagination/#algorithm-pagination", 
            "text": "decide how many records to show per page? (e.g., 10) This will be fixed   Calculate / remember total number of pages based on total number of records    done once, first time on page   required to decide if you need prev \u2013 next links   put this variable in query string so you don't have to recalculate    Indicate the page you want    pass this variable in query string    use it to calculate the offset    Total pages and current page need to be passed to script each time   best way: through the  GET  values (query string) 1\n2\n3\n4 ?php  users . php ? p = 5 t = 10    //p is the current page, t is total pages  ?", 
            "title": "Algorithm: pagination"
        }, 
        {
            "location": "/Internet-App-Dev-III/10-pagination/#example", 
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73 ?php  // Decide number of records to show per page  $display   =   10 ;  // Determine total number of pages...  if   ( isset ( $_GET [ t ])     is\\_numeric ( $_GET [ t ]))   { \n     // Already been determined \n     $pages   =   $_GET [ t ];  }   else   { \n\n     // Need to determine total pages \n     // Count the number of records -  this logic is in a DAO \n\n     //pseudo code: $q =  SELECT COUNT(id) FROM products ; \n\n     // execute statement, fetch all to get the result array (which is an array of rows) \n     // in this case, only one rows \n     // each row is an array: in this case it only has 1 element, the count \n     $num\\_rows   =   $result [ 0 ][ 0 ]; \n\n     // Calculate the number of pages... \n     if   ( $num\\_rows   $display )   {   // More than 1 page. \n         $pages   =   ceil   ( $num\\_rows / $display ); \n     }   else   { \n         $pages   =   1 ; \n     }  }  // Determine where in the database to start returning results...  if   ( isset ( $_GET [ p ])     is\\_numeric ( $_GET [ p ]))   { \n     $current   =   $_GET [ p ]; \n     //page numbers are 1 indexed for humans \n     $offset   =   ( $current - 1 ) \\ * $display ;  }   else   { \n     $current   = 1 ; \n     $offset   =   0 ;  }  //Get the results for that page  // Define the query in a DAO  //pseudo code:  SELECT \\* FROM products ORDER BY product\\_name ASC OFFSET :start LIMIT :display ;  // pseudo code: $stmt-  bindParams ( :start , $offset);  // execute prepared statement  // Fetch and display the records  $results   =   $pdo - fetchAll ();  //iterate through results to display on page -  in the view script  // After display, make the links to previous and next, if necessary  if   ( $pages     1 )   { \n         // If it s not the first page, make a Previous button: \n         if   ( $current   !=   1 )   { \n             echo   a href= products.php?p=   .   ( $current - 1 )   .   t=   .   $pages   .  Previous /a   ; \n         } \n\n         // Make all the numbered pages: \n         for   ( $i   =   1 ;   $i   =   $pages ;   $i ++ )   { \n                 if   ( $i   !=   $current )   { \n                     echo   a href= users.php?p=   .   $i   .   t=   .   $pages     .   $i   .   /a   ; \n                 }   else   { \n                     echo   $i   .     ;   //no link for current page \n                 } \n\n         }   // End of FOR loop. \n\n         // If it s not the last page, make a Next button: \n         if   ( $current   !=   $pages )   { \n             echo   a href= users.php?p=   .   ( $current + 1 )   .   t=   .   $pages   .   Next /a ; \n         }  }   // End of links section.", 
            "title": "Example"
        }, 
        {
            "location": "/Internet-App-Dev-III/11-classes/", 
            "text": "Classes and objects\n\n\n\n\none class per file by convention\n\n1\n2\n/** Documentation block in PHPDocumentor standard\n*/\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n?php\n\n\n//convention uppercase Camel (Pascal), **not** case sensitive!!\n\n\nclass\n \nClassName\n \nextends\n \nNameAbstract\n \nimplements\n \nNameInterface\n \n{\n\n    \nprivate\n \n$var1\n;\n\n    \nprivate\n \n$var2\n;\n  \n//initialize only to constant, no default visibility\n\n\n    \n/**\n\n\n    * Documentation block \n\n\n    */\n\n    \n//lowercase Camel but not case sensitive, default visibility is public\n\n    \npublic\n \nfunction\n \nblah\n()\n \n{\n\n        \n//stuff\n\n        \nreturn\n \n$this\n \n-\n \nvar\n;\n \n//$this required to access any instance members\n\n    \n}\n\n\n}\n\n\n?\n\n\n\n\n\n\n\n\nPHP documentation standards\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n/**\n\n\n* Short description for class\n\n\n*\n\n\n* @copyright\n\n\n* @version\n\n\n* @since\n\n\n* @deprecated\n\n\n*/\n\n\n\n/**\n\n\n* Short description of method\n\n\n* @param\n\n\n* @return\n\n\n* @throws\n\n\n*/\n\n\n\n\n\n\n\nExample\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n?php\n\n\nclass\n \nRectangle\n \n{\n\n    \n// Declare the attributes\n\n    \n// must have a visibility modifier: public, protected, private\n\n    \n//initialize to constant value only\n\n    \nprivate\n \n$width\n \n=\n \n0\n;\n\n    \nprivate\n \n$height\n \n=\n \n0\n;\n\n\n    \n//methods and constructor are public by default\n\n    \n// can specify public, protected, private\n\n    \n// Constructor\n\n    \nfunction\n \n__construct\n(\n$w\n \n=\n \n0\n,\n \n$h\n \n=\n \n0\n)\n \n{\n\n        \n$this\n-\nwidth\n \n=\n \n$w\n;\n\n        \n$this\n-\nheight\n \n=\n \n$h\n;\n\n    \n}\n\n    \n// No overloads so use default values:\n\n    \nfunction\n \nsetSize\n(\n$w\n \n=\n \n0\n,\n \n$h\n \n=\n \n0\n)\n \n{\n\n        \n$this\n-\nwidth\n \n=\n \n$w\n;\n\n        \n$this\n-\nheight\n \n=\n \n$h\n;\n\n      \n}\n\n\n    \nfunction\n \ngetArea\n()\n \n{\n\n        \nreturn\n \n(\n$this\n-\nwidth\n \n\\\n*\n \n$this\n-\nheight\n);\n\n    \n}\n\n\n    \nfunction\n \ngetPerimeter\n()\n \n{\n\n        \nreturn\n \n(\n \n(\n$this\n-\nwidth\n \n+\n \n$this\n-\nheight\n)\n \n\\\n*\n \n2\n \n);\n\n    \n}\n\n\n    \nfunction\n \nisSquare\n()\n \n{\n\n        \nif\n \n(\n$this\n-\nwidth\n \n==\n \n$this\n-\nheight\n)\n \n{\n\n            \nreturn\n \ntrue\n;\n \n// Square\n\n        \n}\n \nelse\n \n{\n\n            \nreturn\n \nfalse\n;\n \n// Not a square\n\n        \n}\n\n    \n}\n\n\n}\n \n// End of Rectangle class.\n\n\n\n//NOTE: no closing php tag needed. Why? This class will be included in another script, so it is not necessary\n\n\n\n\n\n\n\nNotes\n\n\n\n\nClass names and method names (like \nany\n other PHP function) \nare \nnot\n case sensitive (??!!)\n\n\nVisibility \nmust\n be declared for \nproperties\n\n\noo\n: \npublic \n,\n private \n, or\n protected\n\n\nAny initialization of attribute outside the constructor has to be to a \nliteral or constant\n\n\nMethod visibility: default is public\n\n\nClass can contain constants ( \nconst\n keyword), properties, methods\n\n\n\n\nUsing a class\n\n\n1\n2\n3\n4\n5\n6\n?php\n\n\n$object\n \n=\n \nnew\n \nClassName\n();\n\n\n\n$object\n-\nmethodName\n();\n \n// -\n is the object member operator\n\n\n$object\n-\npropertyName\n;\n \n// NOT $object-\n$propertyName;\n\n\nunset\n(\n$object\n);\n \n//when done, if required (alternatively = null)\n\n\n\n\n\n- object names (like any other PHP variable) are case sensitive\n\n\nAttributes (also called properties in PHP/Java)\n\n\n\n\ndefined as \npublic\n, \nprotected\n, or \nprivate\n followed by a normal variable declaration\n\n\nThis declaration may include an initialization, but this initialization must be a constant value\n\n\n\n\nwithin same class methods and non-static properties \nmust\n be accessed by using\n\n\n\n\n$this_-\n_ property;\n\n\n\n\n\n\n\n\nOutside, if visible:\n\n\n\n\n$obj-\nproperty;\n\n\n\n\n\n\n\n\nConstructors\n\n\n\n\nConstructor is always called \nfunction __construct()\n (2 underscores)\n\n\nMagic\n function \u2013 it is automatically called when an object is instantiated, no return\n\n\nCan take arguments \u2013 but since php has no overloading, use default values\n\n\nYou can directly call a constructor (although you will rarely need to):\n\n\n\n\n$o = new SomeClass();\n  allocates and initializes\n\n\n$o-\n_ _construct();\n   initializes only, use it to reinitialize properties?\n\n\nMore on constructors\n\n\n\n\nParent constructors are \nnot\n called implicitly \nif\n the child class defines a constructor\n\n\noo\n In order to run a parent constructor, call \nparent::__construct()\n within the child constructor\n\n\nIf the child does not define a constructor then it may be \ninherited\n from the parent class just like a normal class method\n\n\noo\n i.e., if it doesn't define \n__construct\n, the parent's one is used\n\n\n\n\nDestructors\n\n\n\n\nthe destructor is called when the object is destroyed. This happens when there are no more references to the object, or when a script finishes\n\n\nDestructor is a place to release any resources (long living)\n\n\nNo arguments to \n__destruct()\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n?php\n\n\nclass\n \nClassName\n \n{\n\n    \n// Attributes and methods.\n\n    \nfunction\n \n_\n \n_destruct\n()\n \n{\n\n        \n// destroy your resources\n\n        \nparent\n::\n__destruct\n();\n \n//must explicitly call parent\ns destruct\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\nRecall: Database result set in objects\n\n\nThe returned records be turned into specific types of objects:\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n?php\n\n\nclass\n \nUser\n \n{\n\n\n    \nprivate\n \n$id\n;\n\n    \nprivate\n \n$name\n;\n\n\n    \nfunction\n \n__construct\n(\n$id\n=\n0\n,\n \n$name\n=\n)\n \n{\n\n        \n$this\n-\nid\n \n=\n \n$id\n;\n\n        \n$this\n-\nname\n \n=\n \n$name\n;\n\n    \n}\n\n\n    \nfunction\n \ngetName\n()\n \n{\n\n        \nreturn\n \n$this\n-\nname\n;\n\n    \n}\n\n\n}\n\n\n\n\n\nFetch database records into new User objects:\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n?php\n\n\n$stmt\n \n=\n \n$pdo\n-\nprepare\n(\nSELECT id, name FROM users\n);\n\n\n\n$stmt\n-\nsetFetchMode\n(\nPDO\n::\n \nFETCH_CLASS\n|\nPDO\n::\nFETCH_PROPS_LATE\n,\n \nUser\n);\n\n\n$stmt\n-\nexecute\n();\n\n\n\nwhile\n \n(\n$row\n \n=\n$stmt\n-\nfetch\n()))\n \n{\n\n\n \necho\n \n$row\n-\ngetUsername\n();\n\n\n\n}\n\n\n\n\n\n\n$row\n will be a \nUser\n object, and it can invoke the \nUser\n methods.\n\n\nNotes\n\n\n\n\nPHP directly maps the returned column names to matching object attributes even if they are private\n\n\nIf no comparable class attribute exists, PHP will create the column name as a new public attribute!!!\n\n\nDANGER: the constructor is called \nafter\n the attributes are set ?!! So either don't code a constructor in your data transfer class, or use\n\n1\n$q-\nsetFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, \nUser\n));\n\n\n\n\n-\n constructor is executed before PDO assigns the object attributes\n\n\n\n\nRecall: Column name to Attribute name mapping\n\n\n\n\nsql aliases are used to map the sql query result to the appropriate object attribute\n\n\nyou can force column names (and aliases) to a specific case pattern\n\n\n--\n default will be \nall lower case\n\n\n1\n$pdo-\nsetAttribute(PDO::ATTR_CASE, PDO::CASE_NATURAL );\n\n\n\n\n\nPDO::ATTR_CASE\n \u2013 forces columns to a case pattern\n\n\n\n\nPDO::CASE_NATURAL\n leaves them as they are returned\n\n\nExample\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n?php\n\n\nclass\n \nCategory\n \n{\n\n  \npublic\n \n$id\n;\n\n  \npublic\n \n$fkId\n;\n\n  \npublic\n \n$shortName\n;\n\n  \npublic\n \n$longName\n;\n\n\n}\n\n\n$pdo\n-\nsetAttribute\n(\nPDO\n::\nATTR_CASE\n,\n \nPDO\n::\nCASE_NATURAL\n \n);\n\n\n$stmt\n \n=\n \n$pdo\n-\nprepare\n(\nSELECT \n\n\n    id, fk_id AS `fkId`,\n\n\n    short_name AS `shortName`,\n\n\n    long_name As `longName`      \n\n\n    FROM `Category`\n\n\n);\n\n\n\n$stmt\n-\n \nsetFetchMode\n(\nPDO\n::\nFETCH_CLASS\n|\nPDO\n::\nFETCH_PROPS_LATE\n,\n \nUser\n));\n\n\n\n$stmt\n \n-\n \nexecute\n();\n\n\n\n\n\n- since we use an alias, the alias is used as is\n\n\nClass constants\n\n\n\n\nClass constants are like public static properties whose value can never change.\n\n\nClass constants are created using the \nconst\n keyword, followed by the name of the constant (without a dollar sign), followed by the assignment operator and the constant's value:\n\n1\n2\n3\n4\n?php\n\n\nclass\n \nSomeClass\n \n{\n\n    \nconst\n \nPI\n \n=\n \n3.14\n;\n\n\n}\n\n\n\n\n\n\nonly accessible through \nClassName::CONSTANT\n or \nself::CONSTANT\n (within the class)\n\n\n\n\n:: Scope Resolution operator\n\n\n\n\nallows access to \nstatic\n , \nconstant\n , and \noverridden\n properties or methods of a class (can't use -\n)\n\n1\n2\n3\n4\n5\n6\n?php\n\n\nclass\n \nMyClass\n \n{\n\n    \nconst\n \nCONSTANT\n \n=\n \n42\n;\n\n\n}\n\n\n\necho\n \nMyClass\n::\nCONSTANT\n;\n\n\n\n\n\n\n\n\nself, parent, static\n\n\n\n\nThree special keywords \nself\n , \nparent\n and \nstatic\n are used to access properties or methods from inside a class definition.\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n?php\n\n\nclass\n \nMyClass\n\n\n{\n\n    \nprotected\n \nfunction\n \nmyFunc\n()\n \n{\n\n        \necho\n \nMyClass\n;\n\n    \n}\n\n\n}\n\n\n\nclass\n \nOtherClass\n \nextends\n \nMyClass\n\n\n{\n\n    \n// Override parent\ns definition\n\n    \npublic\n \nfunction\n \nmyFunc\n()\n\n    \n{\n\n        \n// call the parent function\n\n        \nparent\n::\nmyFunc\n();\n\n        \necho\n \nOtherClass\n;\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\nStatic members\n\n\n\n\na static variable is shared across all instances of that class\n\n\nTo declare a static attribute, use the static keyword after the visibility indicator\n\n1\npublic static $count;\n\n\n\n\n\nwithin same class, are accessed by using\n\n1\nself::$count\n\n\n\n\n\nOutside, if visible:\n\n1\nClassName :: $count\n\n\n\n\n\n\n\nInheritance\n\n\n\n\nonly 1 base class (no multiple inheritance)\n\n\nThe inherited methods and properties can be overridden by redeclaring them with the same name defined in the parent class.\n\n\nPHP signature looks only at name, not parameters or return\n\n\nif the parent class has defined a method as final, that method may not be overridden\n\n\nif the class is declared as final, it cannot be extended\n\n\naccess the overridden methods or static properties by referencing them with \nparent::\n  (instead of super)\n\n\n\n\ninstanceof keyword (not a function)\n\n\nif ($obj instanceof SomeClass) {\u2026\n\n\nPolymorphism\n\n\n\n\nWhen related classes have overridden methods, the method called depends on the type of the object calling it.\n\n\nSince PHP is weakly typed, it is ALWAYS the runtime type that is used\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n?php\n\n\nclass\n \nE\n{\n\n \nfunction\n \nscream\n()\n \n{\n\n    \necho\n \neee\n;\n\n \n}\n\n\n}\n\n\n\nclass\n \nA\n \nextends\n  \nE\n \n{\n\n \nfunction\n \nscream\n()\n \n{\n\n    \necho\n \naaa\n;\n\n  \n}\n\n\n}\n\n\n\n$obj1\n \n=\n \nnew\n \nA\n();\n\n\n$obj1\n-\nscream\n();\n  \n//aaa\n\n\n\n$obj2\n \n=\n \nnew\n \nE\n();\n\n\n$obj2\n-\nscream\n();\n  \n//eee\n\n\n\n\n\n\n\n\n$this vs self::\n\n\nUsually:\n\n\n\n\nUse \n$this\n to refer to the current object: \n$this-\nmember\n for non-static members\n\n\nUse self to refer to the current class: \nself::$member\n for static members.\n\n\n\n\nBUT\u2026\n\n\n\n\n-\n is an object operator, but can access static \nmethods\n (not static attributes)\n\n\n::\n is a scope resolution operator \u2013 it can access static, constants and accessible overridden member in parent\n\n\nself::\n can refer to both static and non-static members\n\n\n--\n non-static member will be based on the current class where the method is \u2234 not polymorphic!\n\n\n--\n references to the current class  \nself::\n  are resolved using the class in which the function was defined\n\n\naccessing parent member parent::\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n?php\n\n\nclass\n \nA\n \n{\n\n    \nfunction\n \nscreamloudly\n(){\n\n        \n$this\n-\nscream\n();\n\n        \nself\n::\nscream\n();\n\n    \n}\n\n    \nfunction\n \nscream\n(){\n\n        \necho\n \neee\n;\n\n    \n}\n\n\n}\n\n\n\nclass\n \nB\n \nextends\n \nA\n \n{\n\n    \nfunction\n \nscream\n(){\n\n        \necho\n \naaa\n;\n\n    \n}\n\n\n}\n\n\n\n$obj\n \n=\n \nnew\n \nB\n();\n\n\n$obj\n-\nscreamloudly\n();\n   \n//output: aaaeee\n\n\n\n\n\n\n\n\nLate static binding\n\n\n\n\nlate binding on static methods invoked with \nstatic::\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n?php\n\n\nclass\n \nA\n \n{\n\n    \npublic\n \nstatic\n \nfunction\n \nfindwho\n()\n \n{\n\n        \nself\n::\nwho\n();\n \n// PHP binds this to A::who() right away\n\n        \n**\nstatic\n::**\n \nwho\n();\n  \n// PHP waits to resolve this (hence, late)!\n\n    \n}\n\n\n    \npublic\n \nstatic\n \nfunction\n \nwho\n()\n \n{\n\n        \necho\n \n__CLASS__\n.\n\\n\n;\n\n    \n}\n\n\n}\n\n\n\nclass\n \nB\n \nextends\n \nA\n \n{\n\n    \npublic\n \nstatic\n \nfunction\n \ntest\n()\n \n{\n\n       \nself\n::\nfindwho\n();\n\n    \n}\n\n\n    \npublic\n \nstatic\n \nfunction\n \nwho\n()\n \n{\n\n        \necho\n \n__CLASS__\n.\n\\n\n;\n\n    \n}\n\n\n\n}\n\n\n\nB\n::\ntest\n();\n   \n//A  B\n\n\n\n\n\n\n\n\nType hinting\n\n\n\n\n\"types\" in a method and function parameter list\n\n\nworks for class names, interfaces, callable (which is a callback - function name string - delegate) and array only\n\n\n--\n callback functions -\n a lot like delegates \u2013 first class function (function is assigned to a variable)\n\n\nno types allowed for scalars such as \nstring\n / \nint\n / \nfloat\n/ etc...\n\n\n\n\nObjects \u2013 type hinting\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n?php\n\n\nclass\n \nMyClass\n \n{\n\n    \npublic\n \nfunction\n \ntest\n(\nOtherClass\n \n$otherclass\n)\n \n{\n\n        \necho\n \n$otherclass\n-\ngetVar\n();\n\n    \n}\n\n    \npublic\n \nfunction\n \ntest_array\n(\narray\n \n$input_array\n)\n \n{\n\n        \nprint_r\n(\n$input_array\n);\n\n    \n}\n\n    \npublic\n \nfunction\n \ntest_interface\n(\nCountable\n \n$count\n)\n \n{\n\n        \necho\n \nget_class\n(\n$count\n);\n\n    \n}\n\n    \npublic\n \nfunction\n \ntest_callable\n(\ncallable\n \n$callback\n,\n \n$data\n)\n \n{\n\n        \n$callback\n(\n$data\n);\n\n    \n}\n\n\n}\n\n\n\n\n\n- removes needs for constant type checking for objects\n- throws a catchable exception\n- won't give you overloaded functions\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n?php\n\n\n// An instance of each class\n\n\n$myclass\n \n=\n \nnew\n \nMyClass\n();\n  \n//() optional is no params\n\n\n$otherclass\n \n=\n \nnew\n \nOtherClass\n();\n\n\n\n// Fatal Error: Argument 1 must be an object of class OtherClass\n\n\n$myclass\n-\ntest\n(\nhello\n);\n\n\n\n// Fatal Error: Argument 1 must be an instance of OtherClass\n\n\n$foo\n \n=\n \nnew\n \nstdClass\n;\n\n\n$myclass\n-\ntest\n(\n$foo\n);\n\n\n\n// Fatal Error: Argument 1  must be an instance of OtherClass\n\n\n$myclass\n-\ntest\n(\nnull\n);\n\n\n\n// Works\n\n\n$myclass\n-\ntest\n(\n$otherclass\n);\n\n\n\n// Fatal Error: Argument 1 must be an array\n\n\n$myclass\n-\ntest_array\n(\na string\n);\n\n\n\n// Works: Prints the array\n\n\n$myclass\n-\ntest_array\n(\n \n[\na\n,\n \nb\n,\n \nc\n]\n \n);\n\n\n\n// Works: Prints ArrayObject\n\n\n$myclass\n-\ntest_interface\n(\nnew\n \nArrayObject\n(\n \n[\n1\n,\n2\n,\n3\n]\n \n));\n\n\n\n// Works: Prints int(1)\n\n\n$myclass\n-\ntest_callable\n(\nvar_dump\n,\n \n1\n);\n\n\n\n\n\n\nType hinting \u2013 not compatible with null\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n?php\n\n\nclass\n \nType\n \n{\n\n\n}\n\n\n\nfunction\n \nfoo\n(\nType\n \n$t\n)\n \n{\n\n\n}\n\n\n\nfoo\n(\nnull\n);\n\n\n\n\n\n- Results in fatal error\n- Why? \nNull\n is \nnot\n an object, interface, array or callable\n- Can't use type hinting for anything else (i.e., not for strings, numeric, or null)!\n- Solution: allow null as the default value\n\n1\n2\n3\n?php\n\n\nfunction\n \nfoo\n(\nType\n \n$t\n=\nnull\n)\n \n{\n\n\n}", 
            "title": "11 classes"
        }, 
        {
            "location": "/Internet-App-Dev-III/11-classes/#classes-and-objects", 
            "text": "one class per file by convention 1\n2 /** Documentation block in PHPDocumentor standard\n*/    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 ?php  //convention uppercase Camel (Pascal), **not** case sensitive!!  class   ClassName   extends   NameAbstract   implements   NameInterface   { \n     private   $var1 ; \n     private   $var2 ;    //initialize only to constant, no default visibility \n\n     /**      * Documentation block       */ \n     //lowercase Camel but not case sensitive, default visibility is public \n     public   function   blah ()   { \n         //stuff \n         return   $this   -   var ;   //$this required to access any instance members \n     }  }  ?", 
            "title": "Classes and objects"
        }, 
        {
            "location": "/Internet-App-Dev-III/11-classes/#php-documentation-standards", 
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 /**  * Short description for class  *  * @copyright  * @version  * @since  * @deprecated  */  /**  * Short description of method  * @param  * @return  * @throws  */", 
            "title": "PHP documentation standards"
        }, 
        {
            "location": "/Internet-App-Dev-III/11-classes/#example", 
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39 ?php  class   Rectangle   { \n     // Declare the attributes \n     // must have a visibility modifier: public, protected, private \n     //initialize to constant value only \n     private   $width   =   0 ; \n     private   $height   =   0 ; \n\n     //methods and constructor are public by default \n     // can specify public, protected, private \n     // Constructor \n     function   __construct ( $w   =   0 ,   $h   =   0 )   { \n         $this - width   =   $w ; \n         $this - height   =   $h ; \n     } \n     // No overloads so use default values: \n     function   setSize ( $w   =   0 ,   $h   =   0 )   { \n         $this - width   =   $w ; \n         $this - height   =   $h ; \n       } \n\n     function   getArea ()   { \n         return   ( $this - width   \\ *   $this - height ); \n     } \n\n     function   getPerimeter ()   { \n         return   (   ( $this - width   +   $this - height )   \\ *   2   ); \n     } \n\n     function   isSquare ()   { \n         if   ( $this - width   ==   $this - height )   { \n             return   true ;   // Square \n         }   else   { \n             return   false ;   // Not a square \n         } \n     }  }   // End of Rectangle class.  //NOTE: no closing php tag needed. Why? This class will be included in another script, so it is not necessary", 
            "title": "Example"
        }, 
        {
            "location": "/Internet-App-Dev-III/11-classes/#notes", 
            "text": "Class names and method names (like  any  other PHP function)  are  not  case sensitive (??!!)  Visibility  must  be declared for  properties  oo :  public  ,  private  , or  protected  Any initialization of attribute outside the constructor has to be to a  literal or constant  Method visibility: default is public  Class can contain constants (  const  keyword), properties, methods", 
            "title": "Notes"
        }, 
        {
            "location": "/Internet-App-Dev-III/11-classes/#using-a-class", 
            "text": "1\n2\n3\n4\n5\n6 ?php  $object   =   new   ClassName ();  $object - methodName ();   // -  is the object member operator  $object - propertyName ;   // NOT $object- $propertyName;  unset ( $object );   //when done, if required (alternatively = null)   \n- object names (like any other PHP variable) are case sensitive", 
            "title": "Using a class"
        }, 
        {
            "location": "/Internet-App-Dev-III/11-classes/#attributes-also-called-properties-in-phpjava", 
            "text": "defined as  public ,  protected , or  private  followed by a normal variable declaration  This declaration may include an initialization, but this initialization must be a constant value   within same class methods and non-static properties  must  be accessed by using   $this_- _ property;     Outside, if visible:   $obj- property;", 
            "title": "Attributes (also called properties in PHP/Java)"
        }, 
        {
            "location": "/Internet-App-Dev-III/11-classes/#constructors", 
            "text": "Constructor is always called  function __construct()  (2 underscores)  Magic  function \u2013 it is automatically called when an object is instantiated, no return  Can take arguments \u2013 but since php has no overloading, use default values  You can directly call a constructor (although you will rarely need to):   $o = new SomeClass();   allocates and initializes  $o- _ _construct();    initializes only, use it to reinitialize properties?", 
            "title": "Constructors"
        }, 
        {
            "location": "/Internet-App-Dev-III/11-classes/#more-on-constructors", 
            "text": "Parent constructors are  not  called implicitly  if  the child class defines a constructor  oo  In order to run a parent constructor, call  parent::__construct()  within the child constructor  If the child does not define a constructor then it may be  inherited  from the parent class just like a normal class method  oo  i.e., if it doesn't define  __construct , the parent's one is used", 
            "title": "More on constructors"
        }, 
        {
            "location": "/Internet-App-Dev-III/11-classes/#destructors", 
            "text": "the destructor is called when the object is destroyed. This happens when there are no more references to the object, or when a script finishes  Destructor is a place to release any resources (long living)  No arguments to  __destruct()  1\n2\n3\n4\n5\n6\n7\n8 ?php  class   ClassName   { \n     // Attributes and methods. \n     function   _   _destruct ()   { \n         // destroy your resources \n         parent :: __destruct ();   //must explicitly call parent s destruct \n     }  }", 
            "title": "Destructors"
        }, 
        {
            "location": "/Internet-App-Dev-III/11-classes/#recall-database-result-set-in-objects", 
            "text": "The returned records be turned into specific types of objects:  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 ?php  class   User   { \n\n     private   $id ; \n     private   $name ; \n\n     function   __construct ( $id = 0 ,   $name = )   { \n         $this - id   =   $id ; \n         $this - name   =   $name ; \n     } \n\n     function   getName ()   { \n         return   $this - name ; \n     }  }   \nFetch database records into new User objects:  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 ?php  $stmt   =   $pdo - prepare ( SELECT id, name FROM users );  $stmt - setFetchMode ( PDO ::   FETCH_CLASS | PDO :: FETCH_PROPS_LATE ,   User );  $stmt - execute ();  while   ( $row   = $stmt - fetch ()))   { \n\n  echo   $row - getUsername ();  }    $row  will be a  User  object, and it can invoke the  User  methods.", 
            "title": "Recall: Database result set in objects"
        }, 
        {
            "location": "/Internet-App-Dev-III/11-classes/#notes_1", 
            "text": "PHP directly maps the returned column names to matching object attributes even if they are private  If no comparable class attribute exists, PHP will create the column name as a new public attribute!!!  DANGER: the constructor is called  after  the attributes are set ?!! So either don't code a constructor in your data transfer class, or use 1 $q- setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE,  User ));  \n-  constructor is executed before PDO assigns the object attributes", 
            "title": "Notes"
        }, 
        {
            "location": "/Internet-App-Dev-III/11-classes/#recall-column-name-to-attribute-name-mapping", 
            "text": "sql aliases are used to map the sql query result to the appropriate object attribute  you can force column names (and aliases) to a specific case pattern  --  default will be  all lower case  1 $pdo- setAttribute(PDO::ATTR_CASE, PDO::CASE_NATURAL );   PDO::ATTR_CASE  \u2013 forces columns to a case pattern   PDO::CASE_NATURAL  leaves them as they are returned", 
            "title": "Recall: Column name to Attribute name mapping"
        }, 
        {
            "location": "/Internet-App-Dev-III/11-classes/#example_1", 
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 ?php  class   Category   { \n   public   $id ; \n   public   $fkId ; \n   public   $shortName ; \n   public   $longName ;  }  $pdo - setAttribute ( PDO :: ATTR_CASE ,   PDO :: CASE_NATURAL   );  $stmt   =   $pdo - prepare ( SELECT       id, fk_id AS `fkId`,      short_name AS `shortName`,      long_name As `longName`            FROM `Category`  );  $stmt -   setFetchMode ( PDO :: FETCH_CLASS | PDO :: FETCH_PROPS_LATE ,   User ));  $stmt   -   execute ();   \n- since we use an alias, the alias is used as is", 
            "title": "Example"
        }, 
        {
            "location": "/Internet-App-Dev-III/11-classes/#class-constants", 
            "text": "Class constants are like public static properties whose value can never change.  Class constants are created using the  const  keyword, followed by the name of the constant (without a dollar sign), followed by the assignment operator and the constant's value: 1\n2\n3\n4 ?php  class   SomeClass   { \n     const   PI   =   3.14 ;  }    only accessible through  ClassName::CONSTANT  or  self::CONSTANT  (within the class)", 
            "title": "Class constants"
        }, 
        {
            "location": "/Internet-App-Dev-III/11-classes/#scope-resolution-operator", 
            "text": "allows access to  static  ,  constant  , and  overridden  properties or methods of a class (can't use - ) 1\n2\n3\n4\n5\n6 ?php  class   MyClass   { \n     const   CONSTANT   =   42 ;  }  echo   MyClass :: CONSTANT ;", 
            "title": ":: Scope Resolution operator"
        }, 
        {
            "location": "/Internet-App-Dev-III/11-classes/#self-parent-static", 
            "text": "Three special keywords  self  ,  parent  and  static  are used to access properties or methods from inside a class definition.  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 ?php  class   MyClass  { \n     protected   function   myFunc ()   { \n         echo   MyClass ; \n     }  }  class   OtherClass   extends   MyClass  { \n     // Override parent s definition \n     public   function   myFunc () \n     { \n         // call the parent function \n         parent :: myFunc (); \n         echo   OtherClass ; \n     }  }", 
            "title": "self, parent, static"
        }, 
        {
            "location": "/Internet-App-Dev-III/11-classes/#static-members", 
            "text": "a static variable is shared across all instances of that class  To declare a static attribute, use the static keyword after the visibility indicator 1 public static $count;   within same class, are accessed by using 1 self::$count   Outside, if visible: 1 ClassName :: $count", 
            "title": "Static members"
        }, 
        {
            "location": "/Internet-App-Dev-III/11-classes/#inheritance", 
            "text": "only 1 base class (no multiple inheritance)  The inherited methods and properties can be overridden by redeclaring them with the same name defined in the parent class.  PHP signature looks only at name, not parameters or return  if the parent class has defined a method as final, that method may not be overridden  if the class is declared as final, it cannot be extended  access the overridden methods or static properties by referencing them with  parent::   (instead of super)", 
            "title": "Inheritance"
        }, 
        {
            "location": "/Internet-App-Dev-III/11-classes/#instanceof-keyword-not-a-function", 
            "text": "if ($obj instanceof SomeClass) {\u2026", 
            "title": "instanceof keyword (not a function)"
        }, 
        {
            "location": "/Internet-App-Dev-III/11-classes/#polymorphism", 
            "text": "When related classes have overridden methods, the method called depends on the type of the object calling it.  Since PHP is weakly typed, it is ALWAYS the runtime type that is used  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 ?php  class   E { \n  function   scream ()   { \n     echo   eee ; \n  }  }  class   A   extends    E   { \n  function   scream ()   { \n     echo   aaa ; \n   }  }  $obj1   =   new   A ();  $obj1 - scream ();    //aaa  $obj2   =   new   E ();  $obj2 - scream ();    //eee", 
            "title": "Polymorphism"
        }, 
        {
            "location": "/Internet-App-Dev-III/11-classes/#this-vs-self", 
            "text": "Usually:   Use  $this  to refer to the current object:  $this- member  for non-static members  Use self to refer to the current class:  self::$member  for static members.   BUT\u2026   -  is an object operator, but can access static  methods  (not static attributes)  ::  is a scope resolution operator \u2013 it can access static, constants and accessible overridden member in parent  self::  can refer to both static and non-static members  --  non-static member will be based on the current class where the method is \u2234 not polymorphic!  --  references to the current class   self::   are resolved using the class in which the function was defined  accessing parent member parent::  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 ?php  class   A   { \n     function   screamloudly (){ \n         $this - scream (); \n         self :: scream (); \n     } \n     function   scream (){ \n         echo   eee ; \n     }  }  class   B   extends   A   { \n     function   scream (){ \n         echo   aaa ; \n     }  }  $obj   =   new   B ();  $obj - screamloudly ();     //output: aaaeee", 
            "title": "$this vs self::"
        }, 
        {
            "location": "/Internet-App-Dev-III/11-classes/#late-static-binding", 
            "text": "late binding on static methods invoked with  static::   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24 ?php  class   A   { \n     public   static   function   findwho ()   { \n         self :: who ();   // PHP binds this to A::who() right away \n         ** static ::**   who ();    // PHP waits to resolve this (hence, late)! \n     } \n\n     public   static   function   who ()   { \n         echo   __CLASS__ . \\n ; \n     }  }  class   B   extends   A   { \n     public   static   function   test ()   { \n        self :: findwho (); \n     } \n\n     public   static   function   who ()   { \n         echo   __CLASS__ . \\n ; \n     }  }  B :: test ();     //A  B", 
            "title": "Late static binding"
        }, 
        {
            "location": "/Internet-App-Dev-III/11-classes/#type-hinting", 
            "text": "\"types\" in a method and function parameter list  works for class names, interfaces, callable (which is a callback - function name string - delegate) and array only  --  callback functions -  a lot like delegates \u2013 first class function (function is assigned to a variable)  no types allowed for scalars such as  string  /  int  /  float / etc...", 
            "title": "Type hinting"
        }, 
        {
            "location": "/Internet-App-Dev-III/11-classes/#objects-type-hinting", 
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 ?php  class   MyClass   { \n     public   function   test ( OtherClass   $otherclass )   { \n         echo   $otherclass - getVar (); \n     } \n     public   function   test_array ( array   $input_array )   { \n         print_r ( $input_array ); \n     } \n     public   function   test_interface ( Countable   $count )   { \n         echo   get_class ( $count ); \n     } \n     public   function   test_callable ( callable   $callback ,   $data )   { \n         $callback ( $data ); \n     }  }   \n- removes needs for constant type checking for objects\n- throws a catchable exception\n- won't give you overloaded functions  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29 ?php  // An instance of each class  $myclass   =   new   MyClass ();    //() optional is no params  $otherclass   =   new   OtherClass ();  // Fatal Error: Argument 1 must be an object of class OtherClass  $myclass - test ( hello );  // Fatal Error: Argument 1 must be an instance of OtherClass  $foo   =   new   stdClass ;  $myclass - test ( $foo );  // Fatal Error: Argument 1  must be an instance of OtherClass  $myclass - test ( null );  // Works  $myclass - test ( $otherclass );  // Fatal Error: Argument 1 must be an array  $myclass - test_array ( a string );  // Works: Prints the array  $myclass - test_array (   [ a ,   b ,   c ]   );  // Works: Prints ArrayObject  $myclass - test_interface ( new   ArrayObject (   [ 1 , 2 , 3 ]   ));  // Works: Prints int(1)  $myclass - test_callable ( var_dump ,   1 );", 
            "title": "Objects \u2013 type hinting"
        }, 
        {
            "location": "/Internet-App-Dev-III/11-classes/#type-hinting-not-compatible-with-null", 
            "text": "1\n2\n3\n4\n5\n6\n7\n8 ?php  class   Type   {  }  function   foo ( Type   $t )   {  }  foo ( null );   \n- Results in fatal error\n- Why?  Null  is  not  an object, interface, array or callable\n- Can't use type hinting for anything else (i.e., not for strings, numeric, or null)!\n- Solution: allow null as the default value 1\n2\n3 ?php  function   foo ( Type   $t = null )   {  }", 
            "title": "Type hinting \u2013 not compatible with null"
        }, 
        {
            "location": "/Internet-App-Dev-III/__Outline/", 
            "text": "COURSE OUTLINE \nInternet Application Development III\n\n\n\n\nNumber: 420-524-DW \n\n\nPonderation: \n\n\nCredits: 3\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\nSuccessful completion of all Year 2 420.A0 courses\n\n\n\n\nCo-requisites\n\n\n\n\n\n\n420-517-DW Software Development Project \u2013 Java III\n\n\n\n\n\n\n420-518-DW Mobile Software Development - Android\n\n\n\n\n\n\n420-544-DW Data Communications \n Networking\n\n\n\n\n\n\n\n\nNote\n\n\nYou must pass this course as well as the three co-requisite courses in order to progress to the sixth semester of the Computer Science Technology Program.\n\n\n\n\nDescription\n\n\nThe student will be introduced to the concepts and techniques of\nserver-side Web programming. The student will use PHP, JavaScript, and a\ndatabase to create dynamic Web applications, and Web APIs to respond to\nAJAX queries. In addition to direct PHP programming, the student is\nintroduced to a PHP framework.\n\n\nSTATEMENTS OF COMPETENCE\n\n\n\n\n\n\nUse an object-oriented development approach (016T)\n\n\n\n\n\n\nProduce algorithms (016W)\n\n\n\n\n\n\nOrganize and use data (0170)\n\n\n\n\n\n\nAssure the quality of an application (0177)\n\n\n\n\n\n\nContacting Teachers\n\n\nJaya Nilakantan 3F.22 contact via MIO\n\n\nTeacher's schedule will be posted outside the office by the end of the\nfirst week of classes.\n\n\nCourse Objectives\n\n\nUpon successful completion of the course the student will be able to:\n\n\n\n\n\n\nDescribe the PHP language and environment (016W, 0170)\n\n\n\n\n\n\nUse PHP classes and objects (016T)\n\n\n\n\n\n\nAdd dynamic content to Web pages using PHP script files and embedded\n    \n PHP statements (016T, 016W)\n\n\n\n\n\n\nWrite server-side PHP scripts to generate HTML responses to\n    \n user queries. (016T, 016W)\n\n\n\n\n\n\nWrite PHP programs to perform server-side processing of user input\n    \n from Web pages with forms. (016T, 016W, 0170)\n\n\n\n\n\n\nDevelop Web APIs using PHP and a database (0170)\n\n\n\n\n\n\nDevelop Web applications using PHP, JavaScript, and a\n    \n database (0170)\n\n\n\n\n\n\nUnderstand and prevent web application security risks (0177)\n\n\n\n\n\n\nDevelop and test Web applications using a PHP framework (016T, 0177)\n\n\n\n\n\n\nCourse Methodology\n\n\nThe course will consist of two 1\u00bd-hour lectures and one 3-hour lab\nsession per week. Concepts and techniques will be presented in lectures\nand practical exercises that apply the concepts and techniques will be\ngiven in the lab sessions.\n\n\nRequired readings\n\n\nReadings will be assigned from:\n\n\n\n\n\n\nOfficial PHP documentation at \nwww.php.net\n\n\n\n\n\n\nDocumentation of the PHP framework\n\n\n\n\n\n\nPHP The Right Way \nhttp://www.phptherightway.com\n\n\n\n\n\n\nSurvive the Deep End: PHP Security\n    \nhttp://phpsecurity.readthedocs.io/en/latest\n\n\n\n\n\n\nAssessment of student performance\n\n\nMidterm Examination Duration\n\n\n\n\n1 \n hours Worth: 30% (Week 7 or 8)\n\n\n\n\nFinal Examination Duration\n\n\n\n\n\n\n3 hours Worth: 40% (Exam period)\n\n\n\n\n\n\nAssignments/ProjectsWorth: 30%\n\n\n\n\n\n\nCourse Outline\n\n\n\n\n\n\nConfigure PHP 1\n\n\n\n\n\n\nSet up a development server\n\n\n\n\n\n\nSet up the PHP environment with the php.ini file\n\n\n\n\n\n\n\n\n\n\nDescribe PHP language basics 2\n\n\n\n\n\n\nDescribe the PHP language and programming environment\n\n\n\n\n\n\nDescribe the basic syntax of the PHP language\n\n\n\n\n\n\nUnderstand PHP variable basics (variables, constants, numeric,\n\n\n\n\nstrings), naming rules and conventions\n\n\n\n\n\n\n\n\nUnderstand how PHP and HTML interact\n\n\n\n\n\n\nRecognize PHP control flow constructs: operators, conditionals,\n\n\n\n\nloops\n\n\n\n\n\n\n\n\n\n\n\n\nUse PHP arrays 1\n\n\n\n\n\n\nCreate and use numerically indexed arrays\n\n\n\n\n\n\nCreate and use associative arrays\n\n\n\n\n\n\nCreate and use multidimensional arrays\n\n\n\n\n\n\nUse foreach looping structure\n\n\n\n\n\n\nUse array functions\n\n\n\n\n\n\n\n\n\n\nDevelop PHP programs to receive and process input from HTML forms 3\n\n\n\n\n\n\nReview http protocol\n\n\n\n\n\n\nCreate a one-part form (both HTML and PHP in one file)\n\n\n\n\n\n\nCreate a two-part form (HTML and PHP are separate files)\n\n\n\n\n\n\nRetrieve submitted data from a variety of element types: text boxes,\n\n\n\n\ntext areas, checkboxes, radio buttons, drop-down lists, submit\nbuttons\n\n\n\n\n\n\n\n\nSanitize and validate input at client and server\n\n\n\n\n\n\nPrevent XSS and Cross-site Request Forgery attacks\n\n\n\n\n\n\nRedisplay a form after PHP validation errors (sticky forms)\n\n\n\n\n\n\nUnderstand and implement redirect\n\n\n\n\n\n\n\n\n\n\nCreate reusable code blocks by defining and calling functions 1\n\n\n\n\n\n\nDefine and call user-defined functions with return values\n\n\n\n\n\n\nDescribe the scope of identifiers in PHP\n\n\n\n\n\n\nUse local, global, static and references to variables\n\n\n\n\n\n\nUse call by value and call by reference to pass arguments\n\n\n\n\n\n\nUse the Include and Require statements\n\n\n\n\n\n\n\n\n\n\nUse PHP Classes and Objects 4\n\n\n\n\n\n\nCreate classes with properties, methods, constants\n\n\n\n\n\n\nDefine constructors and destructors\n\n\n\n\n\n\nUnderstand inheritance and polymorphism\n\n\n\n\n\n\nDefine static class members, and describe late static binding\n\n\n\n\n\n\nCompare and contrast PHP with Java and C# in terms of Access\n\n\n\n\nModifiers, Abstract Classes, Interfaces, and Namespaces\n\n\n\n\n\n\n\n\nCompare and clone objects\n\n\n\n\n\n\nPerform exception handling\n\n\n\n\n\n\nUnderstand and use magic methods\n\n\n\n\n\n\n\n\n\n\nAccess and populate a database using PHP 3\n\n\n\n\n\n\nConnect to and query a database with PHP Data Objects (PDO)\n\n\n\n\n\n\nPerform error handling\n\n\n\n\n\n\nPrevent SQL injection\n\n\n\n\n\n\nuse cURL and DOM traversal to scrape web pages and populate a\n\n\n\n\ndatabase\n\n\n\n\n\n\n\n\n\n\n\n\nMidterm Exam 1\n\n\n\n\n\n\nUnderstand and use state maintenance techniques 3\n\n\n\n\n\n\nExplore output buffering and browser caching\n\n\n\n\n\n\nMaintain state using query string\n\n\n\n\n\n\nImplement simple pagination\n\n\n\n\n\n\nManage cookies with PHP: set, access, and destroy a cookie\n\n\n\n\n\n\nUse sessions: start a session, end a session, manage session\n\n\n\n\nsecurity\n\n\n\n\n\n\n\n\nUnderstand and implement best practices in authentication\n\n\n\n\n\n\n\n\n\n\nUsing AJAX 2\n\n\n\n\n\n\nReview Javascript and JQuery client-side implementation of AJAX\n\n\n\n\n\n\nUnderstand the server-side techniques and principles used in AJAX\n\n\n\n\n\n\nCompose XML and JSON documents\n\n\n\n\n\n\nRead and traverse XML and JSON documents\n\n\n\n\n\n\n\n\n\n\nExplore web security considerations 4\n\n\n\n\n\n\nDescribe XSS, CSRF, and Session Fixation attacks\n\n\n\n\n\n\nImplement basic security measures in PHP code\n\n\n\n\n\n\n\n\n\n\nUse a PHP framework for web development 5\n\n\n\n\n\n\nUnderstand the basics of the MVC pattern\n\n\n\n\n\n\nDescribe URL routing in an MVC application\n\n\n\n\n\n\nDescribe the modular directory layout\n\n\n\n\n\n\nUnderstand purpose of a template engine, and implement views\n\n\n\n\n\n\nUnderstand and implement database migrations\n\n\n\n\n\n\nImplement models and controllers\n\n\n\n\n\n\nUnderstand the authentication mechanisms provided by the framework\n\n\n\n\n\n\nUse the framework to implement web pages and web APIs\n\n\n\n\n\n\n\n\n\n\nProgram and course rules and regulations\n\n\n\n\nWarning\n\n\nFor 420 career program courses, students must receive at least 50% on the assignment component and at least 60% on the examination component in order to obtain a passing grade for the course. Failure to do so will result in a maximum grade of 50 (the lower of 50 or the grade earned). For the purpose of this rule, quizzes are considered exams.\n\n\n\n\nAssignments are due at the due date specified by the instructor.\nAssignments received after this time are late. Assignments will not be\naccepted after due date set by instructor. In exceptional circumstances,\nsuch as illness, etc. labs submitted late will be graded provided that\nthe student has received an extension from the instructor in advance.\n\n\nEach student must submit their own individual answers to assignments,\nand shared solutions are not acceptable. Students must protect their\nwork from being easily copied by others by introducing uniqueness into\ntheir work in the choice of images used, the display styles used in the\npresentation of documents, the originality of the written descriptive\npassages, and by placing digital signatures on their original images.\n\n\nStudents are reminded that they are responsible for all material\npresented in the lecture and during the lab, and are expected to obtain\nmaterial they have missed.\n\n\nStudents must follow exactly the instructions in the lab exercises about\nhow and where to store all computer files in order for their work to be\naccepted and properly evaluated.\n\n\nDAWSON COLLEGE COMPUTER SCIENCE DEPARTMENT  POLICIES\n\n\n1. ACADEMIC INTEGRITY\n\n\nThe Computer Science Department adheres to the Dawson College Academic\nConduct policy. Students have an obligation to inform themselves of all\naspects of this policy. According to ISEP, the teacher is required to\nreport to the Sector Dean all cases of cheating and plagiarism affecting\na student\u2019s grade. (ISEP Section V-C) Students may appeal any decision\nof the teacher regarding cheating and plagiarism according to the\nmethods established by the College. The penalty for cheating or\nplagiarism may range from a zero on the work to a failure in the course.\n\n\n2. ATTENDANCE AND LATENESS\n\n\nStudents are responsible for all material covered in classes and labs,\nwhether or not they are present. Students have an obligation to arrive\non time and to remain for the duration of scheduled classes, labs and\nactivities. Students who disregard this obligation may be asked to leave\nthe class, lab or activity. Students should refer to the Institutional\nStudent Evaluation Policy\n\n\n(ISEP section IV-C) regarding attendance.\n\n\n3. RELIGIOUS HOLIDAY OBSERVANCE\n\n\nClass period(s) may be cancelled in order that the teacher can observe\nreligious holidays. Any material missed as a result, will be made up\nduring labs, class periods and alternate tutorial sessions.\n\n\nStudents, who intend to observe religious holidays, must inform their\nteachers in writing as prescribed in the ISEP Policy on Religious\nObservances (ISEP Section IV-D). Students absent from classes because of\nobservance of religious holidays will not be penalized. It must be\nemphasized, however, that this College policy should not be interpreted\nto mean that a student can receive credit for work not performed. It is\nthe student\u2019s responsibility to fulfill the requirements of the\nalternative arrangement.\n\n\n4. SOFTWARE\n\n\nThe Computer Science Department forbids the use of the computer labs it\nuses to make any copies of any software without the explicit\nauthorization of the Department. Apart from any legal action that might\narise from such unauthorized copying, the Computer Science Department\nreserves the right to discipline any student involved in such activity.\n\n\nStudents who borrow software from the College and fail to return it will\nbe placed on the defaulter list and be subject to the appropriate\npenalties.\n\n\nViruses are programs that attach themselves to a computer system without\nthe permission of those to whom the system belongs. They are\ndeliberately written to be, at worst, harmful (e.g. destroying the\ncontents of disks) and, at best, bothersome (e.g. disturbing the image\nshown on the screen). They can cause serious losses of time and effort\nfor students, staff and faculty. Any student involved in the deliberate\nspreading of viruses is subject to the most severe penalties prescribed\nby College regulations, apart from any legal action that might arise\nfrom such acts.\n\n\n5. LITERACY\n\n\nThe Computer Science Department recognizes that literacy in all its\nforms (read, written, spoken) is essential to our students in their\ncareers.\n\n\nTeachers may choose to incorporate a literacy component into the marking\nscheme for any piece of work. Teachers may use their discretion to\ninsist that any piece of work submitted for credit is revised by the\nstudent if it is unsatisfactory with regard to literacy.\n\n\nTeachers will inform all students in their courses of this policy at the\nbeginning of each semester either by including it in the course\ndescription or otherwise.\n\n\n6. CELL PHONES\n\n\nThe use of cell phones in all Computer Science lectures, labs and exams\nis prohibited.\n\n\n7. PORTABLE COMPUTERS\n\n\nThe use of portable computers in all Computer Science lectures for\npurposes other than note-taking is prohibited.\n\n\n8. STUDENT CONDUCT\n\n\nEveryone has the right to a safe and non-violent environment. Students\nare obliged to conduct themselves as stated in the Student Code of\nConduct and in the ISEP section on the roles and responsibilities of\nstudents. (ISEP section II-D)\n\n\n9. PROFESSIONAL CONDUCT POLICY\n\n\nStudents who are enrolled in the Computer Science Technology careers\nprogram must conduct themselves according to the Professional Conduct\nPolicy as described in the Program Handbook\n\n\n10. INTENSIVE COURSE CONFLICTS\n\n\nIf a student is attending an intensive course, the student must inform\nthe teacher, within the first two weeks of class, of the specific dates\nof any anticipated absences.\n\n\n11. ISEP\n\n\nThe Institutional Student Evaluation Policy (ISEP) is designed to\npromote equitable and effective evaluation of student learning and is\ntherefore a crucial policy to read and understand. The policy describes\nthe rights and obligations of students, faculty, departments, programs,\nand the College administration with regard to evaluation in all your\ncourses, including grade reviews and resolution of academic grievance.\nThe ISEP is available on the Dawson website.", 
            "title": "  Outline"
        }, 
        {
            "location": "/Internet-App-Dev-III/__Outline/#course-outline-internet-application-development-iii", 
            "text": "Number: 420-524-DW   Ponderation:   Credits: 3", 
            "title": "COURSE OUTLINE Internet Application Development III"
        }, 
        {
            "location": "/Internet-App-Dev-III/__Outline/#prerequisites", 
            "text": "Successful completion of all Year 2 420.A0 courses", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/Internet-App-Dev-III/__Outline/#co-requisites", 
            "text": "420-517-DW Software Development Project \u2013 Java III    420-518-DW Mobile Software Development - Android    420-544-DW Data Communications   Networking     Note  You must pass this course as well as the three co-requisite courses in order to progress to the sixth semester of the Computer Science Technology Program.", 
            "title": "Co-requisites"
        }, 
        {
            "location": "/Internet-App-Dev-III/__Outline/#description", 
            "text": "The student will be introduced to the concepts and techniques of\nserver-side Web programming. The student will use PHP, JavaScript, and a\ndatabase to create dynamic Web applications, and Web APIs to respond to\nAJAX queries. In addition to direct PHP programming, the student is\nintroduced to a PHP framework.", 
            "title": "Description"
        }, 
        {
            "location": "/Internet-App-Dev-III/__Outline/#statements-of-competence", 
            "text": "Use an object-oriented development approach (016T)    Produce algorithms (016W)    Organize and use data (0170)    Assure the quality of an application (0177)", 
            "title": "STATEMENTS OF COMPETENCE"
        }, 
        {
            "location": "/Internet-App-Dev-III/__Outline/#contacting-teachers", 
            "text": "Jaya Nilakantan 3F.22 contact via MIO  Teacher's schedule will be posted outside the office by the end of the\nfirst week of classes.", 
            "title": "Contacting Teachers"
        }, 
        {
            "location": "/Internet-App-Dev-III/__Outline/#course-objectives", 
            "text": "Upon successful completion of the course the student will be able to:    Describe the PHP language and environment (016W, 0170)    Use PHP classes and objects (016T)    Add dynamic content to Web pages using PHP script files and embedded\n      PHP statements (016T, 016W)    Write server-side PHP scripts to generate HTML responses to\n      user queries. (016T, 016W)    Write PHP programs to perform server-side processing of user input\n      from Web pages with forms. (016T, 016W, 0170)    Develop Web APIs using PHP and a database (0170)    Develop Web applications using PHP, JavaScript, and a\n      database (0170)    Understand and prevent web application security risks (0177)    Develop and test Web applications using a PHP framework (016T, 0177)", 
            "title": "Course Objectives"
        }, 
        {
            "location": "/Internet-App-Dev-III/__Outline/#course-methodology", 
            "text": "The course will consist of two 1\u00bd-hour lectures and one 3-hour lab\nsession per week. Concepts and techniques will be presented in lectures\nand practical exercises that apply the concepts and techniques will be\ngiven in the lab sessions.", 
            "title": "Course Methodology"
        }, 
        {
            "location": "/Internet-App-Dev-III/__Outline/#required-readings", 
            "text": "Readings will be assigned from:    Official PHP documentation at  www.php.net    Documentation of the PHP framework    PHP The Right Way  http://www.phptherightway.com    Survive the Deep End: PHP Security\n     http://phpsecurity.readthedocs.io/en/latest", 
            "title": "Required readings"
        }, 
        {
            "location": "/Internet-App-Dev-III/__Outline/#assessment-of-student-performance", 
            "text": "", 
            "title": "Assessment of student performance"
        }, 
        {
            "location": "/Internet-App-Dev-III/__Outline/#midterm-examination-duration", 
            "text": "1   hours Worth: 30% (Week 7 or 8)", 
            "title": "Midterm Examination Duration"
        }, 
        {
            "location": "/Internet-App-Dev-III/__Outline/#final-examination-duration", 
            "text": "3 hours Worth: 40% (Exam period)    Assignments/ProjectsWorth: 30%", 
            "title": "Final Examination Duration"
        }, 
        {
            "location": "/Internet-App-Dev-III/__Outline/#course-outline", 
            "text": "Configure PHP 1    Set up a development server    Set up the PHP environment with the php.ini file      Describe PHP language basics 2    Describe the PHP language and programming environment    Describe the basic syntax of the PHP language    Understand PHP variable basics (variables, constants, numeric,   strings), naming rules and conventions     Understand how PHP and HTML interact    Recognize PHP control flow constructs: operators, conditionals,   loops       Use PHP arrays 1    Create and use numerically indexed arrays    Create and use associative arrays    Create and use multidimensional arrays    Use foreach looping structure    Use array functions      Develop PHP programs to receive and process input from HTML forms 3    Review http protocol    Create a one-part form (both HTML and PHP in one file)    Create a two-part form (HTML and PHP are separate files)    Retrieve submitted data from a variety of element types: text boxes,   text areas, checkboxes, radio buttons, drop-down lists, submit\nbuttons     Sanitize and validate input at client and server    Prevent XSS and Cross-site Request Forgery attacks    Redisplay a form after PHP validation errors (sticky forms)    Understand and implement redirect      Create reusable code blocks by defining and calling functions 1    Define and call user-defined functions with return values    Describe the scope of identifiers in PHP    Use local, global, static and references to variables    Use call by value and call by reference to pass arguments    Use the Include and Require statements      Use PHP Classes and Objects 4    Create classes with properties, methods, constants    Define constructors and destructors    Understand inheritance and polymorphism    Define static class members, and describe late static binding    Compare and contrast PHP with Java and C# in terms of Access   Modifiers, Abstract Classes, Interfaces, and Namespaces     Compare and clone objects    Perform exception handling    Understand and use magic methods      Access and populate a database using PHP 3    Connect to and query a database with PHP Data Objects (PDO)    Perform error handling    Prevent SQL injection    use cURL and DOM traversal to scrape web pages and populate a   database       Midterm Exam 1    Understand and use state maintenance techniques 3    Explore output buffering and browser caching    Maintain state using query string    Implement simple pagination    Manage cookies with PHP: set, access, and destroy a cookie    Use sessions: start a session, end a session, manage session   security     Understand and implement best practices in authentication      Using AJAX 2    Review Javascript and JQuery client-side implementation of AJAX    Understand the server-side techniques and principles used in AJAX    Compose XML and JSON documents    Read and traverse XML and JSON documents      Explore web security considerations 4    Describe XSS, CSRF, and Session Fixation attacks    Implement basic security measures in PHP code      Use a PHP framework for web development 5    Understand the basics of the MVC pattern    Describe URL routing in an MVC application    Describe the modular directory layout    Understand purpose of a template engine, and implement views    Understand and implement database migrations    Implement models and controllers    Understand the authentication mechanisms provided by the framework    Use the framework to implement web pages and web APIs", 
            "title": "Course Outline"
        }, 
        {
            "location": "/Internet-App-Dev-III/__Outline/#program-and-course-rules-and-regulations", 
            "text": "Warning  For 420 career program courses, students must receive at least 50% on the assignment component and at least 60% on the examination component in order to obtain a passing grade for the course. Failure to do so will result in a maximum grade of 50 (the lower of 50 or the grade earned). For the purpose of this rule, quizzes are considered exams.   Assignments are due at the due date specified by the instructor.\nAssignments received after this time are late. Assignments will not be\naccepted after due date set by instructor. In exceptional circumstances,\nsuch as illness, etc. labs submitted late will be graded provided that\nthe student has received an extension from the instructor in advance.  Each student must submit their own individual answers to assignments,\nand shared solutions are not acceptable. Students must protect their\nwork from being easily copied by others by introducing uniqueness into\ntheir work in the choice of images used, the display styles used in the\npresentation of documents, the originality of the written descriptive\npassages, and by placing digital signatures on their original images.  Students are reminded that they are responsible for all material\npresented in the lecture and during the lab, and are expected to obtain\nmaterial they have missed.  Students must follow exactly the instructions in the lab exercises about\nhow and where to store all computer files in order for their work to be\naccepted and properly evaluated.", 
            "title": "Program and course rules and regulations"
        }, 
        {
            "location": "/Internet-App-Dev-III/__Outline/#dawson-college-computer-science-department-policies", 
            "text": "", 
            "title": "DAWSON COLLEGE COMPUTER SCIENCE DEPARTMENT  POLICIES"
        }, 
        {
            "location": "/Internet-App-Dev-III/__Outline/#1-academic-integrity", 
            "text": "The Computer Science Department adheres to the Dawson College Academic\nConduct policy. Students have an obligation to inform themselves of all\naspects of this policy. According to ISEP, the teacher is required to\nreport to the Sector Dean all cases of cheating and plagiarism affecting\na student\u2019s grade. (ISEP Section V-C) Students may appeal any decision\nof the teacher regarding cheating and plagiarism according to the\nmethods established by the College. The penalty for cheating or\nplagiarism may range from a zero on the work to a failure in the course.", 
            "title": "1. ACADEMIC INTEGRITY"
        }, 
        {
            "location": "/Internet-App-Dev-III/__Outline/#2-attendance-and-lateness", 
            "text": "Students are responsible for all material covered in classes and labs,\nwhether or not they are present. Students have an obligation to arrive\non time and to remain for the duration of scheduled classes, labs and\nactivities. Students who disregard this obligation may be asked to leave\nthe class, lab or activity. Students should refer to the Institutional\nStudent Evaluation Policy  (ISEP section IV-C) regarding attendance.", 
            "title": "2. ATTENDANCE AND LATENESS"
        }, 
        {
            "location": "/Internet-App-Dev-III/__Outline/#3-religious-holiday-observance", 
            "text": "Class period(s) may be cancelled in order that the teacher can observe\nreligious holidays. Any material missed as a result, will be made up\nduring labs, class periods and alternate tutorial sessions.  Students, who intend to observe religious holidays, must inform their\nteachers in writing as prescribed in the ISEP Policy on Religious\nObservances (ISEP Section IV-D). Students absent from classes because of\nobservance of religious holidays will not be penalized. It must be\nemphasized, however, that this College policy should not be interpreted\nto mean that a student can receive credit for work not performed. It is\nthe student\u2019s responsibility to fulfill the requirements of the\nalternative arrangement.", 
            "title": "3. RELIGIOUS HOLIDAY OBSERVANCE"
        }, 
        {
            "location": "/Internet-App-Dev-III/__Outline/#4-software", 
            "text": "The Computer Science Department forbids the use of the computer labs it\nuses to make any copies of any software without the explicit\nauthorization of the Department. Apart from any legal action that might\narise from such unauthorized copying, the Computer Science Department\nreserves the right to discipline any student involved in such activity.  Students who borrow software from the College and fail to return it will\nbe placed on the defaulter list and be subject to the appropriate\npenalties.  Viruses are programs that attach themselves to a computer system without\nthe permission of those to whom the system belongs. They are\ndeliberately written to be, at worst, harmful (e.g. destroying the\ncontents of disks) and, at best, bothersome (e.g. disturbing the image\nshown on the screen). They can cause serious losses of time and effort\nfor students, staff and faculty. Any student involved in the deliberate\nspreading of viruses is subject to the most severe penalties prescribed\nby College regulations, apart from any legal action that might arise\nfrom such acts.", 
            "title": "4. SOFTWARE"
        }, 
        {
            "location": "/Internet-App-Dev-III/__Outline/#5-literacy", 
            "text": "The Computer Science Department recognizes that literacy in all its\nforms (read, written, spoken) is essential to our students in their\ncareers.  Teachers may choose to incorporate a literacy component into the marking\nscheme for any piece of work. Teachers may use their discretion to\ninsist that any piece of work submitted for credit is revised by the\nstudent if it is unsatisfactory with regard to literacy.  Teachers will inform all students in their courses of this policy at the\nbeginning of each semester either by including it in the course\ndescription or otherwise.", 
            "title": "5. LITERACY"
        }, 
        {
            "location": "/Internet-App-Dev-III/__Outline/#6-cell-phones", 
            "text": "The use of cell phones in all Computer Science lectures, labs and exams\nis prohibited.", 
            "title": "6. CELL PHONES"
        }, 
        {
            "location": "/Internet-App-Dev-III/__Outline/#7-portable-computers", 
            "text": "The use of portable computers in all Computer Science lectures for\npurposes other than note-taking is prohibited.", 
            "title": "7. PORTABLE COMPUTERS"
        }, 
        {
            "location": "/Internet-App-Dev-III/__Outline/#8-student-conduct", 
            "text": "Everyone has the right to a safe and non-violent environment. Students\nare obliged to conduct themselves as stated in the Student Code of\nConduct and in the ISEP section on the roles and responsibilities of\nstudents. (ISEP section II-D)", 
            "title": "8. STUDENT CONDUCT"
        }, 
        {
            "location": "/Internet-App-Dev-III/__Outline/#9-professional-conduct-policy", 
            "text": "Students who are enrolled in the Computer Science Technology careers\nprogram must conduct themselves according to the Professional Conduct\nPolicy as described in the Program Handbook", 
            "title": "9. PROFESSIONAL CONDUCT POLICY"
        }, 
        {
            "location": "/Internet-App-Dev-III/__Outline/#10-intensive-course-conflicts", 
            "text": "If a student is attending an intensive course, the student must inform\nthe teacher, within the first two weeks of class, of the specific dates\nof any anticipated absences.", 
            "title": "10. INTENSIVE COURSE CONFLICTS"
        }, 
        {
            "location": "/Internet-App-Dev-III/__Outline/#11-isep", 
            "text": "The Institutional Student Evaluation Policy (ISEP) is designed to\npromote equitable and effective evaluation of student learning and is\ntherefore a crucial policy to read and understand. The policy describes\nthe rights and obligations of students, faculty, departments, programs,\nand the College administration with regard to evaluation in all your\ncourses, including grade reviews and resolution of academic grievance.\nThe ISEP is available on the Dawson website.", 
            "title": "11. ISEP"
        }, 
        {
            "location": "/Internet-App-Dev-III/midterm_prep/", 
            "text": "Date\n\n\n\n\nOctober 6, 8:30\n\n\n\n\nMaterial\n\n\n\n\nScraping\n\n\nGET/POST irl response html retrieve info\n\n\nethical condition\n\n\nUse WebAPI\n\n\nurl - http request\n\n\nGET\n\n\nPOST\n\n\nPUT\n\n\n\n\n\n\nresponse \u2014\n json,xml", 
            "title": "Midterm prep"
        }, 
        {
            "location": "/Internet-App-Dev-III/midterm_prep/#date", 
            "text": "October 6, 8:30", 
            "title": "Date"
        }, 
        {
            "location": "/Internet-App-Dev-III/midterm_prep/#material", 
            "text": "Scraping  GET/POST irl response html retrieve info  ethical condition  Use WebAPI  url - http request  GET  POST  PUT    response \u2014  json,xml", 
            "title": "Material"
        }, 
        {
            "location": "/Internet-App-Dev-III/assignments/dont-eat-that/", 
            "text": "Montreal Don't Eat Here Web App\n\n\nUsing Open Data and Web API (teams of 2)\n\n\nIntroduction\n\n\nOpen Data\n is a movement whereby data collected by various sources are made public. Government entities, in particular, are make more data openly available in an effort to increase transparency. Data can be made available in a variety of formats, ranging from old-fashioned spreadsheets to xml to json.\n\n\nA \nWeb API\n is a programming interfaces available through the web, typically using http request-responses, which return data as either xml or json.\n\n\nAs you can see, there is a lot of similarity between scraping an Open Data page and deciphering the response to a web API.\n\n\nThis project has two parts: in the first part, we will write a PHP console application which reads open data in XML format from the City of Montreal, by programmatically retrieving the page and parsing the xml using simple DOM parsing. Based on fields in the open data, we will then use the Google Maps Geocoding API to query the address and get the associated latitude and longitude. We will store all the data in a database.\n\n\nIn the second part, we write a web application that: gets the user's location using HTML5 Geolocation services. With the location, it finds the bad restaurants within a 10 km radius, and returns a page with a Google Map with markers on the restaurants to avoid.\n\n\nYou can write your code in \nPHPCode/badresto\n, we have a URL \nbadresto.app\n that you can use for testing on Vagrant.\n\n\nUsing Heroku\n\n\nFollow these steps in the very start of the project, even if you continue with Vagrant as a development environment.\n\n\n\n\nOpen a free Heroku account:\n\n\nFill in the form at \nhttps://signup.heroku.com/www-pricing-top\n\n\nChoose PHP as the primary development language\n\n\nWait for the confirmation e-mail (check you junk e-mail)\n\n\n\n\nSign in with a password\n\n\n\n\n\n\nvagrant\n up and \nvagrant ssh\n\n\n\n\nDownload and install the heroku command-line interface. \nUnfortunately in the labs, you need to do this everytime\n\n\n\n\nRun this from your terminal.\n\n\n1\nwget -qO- https://cli-assets.heroku.com/install-ubuntu.sh | sh\n\n\n\n\n\n\nVerify the install\n\n\n1\nheroku --version\n\n\n\n\n\n\nLogin to Heroku\n\n\n\n\n\n\nheroku login\n\n\nUse the email and password you used earlier\n2. Go to \nCode/badresto\n\n\nThis folder presumably holds both your console application to prepare the database, as well as your web application. The console app can be run through vagrant, however the web application must be deployed on Heroku for \"production\"\n\n\n\n\n\n\nSet up repo\n\n\n\n\n\n\ninitialize a git repo\n\n\ngit init .\n\n\n\n\n\n\nCreate a \nProcfile\n. A Procfile indicates what processes your application will require. Your Procfile will have a single line to indicate that it is a web process.\n\n\nweb: vendor/bin/heroku-php-nginx\n\n\n\n\n\n\nA shortcut to create the file:\n\n\necho web: vendor/bin/heroku-php-nginx \n Procfile\n\n\nCreate the Heroku application\n\n\n\n\nWhen you create an app, a git remote named \nheroku\n is associated with your local git repo. Heroku create generates a random name for the app, or you can pass a parameter to specify your own name\n\n\n\n\n\n\nNote\n\n\nThe URL of your application, as well as the git URL. You can always see these at dashboard.heroku.com if you log in.\n\n\n\n\nCommit and push your changes\n\n\n\n\nCommit and push your changes (note: you may want to set your name and email first through git config)\n\n\n\n\n1\n2\n3\n4\n5\n$ git add .\n\n$ git commit \u2013m \nAdd Procfile\n\n\n$ git push heroku master\n\n\n\n\n\n\nAdd a database\n\n\n1\nheroku addons:create heroku-postgresql:hobby-dev\n\n\n\n\n\nNote the name of your store.\n\n\nAlternatively, you can do this through the heroku.com web app:\n\n\nElements \u2013 Addons \u2013 Heroku Postgres addons \u2013 install\n\n\nConnecting to database\n\n\nTo connect to your Heroku Postgres database from Vagrant console:\n\n1\nheroku pg:psql\n\n\n\n\n\nTo connect from your web application: To find the database url:\n\n1\nheroku config\n\n\n\n\nThe \nDATABASE_URL\n consists of:\n\n1\nuser:password@host:port/databasename\n\n\n\n\nOr from the data.heroku.com web \napplication \u2013 settings \u2013 view credentials\n\n\nUse this as the dsn (replace the database name, user and password and change the host server)\n\n1\n2\n3\n4\n5\n6\n7\n?php\n\n\n$dsn\n \n=\npgsql:dbname=databasename;host=blahblh.amazonaws.com;port=5432;sslmode=require\n;\n\n\n\n$user\n=\nuser\n;\n\n\n\n$password\n=\npwd\n;\n\n\n?\n\n\n\n\n\n\nCode your Application\n\n\nRegularly commit and push your changes\n\n1\n2\n3\ngit add .\ngit commit \u2013m \nAdd Procfile and .gitignore\n\ngit push heroku master\n\n\n\n\nI recommend that you write your console script to fill the database on Vagrant. Initially, fill the Homestead PostGres table, and once everything is tested, change the datasource to point to heroku and run the script from Vagrant.\n\n\nSee your web application\n\n\nTo see your web application once deployed:\n\n\nhttps://jayabadresto.herokuapp.com\n\n\nProject Steps\n\n\nStep 1 \u2013 Populate the database\n\n\nThere are many websites which post restaurant reviews \u2013 Yelp, Google, Zomato come to mind. But how many websites let you know if a restaurant or grocery store has 1 or more offenses with the food safety inspectors? The City of Montreal \npublishes\n this information (only available in French). It is hardly very usable when you are trying to decide whether or not to try a restaurant.\n\n\nMontreal has made the data available through their \nopen data portal\n. As always, one should always ensure that any usage of material found on a website is legal and ethical. The portal has a \nlicence\n page which details the conditions under which we can use the data: we must indicate that the source of the data is the city. We will also consult the \nrobots.txt\n file. The \nrobots.txt\n file disallow robots (such as the one we are coding) from accessing certain folders, but not the one that we want. It also asks for a 10 second crawl delay; this is inconsequential to us since all our data is on the same page.\n\n\nWrite a PHP command-line script (run from Vagrant VM command line, NOT a web application through the browser) that:\n\n\n\n\nretrieves the open data XML page\n\n\nextracts the following information: proprietaire (owner), categorie (category), etablissement (establishment), address and city-postal code.\n\n\nyou don't have to use \ncURL\n to get the web pages. Since we a retrieving a single xml page with a \nGET\n request, our code can use a simple file function:\n\n1\n2\n3\n4\n5\n6\n7\n?php\n\n\n$results\n \n=\n \nfile_get_contents\n(\n$url\n);\n\n\n\n$xml\n \n=\n \nnew\n \n\\DOMDocument\n();\n//backslash to indicate global namespace\n\n\n\n@\n$xml\n-\nloadXML\n(\n$results\n);\n\n\n?\n\n\n\n\n\nThe next step is to determine the latitude and longitude from the address, city and postal code. We will use Google's old geocoding service (that does not require an API key), you make a request to \nhttp://maps.google.com/maps/api/geocode/xml?address=\n \naddress\n \nsensor=false\n\n\n\n\nand Google returns an XML document with information about that address. You will notice that the important XML elements are:\n\n\nstatus\n - indicates the status of the geocoding request.\n\n\nresult\n - there is one \nresult\n element for each possible address match. More than one result means that the address was not specific enough (e.g., search for Springfield, you will get 8 results)\n\n\ngeometry\n - provides geometry details about the address match, including the \nlocation\n with \nlatitude\n and \nlongitude\n pairs.\n\n\nSince you will make multiple requests to the API (one for each offender), make sure that you \nadd a sleep(1) for a 1 second sleep between requests\n. Once again, you can use \nfile_get_contents\n instead of \ncURL\n. \nMake sure you urlencode the address value in the querystring!!!\n\n\nStore the latitude and longitude as well as all other pertinent information of the offenders in the database. \nMake sure that you store the latitude and longitude as a numeric (float) in the database table.\n\n\n\n\nWarning\n\n\nA few locations have more than one \nGeometry\n element; if that is the case, just take the lat and lng of the first one. You may also find that Google occasionally returns an \nhttp 500 Internal Server Error\n.\n\n\n\n\nThis program will run from Vagrant and populate the database. Initially, populate the Postgres database on Vagrant. You probably want to make sure you can get the longitude and latitude for \none\n establishment before looping through them all \u2013 there are over 1000 establishments so your script will run for a while! \nMake sure that every time you run the script, you drop and recreate the table to avoid duplicates.\n\n\nOnce you are satisfied, change your PDO connection variables to refer to the Heroku database.\n\n\nMake sure that you modularize for console application with either functions or classes. Store your PDO connection variables in a separate file that you require.\n\n\nStep 2 - Web Application\n\n\n\n\nWarning\n\n\nThis part of the project is slightly hacky since we haven't covered more advanced topics yet. You may want to rewrite this part at the end of the semester before you make it available in a portfolio.\n\n\n\n\nOnce the database is populated, provide a simple web application that works as follows:\n\n\nThe home page ( \nindex.php\n ) returns a page that asks the user to accept the location. The page contains html5 geolocation javascript script that submit a hidden form with latitude and longitude if available.\n\n\nThe JS \ngeolocation API\n is used to:\n\n\n\n\nDetermine if the browser supports geolocation\n\n\nGets the current position coordinates (latitude and longitude, as well as things like accuracy, altitude, etc\u2026) if possible\n\n\nIf not possible, determines if this is due to the users denying permission for geolocation, position unavailable, request timeout, or any other error.\n\n\n\n\nAll of the JS API calls are asynchronous: you have to provide the callback function for success/error in retrieving the location. A callback function is similar to an event handler, the function is invoked when location is determined. Here is some HTML and JS code for your consideration (hackiness \u2013 part1, would be better with Ajax).\n\n\n1\n2\n3\n4\n5\n6\n7\n!-- Geolocation --\n     \n\nform\n \naction\n=\ngeo.php\n \nmethod\n=\nPOST\n \nid\n=\nhiddenForm\n\n\n!-- all the hidden fields --\n         \n    \ninput\n \ntype\n=\nhidden\n \nname\n=\nlatitude\n/\n\n    \ninput\n \ntype\n=\nhidden\n \nname\n=\nlongitude\n/\n\n    \ninput\n \ntype\n=\nhidden\n \nname\n=\nerror\n/\n     \n\n/\nform\n\n\n\n\n\n\n\nNotice that the html has a form with id hiddenForm, and 3 hidden fields.\n\n\nThe JS script will check if the browser supports geolocation, request the location, and if it is accurate, fill in the form elements and submit the form. If there is an error, only the error input is filled before the form is submitted.\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\nwindow\n.\nonload\n=\ninit\n;\n\n\n\nfunction\n \ninit\n()\n \n{\n\n    \ngetLocation\n();\n\n\n}\n\n\n\nfunction\n \ngetLocation\n()\n \n{\n\n    \nif\n \n(\nnavigator\n.\ngeolocation\n)\n \n{\n  \n//geolocation is supported by browser\n\n         \n//provide two callbacks, for success or error\n\n        \nnavigator\n.\ngeolocation\n.\ngetCurrentPosition\n(\ngetPosition\n,\n \ngetError\n);\n\n    \n}\n \nelse\n \n{\n   \n//geolocation is not supported by browser\n\n        \ntreatError\n();\n\n    \n}\n\n\n}\n\n\n\nfunction\n \ngetPosition\n(\nposition\n)\n \n{\n\n    \n//set coordinates in hidden fields and submit\n\n    \nif\n \n(\nposition\n.\ncoords\n.\naccuracy\n \n \n10000\n)\n \n{\n \n        \n//location is not accurate with 10 km, large error is possible on desktops\n\n        \ntreatError\n();\n\n    \n}\n \nelse\n \n{\n\n        \ndocument\n.\nforms\n[\nhiddenForm\n].\nelements\n[\nlatitude\n].\nvalue\n \n=\n \nposition\n.\ncoords\n.\nlatitude\n;\n\n        \ndocument\n.\nforms\n[\nhiddenForm\n].\nelements\n[\nlongitude\n].\nvalue\n \n=\n \nposition\n.\ncoords\n.\nlongitude\n;\n\n\n        \n//submit form with geolocation info \n\n        \ndocument\n.\nforms\n[\nhiddenForm\n].\nsubmit\n();\n \n    \n}\n \n\n}\n\n\n\nfunction\n \ngetError\n(\nerror\n)\n \n{\n   \n//geolocation was not successful\n\n    \ntreatError\n();\n\n\n}\n\n\n\nfunction\n \ntreatError\n()\n \n{\n   \n//geolocation was not successful\n\n    \ndocument\n.\nforms\n[\nhiddenForm\n].\nelements\n[\nerror\n].\nvalue\n \n=\n \n1\n;\n\n\n   \n//submit form with error \n\n   \ndocument\n.\nforms\n[\nhiddenForm\n].\nsubmit\n();\n \n \n}\n\n\n\n\n\n\nThe Javascript provided basically sets the form hidden input fields and submits the form to geo.php. (feel free to change the name)\n\n\ngeo.php\n must:\n\n\n\n\nValidate that access is only through a POST request, redirect to index.php if not\n\n\nCheck if there was an error, if so display a message indicating that the service is not available\n\n\nIf both latitude and longitude are available:\n\n\nFind the bad establishments within a 25 km radius\n\n\nDisplay the restaurants in a Google map\n\n\n\n\nIn order to find the closest restaurants, we must either use a database that support geo-spatial types, or use the \nHaversine\n formula. The SQL query is a little complex, so here is some \nhelp\nfrom StackOverflow! If you use this code, please include a comment providing attribution to the source. NOTE: since you are selecting more than 1 column, you will need a GROUP BY clause before the HAVING expression; group by all the columns chosen. You may also want to MIMIT to the top 10 closest restaurants.\n\n\nIf no establishment is within a 10 km radius, display a message saying that the user can eat anywhere within 10 km! Otherwise, you will display a map with markers.\n\n\nIn order to display the map and the markers, we are actually going to write the javascript through PHP.\n\n\n\n\nWarning\n\n\nHackiness part 2, would be better to use Ajax here!\n\n\n\n\nGet Google Maps API key\n\n\nFirst, you must get a Google Maps Javascript API key from \nhttps://developers.google.com/maps/documentation/javascript/adding-a-google-map\n , and click on GET A KEY.\n\n\n\n\nNote\n\n\nStore the API Key carefully, in a safe place.\n\n\n\n\nCreate a simple map\n\n\nNext, look at the Javascript code in the tutorial page that is used to create a simple map: you can open it in JSFiddle to play around to understand this code. The center is the lat and lng, in your application, this will be the user's location. Zoom indicates the zoom level \u2013 4 is too far, you probably want something like 15 (streets). Markers are given a position (lat and lng); they can also have a title (tooltip that shows upon hovering).\n\n\nSo in your script, you will set the JS variables through PHP code. Pseudo-code:\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\nscript\n\n    \nfunction\n \ninitMap\n()\n \n{\n\n        \n?\nphp\n\n        \necho\n \nvar user = {lat: $userLat , lng: $userLng }; \n;\n\n    \n?\n\n        \nvar\n \nmap\n \n=\n \nnew\n \ngoogle\n.\nmaps\n.\nMap\n(\ndocument\n.\ngetElementById\n(\nmap\n),\n \n{\n\u00a0\u00a0\u00a0\n            \nzoom\n:\n \n15\n,\n\n            \ncenter\n:\n \nuser\n\u00a0\u00a0\u00a0\n        \n});\n\n\n        \n?\nphp\n\n            \nforeach\n(\n \n$badrestos\n \nas\n \n$row\n)\n \n{\n\n                \n$lat\n \n=\n \n$row\n[\nlat\n];\n\n                \n$lng\n \n=\n \n$row\n[\nlng\n];\n\n                \n$establishment\n \n=\n \n$row\n[\nestablishment\n];\n\n                \necho\n \n \nvar\n \nmarker\n \n=\n \nnew\n \ngoogle\n.\nmaps\n.\nMarker\n({\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0        \nposition\n:\n \n{\n \n                    \nlat\n:\n$lat\n,\n \n                    \nlng\n:\n$lng\n \n                \n},\n \n                \nmap\n:\n \nmap\n,\n \n                \ntitle\n:\n \n$establishment\n\u00a0 \u00a0 \u00a0    \n            \n})\n\n        \n}\n\n    \n?\n\n    \n}\n\n\n/\nscript\n\n\nscript\n \nasync\n \ndefer\n\u00a0\nsrc\n=\nhttps://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY\ncallback=initMap\n/\nscript\n\n\n\n\n\nThis assumes that you have queried the closest establishments with the result set in \n$badrestos\n, and that \n$userLat\n and \n$userLng\n contains the user's position. Don't forget the styling as shown in the Google example.\n\n\n\n\nNote\n\n\n\n\nLook \n feel and styling matter! There is not a lot to display, but make sure whatever you do display is attractive.\n\n\nOnce again, modularize your code through functions or classes\n\n\n\n\n\n\n\n\nWarning\n\n\nAs of Chrome v 50, geolocation is only supported on secure connections (https). Unfortunately, our Vagrant VM does not support https. When you are testing your development code with Chrome, and you still need to browse to the site with https, you will get a warning that the connection is not private. Click on Advanced, and Proceed to your application. You can do something similar with Firefox.\n\n\n\n\nThe browser must give the user the opportunity to opt out of location tracking. The user will see something similar to this:\n\n\n\n\nIf the user blocks, the geolocation API returns an error.\n\n\n\n\nTesting Tip\n\n\nOnce you allow/block, Chrome will remember it; when testing, you can change your choice by going to \nchrome://settings/content\n. In Firefox, click on the information icon to the left of the address bar: \n\n\n\n\n\n\nSubmission\n\n\nYou must submit soft and hardcopies of:\n\n\n\n\nThe PHP script(s) used to create your table and populate it\n\n\nThe PHP script(s) used by the web application\n\n\nAny other files required (e.g., css, js, or images) (softcopy only)", 
            "title": "Dont eat that"
        }, 
        {
            "location": "/Internet-App-Dev-III/assignments/dont-eat-that/#montreal-dont-eat-here-web-app", 
            "text": "Using Open Data and Web API (teams of 2)", 
            "title": "Montreal Don't Eat Here Web App"
        }, 
        {
            "location": "/Internet-App-Dev-III/assignments/dont-eat-that/#introduction", 
            "text": "Open Data  is a movement whereby data collected by various sources are made public. Government entities, in particular, are make more data openly available in an effort to increase transparency. Data can be made available in a variety of formats, ranging from old-fashioned spreadsheets to xml to json.  A  Web API  is a programming interfaces available through the web, typically using http request-responses, which return data as either xml or json.  As you can see, there is a lot of similarity between scraping an Open Data page and deciphering the response to a web API.  This project has two parts: in the first part, we will write a PHP console application which reads open data in XML format from the City of Montreal, by programmatically retrieving the page and parsing the xml using simple DOM parsing. Based on fields in the open data, we will then use the Google Maps Geocoding API to query the address and get the associated latitude and longitude. We will store all the data in a database.  In the second part, we write a web application that: gets the user's location using HTML5 Geolocation services. With the location, it finds the bad restaurants within a 10 km radius, and returns a page with a Google Map with markers on the restaurants to avoid.  You can write your code in  PHPCode/badresto , we have a URL  badresto.app  that you can use for testing on Vagrant.", 
            "title": "Introduction"
        }, 
        {
            "location": "/Internet-App-Dev-III/assignments/dont-eat-that/#using-heroku", 
            "text": "Follow these steps in the very start of the project, even if you continue with Vagrant as a development environment.   Open a free Heroku account:  Fill in the form at  https://signup.heroku.com/www-pricing-top  Choose PHP as the primary development language  Wait for the confirmation e-mail (check you junk e-mail)   Sign in with a password    vagrant  up and  vagrant ssh   Download and install the heroku command-line interface.  Unfortunately in the labs, you need to do this everytime", 
            "title": "Using Heroku"
        }, 
        {
            "location": "/Internet-App-Dev-III/assignments/dont-eat-that/#run-this-from-your-terminal", 
            "text": "1 wget -qO- https://cli-assets.heroku.com/install-ubuntu.sh | sh", 
            "title": "Run this from your terminal."
        }, 
        {
            "location": "/Internet-App-Dev-III/assignments/dont-eat-that/#verify-the-install", 
            "text": "1 heroku --version", 
            "title": "Verify the install"
        }, 
        {
            "location": "/Internet-App-Dev-III/assignments/dont-eat-that/#login-to-heroku", 
            "text": "heroku login  Use the email and password you used earlier\n2. Go to  Code/badresto  This folder presumably holds both your console application to prepare the database, as well as your web application. The console app can be run through vagrant, however the web application must be deployed on Heroku for \"production\"", 
            "title": "Login to Heroku"
        }, 
        {
            "location": "/Internet-App-Dev-III/assignments/dont-eat-that/#set-up-repo", 
            "text": "initialize a git repo  git init .    Create a  Procfile . A Procfile indicates what processes your application will require. Your Procfile will have a single line to indicate that it is a web process.  web: vendor/bin/heroku-php-nginx    A shortcut to create the file:  echo web: vendor/bin/heroku-php-nginx   Procfile", 
            "title": "Set up repo"
        }, 
        {
            "location": "/Internet-App-Dev-III/assignments/dont-eat-that/#create-the-heroku-application", 
            "text": "When you create an app, a git remote named  heroku  is associated with your local git repo. Heroku create generates a random name for the app, or you can pass a parameter to specify your own name    Note  The URL of your application, as well as the git URL. You can always see these at dashboard.heroku.com if you log in.", 
            "title": "Create the Heroku application"
        }, 
        {
            "location": "/Internet-App-Dev-III/assignments/dont-eat-that/#commit-and-push-your-changes", 
            "text": "Commit and push your changes (note: you may want to set your name and email first through git config)   1\n2\n3\n4\n5 $ git add .\n\n$ git commit \u2013m  Add Procfile \n\n$ git push heroku master", 
            "title": "Commit and push your changes"
        }, 
        {
            "location": "/Internet-App-Dev-III/assignments/dont-eat-that/#add-a-database", 
            "text": "1 heroku addons:create heroku-postgresql:hobby-dev   Note the name of your store.  Alternatively, you can do this through the heroku.com web app:  Elements \u2013 Addons \u2013 Heroku Postgres addons \u2013 install", 
            "title": "Add a database"
        }, 
        {
            "location": "/Internet-App-Dev-III/assignments/dont-eat-that/#connecting-to-database", 
            "text": "To connect to your Heroku Postgres database from Vagrant console: 1 heroku pg:psql   To connect from your web application: To find the database url: 1 heroku config  \nThe  DATABASE_URL  consists of: 1 user:password@host:port/databasename  \nOr from the data.heroku.com web  application \u2013 settings \u2013 view credentials  Use this as the dsn (replace the database name, user and password and change the host server) 1\n2\n3\n4\n5\n6\n7 ?php  $dsn   = pgsql:dbname=databasename;host=blahblh.amazonaws.com;port=5432;sslmode=require ;  $user = user ;  $password = pwd ;  ?", 
            "title": "Connecting to database"
        }, 
        {
            "location": "/Internet-App-Dev-III/assignments/dont-eat-that/#code-your-application", 
            "text": "Regularly commit and push your changes 1\n2\n3 git add .\ngit commit \u2013m  Add Procfile and .gitignore \ngit push heroku master  \nI recommend that you write your console script to fill the database on Vagrant. Initially, fill the Homestead PostGres table, and once everything is tested, change the datasource to point to heroku and run the script from Vagrant.", 
            "title": "Code your Application"
        }, 
        {
            "location": "/Internet-App-Dev-III/assignments/dont-eat-that/#see-your-web-application", 
            "text": "To see your web application once deployed:  https://jayabadresto.herokuapp.com", 
            "title": "See your web application"
        }, 
        {
            "location": "/Internet-App-Dev-III/assignments/dont-eat-that/#project-steps", 
            "text": "", 
            "title": "Project Steps"
        }, 
        {
            "location": "/Internet-App-Dev-III/assignments/dont-eat-that/#step-1-populate-the-database", 
            "text": "There are many websites which post restaurant reviews \u2013 Yelp, Google, Zomato come to mind. But how many websites let you know if a restaurant or grocery store has 1 or more offenses with the food safety inspectors? The City of Montreal  publishes  this information (only available in French). It is hardly very usable when you are trying to decide whether or not to try a restaurant.  Montreal has made the data available through their  open data portal . As always, one should always ensure that any usage of material found on a website is legal and ethical. The portal has a  licence  page which details the conditions under which we can use the data: we must indicate that the source of the data is the city. We will also consult the  robots.txt  file. The  robots.txt  file disallow robots (such as the one we are coding) from accessing certain folders, but not the one that we want. It also asks for a 10 second crawl delay; this is inconsequential to us since all our data is on the same page.  Write a PHP command-line script (run from Vagrant VM command line, NOT a web application through the browser) that:   retrieves the open data XML page  extracts the following information: proprietaire (owner), categorie (category), etablissement (establishment), address and city-postal code.  you don't have to use  cURL  to get the web pages. Since we a retrieving a single xml page with a  GET  request, our code can use a simple file function: 1\n2\n3\n4\n5\n6\n7 ?php  $results   =   file_get_contents ( $url );  $xml   =   new   \\DOMDocument (); //backslash to indicate global namespace  @ $xml - loadXML ( $results );  ?   \nThe next step is to determine the latitude and longitude from the address, city and postal code. We will use Google's old geocoding service (that does not require an API key), you make a request to  http://maps.google.com/maps/api/geocode/xml?address=   address   sensor=false   and Google returns an XML document with information about that address. You will notice that the important XML elements are:  status  - indicates the status of the geocoding request.  result  - there is one  result  element for each possible address match. More than one result means that the address was not specific enough (e.g., search for Springfield, you will get 8 results)  geometry  - provides geometry details about the address match, including the  location  with  latitude  and  longitude  pairs.  Since you will make multiple requests to the API (one for each offender), make sure that you  add a sleep(1) for a 1 second sleep between requests . Once again, you can use  file_get_contents  instead of  cURL .  Make sure you urlencode the address value in the querystring!!!  Store the latitude and longitude as well as all other pertinent information of the offenders in the database.  Make sure that you store the latitude and longitude as a numeric (float) in the database table.   Warning  A few locations have more than one  Geometry  element; if that is the case, just take the lat and lng of the first one. You may also find that Google occasionally returns an  http 500 Internal Server Error .   This program will run from Vagrant and populate the database. Initially, populate the Postgres database on Vagrant. You probably want to make sure you can get the longitude and latitude for  one  establishment before looping through them all \u2013 there are over 1000 establishments so your script will run for a while!  Make sure that every time you run the script, you drop and recreate the table to avoid duplicates.  Once you are satisfied, change your PDO connection variables to refer to the Heroku database.  Make sure that you modularize for console application with either functions or classes. Store your PDO connection variables in a separate file that you require.", 
            "title": "Step 1 \u2013 Populate the database"
        }, 
        {
            "location": "/Internet-App-Dev-III/assignments/dont-eat-that/#step-2-web-application", 
            "text": "Warning  This part of the project is slightly hacky since we haven't covered more advanced topics yet. You may want to rewrite this part at the end of the semester before you make it available in a portfolio.   Once the database is populated, provide a simple web application that works as follows:  The home page (  index.php  ) returns a page that asks the user to accept the location. The page contains html5 geolocation javascript script that submit a hidden form with latitude and longitude if available.  The JS  geolocation API  is used to:   Determine if the browser supports geolocation  Gets the current position coordinates (latitude and longitude, as well as things like accuracy, altitude, etc\u2026) if possible  If not possible, determines if this is due to the users denying permission for geolocation, position unavailable, request timeout, or any other error.   All of the JS API calls are asynchronous: you have to provide the callback function for success/error in retrieving the location. A callback function is similar to an event handler, the function is invoked when location is determined. Here is some HTML and JS code for your consideration (hackiness \u2013 part1, would be better with Ajax).  1\n2\n3\n4\n5\n6\n7 !-- Geolocation --       form   action = geo.php   method = POST   id = hiddenForm  !-- all the hidden fields --          \n     input   type = hidden   name = latitude / \n     input   type = hidden   name = longitude / \n     input   type = hidden   name = error /       / form    Notice that the html has a form with id hiddenForm, and 3 hidden fields.  The JS script will check if the browser supports geolocation, request the location, and if it is accurate, fill in the form elements and submit the form. If there is an error, only the error input is filled before the form is submitted.  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39 window . onload = init ;  function   init ()   { \n     getLocation ();  }  function   getLocation ()   { \n     if   ( navigator . geolocation )   {    //geolocation is supported by browser \n          //provide two callbacks, for success or error \n         navigator . geolocation . getCurrentPosition ( getPosition ,   getError ); \n     }   else   {     //geolocation is not supported by browser \n         treatError (); \n     }  }  function   getPosition ( position )   { \n     //set coordinates in hidden fields and submit \n     if   ( position . coords . accuracy     10000 )   {  \n         //location is not accurate with 10 km, large error is possible on desktops \n         treatError (); \n     }   else   { \n         document . forms [ hiddenForm ]. elements [ latitude ]. value   =   position . coords . latitude ; \n         document . forms [ hiddenForm ]. elements [ longitude ]. value   =   position . coords . longitude ; \n\n         //submit form with geolocation info  \n         document . forms [ hiddenForm ]. submit ();  \n     }   }  function   getError ( error )   {     //geolocation was not successful \n     treatError ();  }  function   treatError ()   {     //geolocation was not successful \n     document . forms [ hiddenForm ]. elements [ error ]. value   =   1 ; \n\n    //submit form with error  \n    document . forms [ hiddenForm ]. submit ();  \n  }    The Javascript provided basically sets the form hidden input fields and submits the form to geo.php. (feel free to change the name)  geo.php  must:   Validate that access is only through a POST request, redirect to index.php if not  Check if there was an error, if so display a message indicating that the service is not available  If both latitude and longitude are available:  Find the bad establishments within a 25 km radius  Display the restaurants in a Google map   In order to find the closest restaurants, we must either use a database that support geo-spatial types, or use the  Haversine  formula. The SQL query is a little complex, so here is some  help from StackOverflow! If you use this code, please include a comment providing attribution to the source. NOTE: since you are selecting more than 1 column, you will need a GROUP BY clause before the HAVING expression; group by all the columns chosen. You may also want to MIMIT to the top 10 closest restaurants.  If no establishment is within a 10 km radius, display a message saying that the user can eat anywhere within 10 km! Otherwise, you will display a map with markers.  In order to display the map and the markers, we are actually going to write the javascript through PHP.   Warning  Hackiness part 2, would be better to use Ajax here!", 
            "title": "Step 2 - Web Application"
        }, 
        {
            "location": "/Internet-App-Dev-III/assignments/dont-eat-that/#get-google-maps-api-key", 
            "text": "First, you must get a Google Maps Javascript API key from  https://developers.google.com/maps/documentation/javascript/adding-a-google-map  , and click on GET A KEY.   Note  Store the API Key carefully, in a safe place.", 
            "title": "Get Google Maps API key"
        }, 
        {
            "location": "/Internet-App-Dev-III/assignments/dont-eat-that/#create-a-simple-map", 
            "text": "Next, look at the Javascript code in the tutorial page that is used to create a simple map: you can open it in JSFiddle to play around to understand this code. The center is the lat and lng, in your application, this will be the user's location. Zoom indicates the zoom level \u2013 4 is too far, you probably want something like 15 (streets). Markers are given a position (lat and lng); they can also have a title (tooltip that shows upon hovering).  So in your script, you will set the JS variables through PHP code. Pseudo-code:  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27 script \n     function   initMap ()   { \n         ? php \n         echo   var user = {lat: $userLat , lng: $userLng };  ; \n     ? \n         var   map   =   new   google . maps . Map ( document . getElementById ( map ),   { \u00a0\u00a0\u00a0\n             zoom :   15 , \n             center :   user \u00a0\u00a0\u00a0\n         }); \n\n         ? php \n             foreach (   $badrestos   as   $row )   { \n                 $lat   =   $row [ lat ]; \n                 $lng   =   $row [ lng ]; \n                 $establishment   =   $row [ establishment ]; \n                 echo     var   marker   =   new   google . maps . Marker ({ \u00a0 \u00a0 \u00a0 \u00a0 \u00a0         position :   {  \n                     lat : $lat ,  \n                     lng : $lng  \n                 },  \n                 map :   map ,  \n                 title :   $establishment \u00a0 \u00a0 \u00a0    \n             }) \n         } \n     ? \n     }  / script  script   async   defer \u00a0 src = https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY callback=initMap / script   \nThis assumes that you have queried the closest establishments with the result set in  $badrestos , and that  $userLat  and  $userLng  contains the user's position. Don't forget the styling as shown in the Google example.   Note   Look   feel and styling matter! There is not a lot to display, but make sure whatever you do display is attractive.  Once again, modularize your code through functions or classes     Warning  As of Chrome v 50, geolocation is only supported on secure connections (https). Unfortunately, our Vagrant VM does not support https. When you are testing your development code with Chrome, and you still need to browse to the site with https, you will get a warning that the connection is not private. Click on Advanced, and Proceed to your application. You can do something similar with Firefox.   The browser must give the user the opportunity to opt out of location tracking. The user will see something similar to this:   If the user blocks, the geolocation API returns an error.   Testing Tip  Once you allow/block, Chrome will remember it; when testing, you can change your choice by going to  chrome://settings/content . In Firefox, click on the information icon to the left of the address bar:", 
            "title": "Create a simple map"
        }, 
        {
            "location": "/Internet-App-Dev-III/assignments/dont-eat-that/#submission", 
            "text": "You must submit soft and hardcopies of:   The PHP script(s) used to create your table and populate it  The PHP script(s) used by the web application  Any other files required (e.g., css, js, or images) (softcopy only)", 
            "title": "Submission"
        }, 
        {
            "location": "/Internet-App-Dev-III/assignments/speed-reader/", 
            "text": "This assignment is heavily inspired by this \none\n (yes, I nifty assignments!). From the original source:\n\n\nMany modern speed reading techniques are based on the insights of school teacher Evelyn Wood. In the 1950s, Wood observed that, among other things, (1) using your finger or some\nother pointing device to train your eyes and focus while reading and (2) eliminating \nsubvocalization\n, internally speaking words while reading them, can dramatically increase your reading speed.\n\n\nSince then, countless speed reading courses have been developed to help students develop these skills. However, these courses rely on the student's discipline to develop good reading habits, and it is easy for an untrained student to learn \nthe wrong way\n and thus never seen the purported benefits of speed reading. Computer programs in this context can act a tutor or personal support system, ensuring that students practice the right skills even while learning\nalone.\n\n\nRapid Serial Visual Presentation (RSVP)\n, in essence, takes these ideas of pointing-while- reading and removing subvocalization to their limit. With RSVP, a series of objects\u2014here, words\u2014are\npresented quickly in succession. By design, the reader is only able to focus on a single word at a time. And furthermore, the words appear at such a speed that the reader is unable to\nsubvocalize like normal. Such a presentation style is only really practical with a computer program!\n\n\nIn this assignment, you will create an application similar to \nSpritz\n, as shown below (ctrl-click on the\nimage to see the animation)\n\n\n\n\nThe main highlights of the application:\n\n\n\n\na user logs in\n\n\nthe user resumes reading a book from where they left off, at the speed (words per minute) at which  they were \n\n\nnew users start at the beginning of the book, at a slow pace (50 words per minute). \n\n\nAt any point, the user can change the speed setting \n\n\n\n\nThere are three aspects to this assignment. The breakdown is conceptual: you may have multiple files, and files with a mix of both server and client-side logic:\n\n\nPreparation (written in PHP)\n\n\n\n\nprepare the database table(s). This application has authentication, so use best practices. \n\n\n\n\n\n\nWarning\n\n\nuser is a reserved word in Postgres SQL syntax, so use a different column name.\n\n\n\n\n\n\nseed a line table with lines from a book. This \netext\n site has ascii version of texts from \nProject Gutenberg\n. I chose \nAesop's Fables Translated by George Fyler Townsend\n. In this book, a paragraph is delimited by an empty line.\n\n\nIn a console application, read the file, break it up into lines, and populate your database. Keep the empty lines between lines in order to be able to potentially code the optional improvement below. But don\u2019t not keep more than 1 consecutive empty line (i.e., ignore any subsequent empty line until reach a line with characters), and ignore any leading empty lines (remember to trim first).\n\n\nRecall that \nfile_get_contents($url)\n returns a string with the entire contents. You can then explode the string based on end-of-line character (use the constant \nPHP_EOL\n). Alternatively, \nfopen($url, \u2018r\u2019)\n gets a handle to the file, which you can then use to get lines \n(fgets($handle))\n, and \nfeof($handle)\n indicates if you reach the end of the file.\n\n\n\n\nWeb Application Server Side (PHP)\n\n\n\n\nimplement a start page with authentication (registration and login per best practices). Once authenticated, you can redirect to the ajax-enabled page, or use the same script.\n\n\nJavascript will send Ajax requests for the next line. If the user just registered, start with the first lines of the text at the first speed (100 wpm). Only send back lines with words, unless you decide to implement the \noptional improvement\n.\n\n\nif the user has used the service before, send the next line to read at the speed they last used (i.e., last speed is persisted). \n\n\n\n\n\n\nNote\n\n\nIn order to keep a speed integer encoded as an integer, use the \nJSON_NUMERIC_CHECK | JSON_PRETTY_PRINT\n options with \njson_encode\n.\n\n\n\n\n\n\nPHP updates the line number saved in the database to the last line sent.\n\n\nevery time the user changes the speed, PHP must respond to an AJAX request, and save the new speed. The response is unimportant, but send one anyways!\n\n\n\n\nWeb Application client side (html \n js)\n\n\n\n\n\n\nthe presentation is an element containing the word, a number input to change speed (with minimum of 50 and maximum of 2000, step of 50). \nOptionally add a start/pause button\n\n\n\n\n\n\nusing Ajax, request a line when the page loads. Request a line every time it finishes displaying the last token. \n\n\n\n\n\n\n\n\nTip\n\n\nLook into the \nsplit\n or \nmatch\n methods \n\n\n\n\n\n\nget the speed in the AJAX response. Display each token in succession with a delay between tokens. \n\n\n\n\n\n\nTip\n\n\nThe \nsetInterval\n will help achieve the words-per-minute rate. This \nlink\n and this \nlink\n \n\n\n\n\n\n\n\n\nshow you how to invoke methods with a delay and how to clearInterval once you finish with displaying a line. You can ask for the next line in an AJAX request when you clear the interval.\n\n\n\n\n\n\nIf the user changes the numeric, send an AJAX request to the PHP script (HINT: look at the oninput event on the numeric input box); note that the Ajax response is not important. Also note that you don\u2019t have to change the speed for the line in progress, just the next one.\n\n\n\n\n\n\nWhen displaying each token:\n\n\n\n\n\n\nchoose a monospaced font\n\n\n\n\n\n\nhave the text left-justified\n\n\n\n\n\n\nchoose a focus letter based off the length of the token and \u201ccenter\u201d the word around the focus letter (not really centered, see algorithm below): \n\n\n1\n2\n3\n4\n5\n6\n?php\n\n\nlength\n \n=\n \n1\n \n=\n \n1\nst\n \nletter\n    \n// ____a or 4 spaces before \n\n\nlength\n \n=\n \n2\n-\n5\n \n=\n \n2\nnd\n \nletter\n  \n// ___four or 3 spaces before\n\n\nlength\n \n=\n \n6\n-\n9\n \n=\n \nthird\n \nletter\n      \n// __embassy 2 spaces\n\n\nlength\n \n=\n \n10\n-\n13\n \n=\n \nfourth\n \nletter\n   \n// _playground 1 spaces\n\n\nlength\n \n13\n \n=\n \nfifth\n \nletter\n        \n// acknowledgement no spaces\n\n\n\n\n\n\n\n\n\n\n\nHint: the css rule \nwhite-space: pre\n will preserve the whitespace.\n\n\n\n\ncolour the focus letter differently from the other letters (i.e., the focus letter is red, everything else is black. \n\n\noptional improvement\n: if the token ends with a punctuation mark (period, question mark, exclamation mark, comma or semi-colon) wait two times longer than normal before displaying the next word. At the end of the paragraph, wait 4 times longer\n\n\noptional improvement\n: add start and pause buttons instead of starting on window load\n\n\n\n\nYou can decide on the AJAX query protocol (i.e., Ajax with GET or POST, the url, the request name-value pairs) as well as the encoding and content of the response generated by PHP (i.e., json or xml) (although I strongly recommend json). Please document your interface using a template similar to the one found \nhere\n.\n\n\nMake sure that you indicate clearly that the source of the text from \nhttp://www.textfiles.com/etext\n based on Project Gutenberg visibly on the web page.\n\n\nRecall that we set up the url reader.app in Homestead.yaml and etc/hosts. This means you can work on your project in \nH:/PHPCode/reader\n.\n\n\n\n\nNote\n\n\nAll major browser vendors now recommend Mozilla\u2019s MDN Web Docs as the primary source for Web API documentation (HTML, CSS, JS, browser compatibility). \n\n\n\n\nSubmission\n\n\nThis is an \nindividual\n project! You must submit a softcopy of the entire project, including the interface documentation. \nYou will also push to Heroku\n! Please add me as a collaborator, and indicate the Heroku URL in your Lea submission.\n\n\n\n\nWarning\n\n\nIf you require PHP 7 features (e.g., null coalescing operator, spaceship operator), you must create a composer.json file indicating the minimum PHP version; Heroku defaults to PHP 5.6.x, which is ok for the vast majority of our code. See me for help!", 
            "title": "Speed reader"
        }, 
        {
            "location": "/Internet-App-Dev-III/assignments/speed-reader/#preparation-written-in-php", 
            "text": "prepare the database table(s). This application has authentication, so use best practices.     Warning  user is a reserved word in Postgres SQL syntax, so use a different column name.    seed a line table with lines from a book. This  etext  site has ascii version of texts from  Project Gutenberg . I chose  Aesop's Fables Translated by George Fyler Townsend . In this book, a paragraph is delimited by an empty line.  In a console application, read the file, break it up into lines, and populate your database. Keep the empty lines between lines in order to be able to potentially code the optional improvement below. But don\u2019t not keep more than 1 consecutive empty line (i.e., ignore any subsequent empty line until reach a line with characters), and ignore any leading empty lines (remember to trim first).  Recall that  file_get_contents($url)  returns a string with the entire contents. You can then explode the string based on end-of-line character (use the constant  PHP_EOL ). Alternatively,  fopen($url, \u2018r\u2019)  gets a handle to the file, which you can then use to get lines  (fgets($handle)) , and  feof($handle)  indicates if you reach the end of the file.", 
            "title": "Preparation (written in PHP)"
        }, 
        {
            "location": "/Internet-App-Dev-III/assignments/speed-reader/#web-application-server-side-php", 
            "text": "implement a start page with authentication (registration and login per best practices). Once authenticated, you can redirect to the ajax-enabled page, or use the same script.  Javascript will send Ajax requests for the next line. If the user just registered, start with the first lines of the text at the first speed (100 wpm). Only send back lines with words, unless you decide to implement the  optional improvement .  if the user has used the service before, send the next line to read at the speed they last used (i.e., last speed is persisted).     Note  In order to keep a speed integer encoded as an integer, use the  JSON_NUMERIC_CHECK | JSON_PRETTY_PRINT  options with  json_encode .    PHP updates the line number saved in the database to the last line sent.  every time the user changes the speed, PHP must respond to an AJAX request, and save the new speed. The response is unimportant, but send one anyways!", 
            "title": "Web Application Server Side (PHP)"
        }, 
        {
            "location": "/Internet-App-Dev-III/assignments/speed-reader/#web-application-client-side-html-js", 
            "text": "the presentation is an element containing the word, a number input to change speed (with minimum of 50 and maximum of 2000, step of 50).  Optionally add a start/pause button    using Ajax, request a line when the page loads. Request a line every time it finishes displaying the last token.      Tip  Look into the  split  or  match  methods     get the speed in the AJAX response. Display each token in succession with a delay between tokens.     Tip  The  setInterval  will help achieve the words-per-minute rate. This  link  and this  link       show you how to invoke methods with a delay and how to clearInterval once you finish with displaying a line. You can ask for the next line in an AJAX request when you clear the interval.    If the user changes the numeric, send an AJAX request to the PHP script (HINT: look at the oninput event on the numeric input box); note that the Ajax response is not important. Also note that you don\u2019t have to change the speed for the line in progress, just the next one.    When displaying each token:    choose a monospaced font    have the text left-justified    choose a focus letter based off the length of the token and \u201ccenter\u201d the word around the focus letter (not really centered, see algorithm below):   1\n2\n3\n4\n5\n6 ?php  length   =   1   =   1 st   letter      // ____a or 4 spaces before   length   =   2 - 5   =   2 nd   letter    // ___four or 3 spaces before  length   =   6 - 9   =   third   letter        // __embassy 2 spaces  length   =   10 - 13   =   fourth   letter     // _playground 1 spaces  length   13   =   fifth   letter          // acknowledgement no spaces      Hint: the css rule  white-space: pre  will preserve the whitespace.   colour the focus letter differently from the other letters (i.e., the focus letter is red, everything else is black.   optional improvement : if the token ends with a punctuation mark (period, question mark, exclamation mark, comma or semi-colon) wait two times longer than normal before displaying the next word. At the end of the paragraph, wait 4 times longer  optional improvement : add start and pause buttons instead of starting on window load   You can decide on the AJAX query protocol (i.e., Ajax with GET or POST, the url, the request name-value pairs) as well as the encoding and content of the response generated by PHP (i.e., json or xml) (although I strongly recommend json). Please document your interface using a template similar to the one found  here .  Make sure that you indicate clearly that the source of the text from  http://www.textfiles.com/etext  based on Project Gutenberg visibly on the web page.  Recall that we set up the url reader.app in Homestead.yaml and etc/hosts. This means you can work on your project in  H:/PHPCode/reader .   Note  All major browser vendors now recommend Mozilla\u2019s MDN Web Docs as the primary source for Web API documentation (HTML, CSS, JS, browser compatibility).", 
            "title": "Web Application client side (html &amp; js)"
        }, 
        {
            "location": "/Internet-App-Dev-III/assignments/speed-reader/#submission", 
            "text": "This is an  individual  project! You must submit a softcopy of the entire project, including the interface documentation.  You will also push to Heroku ! Please add me as a collaborator, and indicate the Heroku URL in your Lea submission.   Warning  If you require PHP 7 features (e.g., null coalescing operator, spaceship operator), you must create a composer.json file indicating the minimum PHP version; Heroku defaults to PHP 5.6.x, which is ok for the vast majority of our code. See me for help!", 
            "title": "Submission"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/getting-started/", 
            "text": "Note\n\n\nI personally be using my own Ubuntu system and not a VM. You are free to do whichever you wish, but the VM environment below can be quite slow.\n\n\n\n\nIntroduction to Vagrant and PHP with text editor, Home setup\n\n\nPart 1 \u2013 Vagrant virtual machine provisioning\n\n\nWe are using Vagrant in this course to ensure all students have the same\nvirtual machine configured on all lab computers and at home. Vagrant is\na tool that greatly helps sharing Virtual Machines with the exact same\nconfiguration. The vagrant box that we use is Homestead, which is\nrecommended by Laravel (a PHP framework that we will use later in the\nsemester).\n\n\nHomestead has the following development stack preinstalled: Ubuntu\nLinux, NginX web server, PostGres database, PHP.\n\n\nIn the first part of the lab, we will explore our system, make sure that\nwe can boot the virtual machine on the lab workstation and execute a\nbasic PHP script.\n\n\nCreate the Homestead folder\n\n\nCopy the folder \nS:\\\\CompSci\\\\524\\\\Homestead to your H: drive\n. You should\nnow have \nH:\\\\Homestead\n directory with the same contents as\n\nS:\\\\CompSci\\\\524\\\\Homestead\n.\n\n\nCreate the shared folder\n\n\nOne of the really nice features of Vagrant is how easy it is to get both\nthe host system (Windows 10 machine) and the virtual machine (Ubuntu) to\nsee and share the same directory.\n\n\nCreate a folder called PHPCode in your H: drive. You will save all your\nlabs and projects in this folder. Create the following directories\nwithin PHPCode to match the lab setup:\n\n\n\n\n\n\n\n\nlabs\n\n\n\n\n\n\nbadresto\n\n\n\n\n\n\nreader\n\n\n\n\n\n\ndawson\n\n\n\n\n\n\nnews\n\n\n\n\n\n\ntodo\n\n\n\n\n\n\n\n\n(spoiler: these are some of the labs and projects you\u2019ll be working on\nthis semester!)\n\n\nGet your ssh keys\n\n\nCheck if you already have a .ssh folder in your home directory (\nH:\n drive\nshould be setup as your \n$HOME\n in the labs). If you have an \n.ssh\n\ndirectory, you have already generated ssh keys (probably for git). If\nnot:\n\n\nOpen a Git Bash console in your H drive (right-click in Windows\nExplorer, Git Bash Here)\n\n\nMake sure you are in \nH:\n \n \npwd\n\n\nRun these commands:\n\n1\n$ mkdir -p .ssh \n \ncd\n .ssh\n\n\n\n\n\n1\n$ ssh-keygen -t rsa -b \n4096\n -C \nyouremail@address.here\n\n\n\n\n\nPress enter to save the key in \n/h/.ssh/id\\_rsa\n\n\nBoot the virtual machine configured for the PHP course\n\n\nYou will be doing this every lab:\n\n\nOpen a Git Bash window in \nH:/Homestead\n (right-click in explorer). This\nopens a Bash shell emulator on your Window system.\n\n\nMake sure you are in \n/h/Homestead\n\n\nRun this command:\n\n1\n$ vagrant up\n\n\n\n\n\nWhen this command finishes (a few minutes) your Virtual Machine is up\nand running!!\n\n\nSSH into the virtual machine\n\n\nOur Ubuntu VM is headless \u2013 meaning that we don\u2019t have a GUI interface\nto Linux. Yay Command line only\n\n\nWhenever you want to log into the booted VM (e.g., to check the\nconfiguration or access the database), type in this command from your\nGit Bash window in \nH:\\\\Homestead\n.\n\n\n1\n$ vagrant ssh\n\n\n\n\nYou are now in the VM!\n\n\ncd\n to the \nCode\n directory; you are now in the PHPCode shared folder\nSo the \nH:/PHPCode\n folder in Windows is the same as the\n\n/home/vagrant/Code\n folder in the VM.\n\n\n\n\nNOTE: there is a known Vagrant bug where you may not see the command\nprompt while \nssh\n-ing with vagrant \nssh\n. If that is that case, exit and\ntry \nssh vagrant@192.168.10.10\n, with password \nvagrant\n\n\n\n\nThis \u201cmagic\u201d of the shared directory is courtesy of the \nHomestead.yaml\n\nfile. If you open it in Notepad++ (or use less or nano or vim from the\nLinux side), you\u2019ll see a section that indicates the folder mapping.\n\n\nRun a simple script\n\n\nOnce the VM is up and running, we can run PHP scripts.\n\n\nCopy \nS:/CompSci/524/lab0\n to your \nH:/PHPCode/labs folder\n.\n\n\nOpen a browser (hint: Firefox is my favourite), and go to\n\nhttp://labs.app/lab0\n\n\nYou should see a page that contains output of the PHP configuration on\nthe VM. Don\u2019t worry too much about the content, if you see it, you know\nyour VM is serving up your PHP files as required.\n\n\nHow does this work?\n\n\nAll the lab computers have been set to associate certain hostnames to\nitself: you can see this in the file\n\n\nC:/Windows/System32/drivers/etc/hosts\n\n\nNotice, for example, that the host labs.app is associated with the IP\naddress \n192.168.10.10\n (in fact all hostnames are associated with this IP\naddress). The hosts file enables you to override the DNS for a domain on\nthat machine. Your machine will look at the IP address provided\n(\n192.168.10.10\n) instead of going through a DNS. This IP address\n(\n192.168\n) is in the private IP address range, so we can map with no\nworries.\n\n\nNow look at \nH:/Homestead/Homestead.yaml\n: you will see that the IP\naddress is the one being used by you Vagrant VM 9and its NginX web\nserver. Further down, you see that the sites are associated with\ndifferent folders in VM; these folders are all in the shared\n\n/home/vagrant/Code\n folder (which is your \nH:/PHPCode\n folder)\n\n\nIf you open tChe \nlab0/index.php file\n, you will a single line in the php\ntags \n\u2013 phpinfo()\n is the function that outputs the PHP configuration.\n\n\nNginX, the web server, is configured by default to return \nindex.html\n,\n\nindex.html\n directly, or interpret \nindex.php\n through the PHP interpreter.\nThat\u2019s what happened when you browsed to \nlabs.app/lab0\n.\n\n\nCreate and debug your own PHP Script\n\n\nCreate a folder \nH:\\\\PHPCode\\\\labs\\\\lab1\n (or in the Linux VM\n\nCode/labs/lab1\n in the VM), and write a PHP script named index.php that\nwill create the output as shown in the image, using a text editor like\nNotepad++ or Atom.\n\n\n\n\n\n\n use HTML5\n    tags, including doctype and html tag\n\n\n\n\n\n\nthe php code will fill in the contents of a table, with echo\u2019s\n    within a nested loop\n\n\n\n\n\n\nno styling is required\n\n\n\n\n\n\nrecall: PHP variable names start with $; for loops look pretty much\n    the same as java.\n\n\n\n\n\n\nPHP coding\n    conventions\n\n    use the \u201cEgyptian brackets\u201d/\u201dK\nR style braces\u201d in control structures\n    \u2013 which means the opening brace is written on the same line as the\n    conditional clause and the closing brace is always written on its\n    own line.\n\n\n\n\n\n\nE.g.:\n\n1\n2\n3\n4\n5\n if ($a != 2) {\n\n \u00a0 \u00a0 $a = 2;\n\n }\n\n\n\n\n \n(As an aside, this is also the\n \n*common Java style\n *\n).\n\n\nTesting the PHP Script\n\n\nBrowse to \nhttp://labs.app/lab1\n. Since we\nnamed the file index.php, NginX will open it by default. If you named it\nsomething else, write it in the address bar.\n\n\n\nThe results of the program should appear!\n\n\nRecall: Firefox (as well as the other major browsers) come with a suite\nof developer tools. Open the menu in Firefox, select Developer and\nToggle Tools (or Ctrl+Shift+I). You will see the http messages and other\ninformation that is \nvery\n useful when debugging web applications.\n\n\nShutting down the VM\n\n\nUse the command vagrant halt to gracefully shutdown your VM. Note that\nthe VM is subject to deep-freeze, so any changes anywhere except the\nshared folder will be lost the next time you log in.\n\n\nSOLVING INTERMITTENT 502 BAD GATEWAY ISSUES\n\n\nIf you are victim, you may have to make sure that nginx and php config\nmatch:\n\n\nGo to \n/etc/php/7.1/fpm/pool.d/\n , edit \nwww.conf\n (use \nsudo nano\n) and edit\nthe line \nlisten = /run/php/php7.1-fpm.sock\n to\n\nlisten = var/run/php/php7.1-fpm.sock\n\n\nExit and save the file, then run \nsudo service php7.1-fpm restart\n\n\nSetting up your laptop/home system\n\n\nThe following instructions are provided for a Windows 7.1+ syste, If you\nare running Linux or IOS, the steps will be simpler. See this\n\nlink\n, and compare to the notes\nbelow.\n\n\n\n\n\n\nmake sure your BIOS/UEFI supports hardware virtualization and it is\n    enabled\n\n\n\n\n\n\nmake sure HyperV is disabled (Control panel - uninstall a program \u2013\n    program and features \u2013 turn Windows features on/off \u2013\n    uncheck HyperV)\n\n\n\n\n\n\ninstall Git for Windows to have gitbash:\n    \nhttps://git-for-windows.github.io\n\n\n\n\nchoose default install options (select Windows\n    Explorer Integration. Select \nUse Git from the Windows Command\n    Prompt\n radio button so that Git can be run from the\n    command line.)\n\n\n\n\n\n\n\n\ninstall VirtualBox 5.1.x (latest version) :\n    \nhttps://www.virtualbox.org/wiki/Downloads\n\n\n\n\n\n\ninstall Vagrant 1.9.x (latest version):\n    \nhttps://www.vagrantup.com/downloads.html\n\n\n\n\n\n\nif desired, setup your hosts to be the same as school\n\n\n\n\n\n\nopen Notepad as admin\n\n\n\n\n\n\nEdit C:/Windows/System32/drivers/etc/hosts (nb: make sure Notepad is\n    looking at all files, not just .txt)\n\n\n\n\n\n\nAdd to the end:\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n192.168.10.10 dawson.app\n\n192.168.10.10 news.app\n\n192.168.10.10 todo.app\n\n192.168.10.10 labs.app\n\n192.168.10.10 reader.app\n\n192.168.10.10 badresto.app\n\n\n\n\n1.  get your ssh keys, if required. Follow the steps in the lab above to\n    check if they exist in the $HOME directory\n\n\n\n\n\n\ndecide where you want your Homestead and PHPCode directories and\n    make them\n\n\n\n\n\n\nIn the containing directory:\n\n\n\n\n\n\nopen gitbash\n\n\n\n\n\n\nrun the following commands:\n\n1\n$ vagrant box add laravel/homestead\n\n\n\n\n\n1\n$ git clone https://github.com/laravel/homestead.git Homestead\n\n\n\n\n\n1\n$ \ncd\n Homestead\n\n\n\n\n\n1\n$ git checkout v5.4.0\n\n\n\n\n\n1\n$ bash init.sh\n\n\n\n\n\n\n\nedit the \nHomestead/Homestead.yaml\n file (look at the one you have in\nyour \nH:\n drive)\n\n\n\n\n\n\n\n\nin the folders section, provide to mapping to the PHPCode folder you\n    created in step 8. e.g.,\n\n\n\n\n\n\nfolders:\n\n\n\n\nmap: \nh:/PHPCode\n\n\n\n\nto: \n/home/vagrant/Code\n\n\n\n\nif you added the sites to the \netc/hosts\n files, also add them to\n    the \nHomestead.yaml\n. For example:\n\n1\n2\n3\nsites:\n\n- map: labs.app\n\n\n\n\n\n\n\nto: \n/home/vagrant/Code/labs\n\n\n\n\n\n\neach time you want to boot up:\nvagrant up\n\n\n\n\n\n\nto ssh in: either \nvagrant ssh\n or \nssh vagrant@192.168.10.10\n, with\n    password \nvagrant\n\n\n\n\n\n\nto shut down: \nvagrant halt\n\n\n\n\n\n\nDebugging your system\n\n\nWhen you vagrant up, if you get the message that a Virtual Machine with the name Homestead-7 already exists, it indicates that you VM was not shutdown correctly. \n\n\nTo fix this:\n\n\n\n\nfind the Oracle VM VirtualBox application and open it\n\n\nyou will notice a VM called Homestead-7 which is running\n\n\nright-click on it to close it\n\n\nright-click on it to remove it and delete all files\n\n\nclose your bash window, reopen, and retry\n\n\nif you still have issues, you may have to delete folders: in the \nHomestead\\.vagrant\\machines\n folder as well as the \nVirtualBox VMs\\\n folder. Always close and reopen your bash window.\n\n\n\n\nif you need to edit your Homestead.yaml file, make sure that vagrant halt first. Once the file is saved, start vagrant with the command vagrant up --provision. This will ensure that vagrant re-reads the Homestead.yaml file.\n\n\nThe Homestead.yaml file is notoriously sensitive to bad spacing. This may be a cause of issues that you encounter\n\n\nOne really unfortunate side-effect of Dawson\u2019s deep freeze system is that changes that you make to the VM get lost every time you logout (changes to the php config files, or your database, or installation of tools, or \u2026). This can get irritating. If possible, you may prefer to use your laptop in the labs.", 
            "title": "Getting started"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/getting-started/#introduction-to-vagrant-and-php-with-text-editor-home-setup", 
            "text": "", 
            "title": "Introduction to Vagrant and PHP with text editor, Home setup"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/getting-started/#part-1-vagrant-virtual-machine-provisioning", 
            "text": "We are using Vagrant in this course to ensure all students have the same\nvirtual machine configured on all lab computers and at home. Vagrant is\na tool that greatly helps sharing Virtual Machines with the exact same\nconfiguration. The vagrant box that we use is Homestead, which is\nrecommended by Laravel (a PHP framework that we will use later in the\nsemester).  Homestead has the following development stack preinstalled: Ubuntu\nLinux, NginX web server, PostGres database, PHP.  In the first part of the lab, we will explore our system, make sure that\nwe can boot the virtual machine on the lab workstation and execute a\nbasic PHP script.", 
            "title": "Part 1 \u2013 Vagrant virtual machine provisioning"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/getting-started/#create-the-homestead-folder", 
            "text": "Copy the folder  S:\\\\CompSci\\\\524\\\\Homestead to your H: drive . You should\nnow have  H:\\\\Homestead  directory with the same contents as S:\\\\CompSci\\\\524\\\\Homestead .", 
            "title": "Create the Homestead folder"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/getting-started/#create-the-shared-folder", 
            "text": "One of the really nice features of Vagrant is how easy it is to get both\nthe host system (Windows 10 machine) and the virtual machine (Ubuntu) to\nsee and share the same directory.  Create a folder called PHPCode in your H: drive. You will save all your\nlabs and projects in this folder. Create the following directories\nwithin PHPCode to match the lab setup:     labs    badresto    reader    dawson    news    todo     (spoiler: these are some of the labs and projects you\u2019ll be working on\nthis semester!)", 
            "title": "Create the shared folder"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/getting-started/#get-your-ssh-keys", 
            "text": "Check if you already have a .ssh folder in your home directory ( H:  drive\nshould be setup as your  $HOME  in the labs). If you have an  .ssh \ndirectory, you have already generated ssh keys (probably for git). If\nnot:  Open a Git Bash console in your H drive (right-click in Windows\nExplorer, Git Bash Here)  Make sure you are in  H:     pwd  Run these commands: 1 $ mkdir -p .ssh    cd  .ssh   1 $ ssh-keygen -t rsa -b  4096  -C  youremail@address.here   \nPress enter to save the key in  /h/.ssh/id\\_rsa", 
            "title": "Get your ssh keys"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/getting-started/#boot-the-virtual-machine-configured-for-the-php-course", 
            "text": "You will be doing this every lab:  Open a Git Bash window in  H:/Homestead  (right-click in explorer). This\nopens a Bash shell emulator on your Window system.  Make sure you are in  /h/Homestead  Run this command: 1 $ vagrant up   When this command finishes (a few minutes) your Virtual Machine is up\nand running!!", 
            "title": "Boot the virtual machine configured for the PHP course"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/getting-started/#ssh-into-the-virtual-machine", 
            "text": "Our Ubuntu VM is headless \u2013 meaning that we don\u2019t have a GUI interface\nto Linux. Yay Command line only  Whenever you want to log into the booted VM (e.g., to check the\nconfiguration or access the database), type in this command from your\nGit Bash window in  H:\\\\Homestead .  1 $ vagrant ssh  \nYou are now in the VM!  cd  to the  Code  directory; you are now in the PHPCode shared folder\nSo the  H:/PHPCode  folder in Windows is the same as the /home/vagrant/Code  folder in the VM.   NOTE: there is a known Vagrant bug where you may not see the command\nprompt while  ssh -ing with vagrant  ssh . If that is that case, exit and\ntry  ssh vagrant@192.168.10.10 , with password  vagrant   This \u201cmagic\u201d of the shared directory is courtesy of the  Homestead.yaml \nfile. If you open it in Notepad++ (or use less or nano or vim from the\nLinux side), you\u2019ll see a section that indicates the folder mapping.", 
            "title": "SSH into the virtual machine"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/getting-started/#run-a-simple-script", 
            "text": "Once the VM is up and running, we can run PHP scripts.  Copy  S:/CompSci/524/lab0  to your  H:/PHPCode/labs folder .  Open a browser (hint: Firefox is my favourite), and go to http://labs.app/lab0  You should see a page that contains output of the PHP configuration on\nthe VM. Don\u2019t worry too much about the content, if you see it, you know\nyour VM is serving up your PHP files as required.  How does this work?  All the lab computers have been set to associate certain hostnames to\nitself: you can see this in the file  C:/Windows/System32/drivers/etc/hosts  Notice, for example, that the host labs.app is associated with the IP\naddress  192.168.10.10  (in fact all hostnames are associated with this IP\naddress). The hosts file enables you to override the DNS for a domain on\nthat machine. Your machine will look at the IP address provided\n( 192.168.10.10 ) instead of going through a DNS. This IP address\n( 192.168 ) is in the private IP address range, so we can map with no\nworries.  Now look at  H:/Homestead/Homestead.yaml : you will see that the IP\naddress is the one being used by you Vagrant VM 9and its NginX web\nserver. Further down, you see that the sites are associated with\ndifferent folders in VM; these folders are all in the shared /home/vagrant/Code  folder (which is your  H:/PHPCode  folder)  If you open tChe  lab0/index.php file , you will a single line in the php\ntags  \u2013 phpinfo()  is the function that outputs the PHP configuration.  NginX, the web server, is configured by default to return  index.html , index.html  directly, or interpret  index.php  through the PHP interpreter.\nThat\u2019s what happened when you browsed to  labs.app/lab0 .", 
            "title": "Run a simple script"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/getting-started/#create-and-debug-your-own-php-script", 
            "text": "Create a folder  H:\\\\PHPCode\\\\labs\\\\lab1  (or in the Linux VM Code/labs/lab1  in the VM), and write a PHP script named index.php that\nwill create the output as shown in the image, using a text editor like\nNotepad++ or Atom.     use HTML5\n    tags, including doctype and html tag    the php code will fill in the contents of a table, with echo\u2019s\n    within a nested loop    no styling is required    recall: PHP variable names start with $; for loops look pretty much\n    the same as java.    PHP coding\n    conventions \n    use the \u201cEgyptian brackets\u201d/\u201dK R style braces\u201d in control structures\n    \u2013 which means the opening brace is written on the same line as the\n    conditional clause and the closing brace is always written on its\n    own line.    E.g.: 1\n2\n3\n4\n5  if ($a != 2) {\n\n \u00a0 \u00a0 $a = 2;\n\n }  \n  (As an aside, this is also the   *common Java style\n * ).", 
            "title": "Create and debug your own PHP Script"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/getting-started/#testing-the-php-script", 
            "text": "Browse to  http://labs.app/lab1 . Since we\nnamed the file index.php, NginX will open it by default. If you named it\nsomething else, write it in the address bar.  \nThe results of the program should appear!  Recall: Firefox (as well as the other major browsers) come with a suite\nof developer tools. Open the menu in Firefox, select Developer and\nToggle Tools (or Ctrl+Shift+I). You will see the http messages and other\ninformation that is  very  useful when debugging web applications.", 
            "title": "Testing the PHP Script"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/getting-started/#shutting-down-the-vm", 
            "text": "Use the command vagrant halt to gracefully shutdown your VM. Note that\nthe VM is subject to deep-freeze, so any changes anywhere except the\nshared folder will be lost the next time you log in.", 
            "title": "Shutting down the VM"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/getting-started/#solving-intermittent-502-bad-gateway-issues", 
            "text": "If you are victim, you may have to make sure that nginx and php config\nmatch:  Go to  /etc/php/7.1/fpm/pool.d/  , edit  www.conf  (use  sudo nano ) and edit\nthe line  listen = /run/php/php7.1-fpm.sock  to listen = var/run/php/php7.1-fpm.sock  Exit and save the file, then run  sudo service php7.1-fpm restart", 
            "title": "SOLVING INTERMITTENT 502 BAD GATEWAY ISSUES"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/getting-started/#setting-up-your-laptophome-system", 
            "text": "The following instructions are provided for a Windows 7.1+ syste, If you\nare running Linux or IOS, the steps will be simpler. See this link , and compare to the notes\nbelow.    make sure your BIOS/UEFI supports hardware virtualization and it is\n    enabled    make sure HyperV is disabled (Control panel - uninstall a program \u2013\n    program and features \u2013 turn Windows features on/off \u2013\n    uncheck HyperV)    install Git for Windows to have gitbash:\n     https://git-for-windows.github.io   choose default install options (select Windows\n    Explorer Integration. Select  Use Git from the Windows Command\n    Prompt  radio button so that Git can be run from the\n    command line.)     install VirtualBox 5.1.x (latest version) :\n     https://www.virtualbox.org/wiki/Downloads    install Vagrant 1.9.x (latest version):\n     https://www.vagrantup.com/downloads.html    if desired, setup your hosts to be the same as school    open Notepad as admin    Edit C:/Windows/System32/drivers/etc/hosts (nb: make sure Notepad is\n    looking at all files, not just .txt)    Add to the end:     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 192.168.10.10 dawson.app\n\n192.168.10.10 news.app\n\n192.168.10.10 todo.app\n\n192.168.10.10 labs.app\n\n192.168.10.10 reader.app\n\n192.168.10.10 badresto.app  \n1.  get your ssh keys, if required. Follow the steps in the lab above to\n    check if they exist in the $HOME directory    decide where you want your Homestead and PHPCode directories and\n    make them    In the containing directory:    open gitbash    run the following commands: 1 $ vagrant box add laravel/homestead   1 $ git clone https://github.com/laravel/homestead.git Homestead   1 $  cd  Homestead   1 $ git checkout v5.4.0   1 $ bash init.sh    edit the  Homestead/Homestead.yaml  file (look at the one you have in\nyour  H:  drive)     in the folders section, provide to mapping to the PHPCode folder you\n    created in step 8. e.g.,    folders:   map:  h:/PHPCode   to:  /home/vagrant/Code   if you added the sites to the  etc/hosts  files, also add them to\n    the  Homestead.yaml . For example: 1\n2\n3 sites:\n\n- map: labs.app    to:  /home/vagrant/Code/labs    each time you want to boot up: vagrant up    to ssh in: either  vagrant ssh  or  ssh vagrant@192.168.10.10 , with\n    password  vagrant    to shut down:  vagrant halt", 
            "title": "Setting up your laptop/home system"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/getting-started/#debugging-your-system", 
            "text": "When you vagrant up, if you get the message that a Virtual Machine with the name Homestead-7 already exists, it indicates that you VM was not shutdown correctly.   To fix this:   find the Oracle VM VirtualBox application and open it  you will notice a VM called Homestead-7 which is running  right-click on it to close it  right-click on it to remove it and delete all files  close your bash window, reopen, and retry  if you still have issues, you may have to delete folders: in the  Homestead\\.vagrant\\machines  folder as well as the  VirtualBox VMs\\  folder. Always close and reopen your bash window.   if you need to edit your Homestead.yaml file, make sure that vagrant halt first. Once the file is saved, start vagrant with the command vagrant up --provision. This will ensure that vagrant re-reads the Homestead.yaml file.  The Homestead.yaml file is notoriously sensitive to bad spacing. This may be a cause of issues that you encounter  One really unfortunate side-effect of Dawson\u2019s deep freeze system is that changes that you make to the VM get lost every time you logout (changes to the php config files, or your database, or installation of tools, or \u2026). This can get irritating. If possible, you may prefer to use your laptop in the labs.", 
            "title": "Debugging your system"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/lab2/", 
            "text": "Arrays, php.net manual, Files\n\n\nNote\n: File commands that will be helpful in the lab:\n\n\n\n\n$file\n = fopen($filename, $mode) -\n mode can be 'r', 'r+', 'w', etc\u2026\n\n\n$line\n = fgets($file) -\n return a line, moves the cursor\n\n\n$array\n = fgetcsv($file) -\n returns a line broken up into an array based on comma (default delimiter, you can change)\n\n\nwhile (!feof($file))\n -\n true or false if reached EOF\n\n\nfclose($file)\n -\n returns a boolean indicating success\n\n\n\n\nCreate an event calendar, where a php script reads in a file that contains days and events for a month, stores the contents in an associative array, and displays a calendar. Since we haven't covered user-defined functions and classes yet, you can code everything in a single php script.\n\n\nI have provided you an events file. If you open it, you'll notice that the first line indicates the year and month. The subsequent lines indicate the day and the event (comma-separated).\n\n\n1\n2\n3\n4\n5\n6\n// event.txt\n2017-09\n4, Labour day\n19, Drop deadline\n8, Assignment due\n29, Assignment due\n\n\n\n\n\n\nOpen the file using \nfopen\n with mode 'r' (read-only).\n\n\nThe first line is guaranteed - this line contains the year and month as \nyyyy-mm\n. Read this line using \nfgets\n - this function returns a string representing a single line at a time. Use this string to create a Unix timestamp (using \nstrtotime\n) and use the timestamp to determine the name of the month, first day of week of the first day on the month, and the number of days in the month using the \ndate\n function. \n\n\nHint\n: \ndate('F Y', strtotime($line))\n returns the month and year formatted, \ndate('N', strtotime($line))\n returns 1 for Monday up to 7 for Sunday. \ndate('t', strtotime($line))\n returns the number of days in the month.\n\n\nYou may have 0 or more event lines after the first date line. Each line will have the day of the month followed by a comma, then the event description. Within a while loop, as long as you are not at the end-of-file (not \nfeof\n ), read through the remaining lines and populate an array with the day of month as key and event description as the value. You may prefer to use \nfgetcsv\ninstead of fgets as you read each line to more easily split the key from the value.\n\n\nClose the file with \nfclose\n when you are finished reading the lines.\n\n\nOnce the array of events is populated, display the monthly calendar. To determine if there is an event on a given day, check if the events array with the given day as key has a value; i.e., if \n(isset($events[$day])\n is true, then there is a value. For the data that you have been provided, your output will resemble the following, using this styling. Of course, feel free to style it better.\n\n\n\n\nRemember to save the php script in your \nH:/PHPCode/labs/lab2\n folder as \nindex,php\n and to boot up vagrant from Homestead folder.!", 
            "title": "Lab2"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/lab2/#arrays-phpnet-manual-files", 
            "text": "Note : File commands that will be helpful in the lab:   $file  = fopen($filename, $mode) -  mode can be 'r', 'r+', 'w', etc\u2026  $line  = fgets($file) -  return a line, moves the cursor  $array  = fgetcsv($file) -  returns a line broken up into an array based on comma (default delimiter, you can change)  while (!feof($file))  -  true or false if reached EOF  fclose($file)  -  returns a boolean indicating success   Create an event calendar, where a php script reads in a file that contains days and events for a month, stores the contents in an associative array, and displays a calendar. Since we haven't covered user-defined functions and classes yet, you can code everything in a single php script.  I have provided you an events file. If you open it, you'll notice that the first line indicates the year and month. The subsequent lines indicate the day and the event (comma-separated).  1\n2\n3\n4\n5\n6 // event.txt\n2017-09\n4, Labour day\n19, Drop deadline\n8, Assignment due\n29, Assignment due   Open the file using  fopen  with mode 'r' (read-only).  The first line is guaranteed - this line contains the year and month as  yyyy-mm . Read this line using  fgets  - this function returns a string representing a single line at a time. Use this string to create a Unix timestamp (using  strtotime ) and use the timestamp to determine the name of the month, first day of week of the first day on the month, and the number of days in the month using the  date  function.   Hint :  date('F Y', strtotime($line))  returns the month and year formatted,  date('N', strtotime($line))  returns 1 for Monday up to 7 for Sunday.  date('t', strtotime($line))  returns the number of days in the month.  You may have 0 or more event lines after the first date line. Each line will have the day of the month followed by a comma, then the event description. Within a while loop, as long as you are not at the end-of-file (not  feof  ), read through the remaining lines and populate an array with the day of month as key and event description as the value. You may prefer to use  fgetcsv instead of fgets as you read each line to more easily split the key from the value.  Close the file with  fclose  when you are finished reading the lines.  Once the array of events is populated, display the monthly calendar. To determine if there is an event on a given day, check if the events array with the given day as key has a value; i.e., if  (isset($events[$day])  is true, then there is a value. For the data that you have been provided, your output will resemble the following, using this styling. Of course, feel free to style it better.   Remember to save the php script in your  H:/PHPCode/labs/lab2  folder as  index,php  and to boot up vagrant from Homestead folder.!", 
            "title": "Arrays, php.net manual, Files"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/lab3/", 
            "text": "Form with arrays, checkboxes, select menu\n\n\nCreate a registration form for a random website, and a php script where it is submitted (2 separate scripts). You will probably also want a third script that contains the common arrays to be \nincluded\n by both the form and the submit script.\n\n\nThe registration form must have the following functionality (feel free to change):\n\n\n\n\nasks the user for their name in \ntextboxes\n\n\nasks for the gender with \nradio\n buttons\n\n\nasks for interests with \ncheckboxes\n and 8 or so random interests (you can choose any interests. No inspiration? Here are some:\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n?php\n\n\n$interests\n \n=\n \n[\n\n    \npoker\n,\n\n    \nchess\n,\n\n    \ncheckers\n,\n\n    \ndominoes\n,\n\n    \nsolitaire\n,\n\n    \nrummy\n,\n\n    \nrisk\n,\n\n    \nsettlers of catan\n\n\n];\n\n\n?\n\n\n\n\n\n\n\n\n\nasks for location with \nselect\n menus for country. I provided a text file of 196 countries (I hope they all still exist ) in Countries.txt;\n\n\n\n\nThe second PHP script is where the form is submitted. Validate all the data entered; if valid, welcome the user by echoing their information along with a count of their selected interests, and display the selections in alphabetical order (see last note below).\n\n\nIf the entries are invalid, indicate which field is incorrect (perhaps with different styling?).\n\n\nNote\n\n\n\n\nuse the \n$_GET\n or \n$_POST\n superglobal arrays\n\n\npen the text file like we did last lab. Note that this file has 196 countries on separate lines. So open the file like last lab, loop through and put each line as the next element in the array using the \n[]\n syntax. Note that you will have to \ntrim\n each line you read from the file to remove the additional white space characters at the end of each line.\n\n\nremember to check to make sure that the checkbox array is a subset of all the potential interests with the \narray_diff\nfunction.\n\n\nTo make sure the location is within the array of countries, use \nin_array\n function. Recall that in_array looks for values in an array; we would use \nisset\n to check if a key existed in an array.\n\n\nMake sure you look at the \nsort\n function syntax when displaying the interest selections in alphabetical order!!\n\n\n\n\nSave the form, the handling script and the common array file to include within \nPHPCode\\labs\\lab3\n, all within the same project if you use an IDE. The form will be \nindex.php\n.\n\n\ncountries.txt\n\n\nUse the following:\n\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\nAfghanistan\nAlbania\nAlgeria\nAndorra\nAngola\nAntigua \n Deps\nArgentina\nArmenia\nAustralia\nAustria\nAzerbaijan\nBahamas\nBahrain\nBangladesh\nBarbados\nBelarus\nBelgium\nBelize\nBenin\nBhutan\nBolivia\nBosnia \n Herzegovina\nBotswana\nBrazil\nBrunei\nBulgaria\nBurkina\nBurundi\nCambodia\nCameroon\nCanada\nCape Verde\nCentral African Rep\nChad\nChile\nChina\nColombia\nComoros\nCongo\nCongo {Democratic Rep}\nCosta Rica\nCroatia\nCuba\nCyprus\nCzech Republic\nDenmark\nDjibouti\nDominica\nDominican Republic\nEast Timor\nEcuador\nEgypt\nEl Salvador\nEquatorial Guinea\nEritrea\nEstonia\nEthiopia\nFiji\nFinland\nFrance\nGabon\nGambia\nGeorgia\nGermany\nGhana\nGreece\nGrenada\nGuatemala\nGuinea\nGuinea-Bissau\nGuyana\nHaiti\nHonduras\nHungary\nIceland\nIndia\nIndonesia\nIran\nIraq\nIreland {Republic}\nIsrael\nItaly\nIvory Coast\nJamaica\nJapan\nJordan\nKazakhstan\nKenya\nKiribati\nKorea North\nKorea South\nKosovo\nKuwait\nKyrgyzstan\nLaos\nLatvia\nLebanon\nLesotho\nLiberia\nLibya\nLiechtenstein\nLithuania\nLuxembourg\nMacedonia\nMadagascar\nMalawi\nMalaysia\nMaldives\nMali\nMalta\nMarshall Islands\nMauritania\nMauritius\nMexico\nMicronesia\nMoldova\nMonaco\nMongolia\nMontenegro\nMorocco\nMozambique\nMyanmar (Burma)\nNamibia\nNauru\nNepal\nNetherlands\nNew Zealand\nNicaragua\nNiger\nNigeria\nNorway\nOman\nPakistan\nPalau\nPanama\nPapua New Guinea\nParaguay\nPeru\nPhilippines\nPoland\nPortugal\nQatar\nRomania\nRussian Federation\nRwanda\nSt Kitts \n Nevis\nSt Lucia\nSaint Vincent \n the Grenadines\nSamoa\nSan Marino\nSao Tome \n Principe\nSaudi Arabia\nSenegal\nSerbia\nSeychelles\nSierra Leone\nSingapore\nSlovakia\nSlovenia\nSolomon Islands\nSomalia\nSouth Africa\nSouth Sudan\nSpain\nSri Lanka\nSudan\nSuriname\nSwaziland\nSweden\nSwitzerland\nSyria\nTaiwan\nTajikistan\nTanzania\nThailand\nTogo\nTonga\nTrinidad \n Tobago\nTunisia\nTurkey\nTurkmenistan\nTuvalu\nUganda\nUkraine\nUnited Arab Emirates\nUnited Kingdom\nUnited States\nUruguay\nUzbekistan\nVanuatu\nVatican City\nVenezuela\nVietnam\nYemen\nZambia\nZimbabwe", 
            "title": "Lab3"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/lab3/#form-with-arrays-checkboxes-select-menu", 
            "text": "Create a registration form for a random website, and a php script where it is submitted (2 separate scripts). You will probably also want a third script that contains the common arrays to be  included  by both the form and the submit script.  The registration form must have the following functionality (feel free to change):   asks the user for their name in  textboxes  asks for the gender with  radio  buttons  asks for interests with  checkboxes  and 8 or so random interests (you can choose any interests. No inspiration? Here are some:    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 ?php  $interests   =   [ \n     poker , \n     chess , \n     checkers , \n     dominoes , \n     solitaire , \n     rummy , \n     risk , \n     settlers of catan  ];  ?     asks for location with  select  menus for country. I provided a text file of 196 countries (I hope they all still exist ) in Countries.txt;   The second PHP script is where the form is submitted. Validate all the data entered; if valid, welcome the user by echoing their information along with a count of their selected interests, and display the selections in alphabetical order (see last note below).  If the entries are invalid, indicate which field is incorrect (perhaps with different styling?).", 
            "title": "Form with arrays, checkboxes, select menu"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/lab3/#note", 
            "text": "use the  $_GET  or  $_POST  superglobal arrays  pen the text file like we did last lab. Note that this file has 196 countries on separate lines. So open the file like last lab, loop through and put each line as the next element in the array using the  []  syntax. Note that you will have to  trim  each line you read from the file to remove the additional white space characters at the end of each line.  remember to check to make sure that the checkbox array is a subset of all the potential interests with the  array_diff function.  To make sure the location is within the array of countries, use  in_array  function. Recall that in_array looks for values in an array; we would use  isset  to check if a key existed in an array.  Make sure you look at the  sort  function syntax when displaying the interest selections in alphabetical order!!   Save the form, the handling script and the common array file to include within  PHPCode\\labs\\lab3 , all within the same project if you use an IDE. The form will be  index.php .", 
            "title": "Note"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/lab3/#countriestxt", 
            "text": "Use the following:   1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196 Afghanistan\nAlbania\nAlgeria\nAndorra\nAngola\nAntigua   Deps\nArgentina\nArmenia\nAustralia\nAustria\nAzerbaijan\nBahamas\nBahrain\nBangladesh\nBarbados\nBelarus\nBelgium\nBelize\nBenin\nBhutan\nBolivia\nBosnia   Herzegovina\nBotswana\nBrazil\nBrunei\nBulgaria\nBurkina\nBurundi\nCambodia\nCameroon\nCanada\nCape Verde\nCentral African Rep\nChad\nChile\nChina\nColombia\nComoros\nCongo\nCongo {Democratic Rep}\nCosta Rica\nCroatia\nCuba\nCyprus\nCzech Republic\nDenmark\nDjibouti\nDominica\nDominican Republic\nEast Timor\nEcuador\nEgypt\nEl Salvador\nEquatorial Guinea\nEritrea\nEstonia\nEthiopia\nFiji\nFinland\nFrance\nGabon\nGambia\nGeorgia\nGermany\nGhana\nGreece\nGrenada\nGuatemala\nGuinea\nGuinea-Bissau\nGuyana\nHaiti\nHonduras\nHungary\nIceland\nIndia\nIndonesia\nIran\nIraq\nIreland {Republic}\nIsrael\nItaly\nIvory Coast\nJamaica\nJapan\nJordan\nKazakhstan\nKenya\nKiribati\nKorea North\nKorea South\nKosovo\nKuwait\nKyrgyzstan\nLaos\nLatvia\nLebanon\nLesotho\nLiberia\nLibya\nLiechtenstein\nLithuania\nLuxembourg\nMacedonia\nMadagascar\nMalawi\nMalaysia\nMaldives\nMali\nMalta\nMarshall Islands\nMauritania\nMauritius\nMexico\nMicronesia\nMoldova\nMonaco\nMongolia\nMontenegro\nMorocco\nMozambique\nMyanmar (Burma)\nNamibia\nNauru\nNepal\nNetherlands\nNew Zealand\nNicaragua\nNiger\nNigeria\nNorway\nOman\nPakistan\nPalau\nPanama\nPapua New Guinea\nParaguay\nPeru\nPhilippines\nPoland\nPortugal\nQatar\nRomania\nRussian Federation\nRwanda\nSt Kitts   Nevis\nSt Lucia\nSaint Vincent   the Grenadines\nSamoa\nSan Marino\nSao Tome   Principe\nSaudi Arabia\nSenegal\nSerbia\nSeychelles\nSierra Leone\nSingapore\nSlovakia\nSlovenia\nSolomon Islands\nSomalia\nSouth Africa\nSouth Sudan\nSpain\nSri Lanka\nSudan\nSuriname\nSwaziland\nSweden\nSwitzerland\nSyria\nTaiwan\nTajikistan\nTanzania\nThailand\nTogo\nTonga\nTrinidad   Tobago\nTunisia\nTurkey\nTurkmenistan\nTuvalu\nUganda\nUkraine\nUnited Arab Emirates\nUnited Kingdom\nUnited States\nUruguay\nUzbekistan\nVanuatu\nVatican City\nVenezuela\nVietnam\nYemen\nZambia\nZimbabwe", 
            "title": "countries.txt"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/lab4/", 
            "text": "Lab 4a - Sticky form with template and functions\n\n\nRevisit your form from lab 3, making the following changes:\n\n\n\n\n--Combine your form display and handling scripts into a single script (i.e., submit the form back to the same script). This means you no longer need a third script with your arrays.\n\n\n--Modularize with functions. Create functions for data validation!\n\n\n--If the form input is valid, redirect to a second script that simply says Thank you.\n\n\n--If the form is invalid, display a summary of errors, followed by the form. Optional: display the previously entered data\n\n\n--Create a new header template file (header.html.php) that will be included in both display scripts. The header should have the title set through php (i.e., \ntitle\n \n?php $title ?\n \n/title\n. Include it in your form when you are ready to start output.\n\n\n--BONUS: Add javascript validation!!!\n\n\n\n\nLab 4b - Web scraping\n\n\nPart 1\n\n\nWrite a php script that will be invoked from the console (i.e., run from command line with command php script.php ) that will GET a web page (\nhttps://www.dawsoncollege.qc.ca\n), retrieve its contents and store in a string, then print the string. This means you must:\n\n\n\n\nInitialise a cURL handle\n\n\nSet the URL to GET. Make sure that the content is not printed to the console here.\n\n\nExecute the handle\n\n\nClose Curl\n\n\nEcho the string\n\n\n\n\nRemember: cURL is a library of \nfunctions\n!\n\n\nNB: if you notice that your string is actually a \n301 Moved Permanently\n response, you used the wrong URL: make sure it is \nhttps\n!\n\n\n\n\nNote\n\n\nTo invoke the php scrip from command line, you must vagrant ssh into your VM, and cd through the Code folder (mapped to PHPCode) to your file.\n\n\n\n\nPart 2\n\n\nNow take the string of the web page html, and programmatically look for the Dawson College twitter link (in an \n tag with a class dc_twitter \u2013 find the href). Don't use a regex \u2013 it is not the best tool for parsing an HTML (or XML-type) document; a DOM parser is a better tool. Within PHP, the DOM manipulation is supported by a number \nof DOM classes\n. We are interested in the \nDOMDocument\n; you can subsequently use the \nDOMNodeList\n and \nDOMNodes\n to traverse through the tree, or use \nDOMXPath\n to query to get a specific DOMNode in a DOMNodeList.\n\n\nRemember: DOM is a collection of \nclasses\n!\n\n\nSteps:\n\n\n\n\nLoad the HTML string into the DOMDocument using the loadHTML method.\n\n\n\n\n\n\nNote\n\n\nIf the string you are loading has errors (e.g., imperfect markup), you may have a long stream of warning messages when you use the loadHTML method. These warnings will not prevent you from scraping the site. So we usually use the \nerror control operator\n \n@\n : this operator is prefixed before an expression that may cause many warnings (@ operator is affectionately known as the stfu operator \uf04a ). Usage: \n@$domdocument-\nloadHTML($page);\n\n\n\n\n\n\nHow do you know if the website you want to scrape will cause many warnings? Run it through validator.w3.org. (so many errors from the Dawson home page, oh the shame\u2026)\n\n\nOption 1: traversing the DOM tree\n\n\n\n\nquery the DOMDocument to find the appropriate node. Some examples :\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n?php\n\n\n// example 1: to echo the value of all div tags (all tags are stripped)\n\n\n$elements\n \n=\n \n$domdocument\n-\ngetElementsByTagName\n(\ndiv\n);\n\n\nforeach\n \n(\n$elements\n \nas\n \n$item\n)\n\n\necho\n \n$item\n-\nnodeValue\n;\n\n\n\n// example 2: find the element with given id\n\n\n$element\n \n=\n \n$domdocument\n-\ngetElementById\n(\nIdToSearch\n);\n\n\n\n// example 3: to echo the value of all href attributes of a tags\n\n\n$elements\n \n=\n \n$domdocument\n-\ngetElementsByTagName\n(\na\n);\n\n\nforeach\n \n(\n$elements\n \nas\n \n$item\n)\n\n\necho\n \n$item\n-\ngetAttribute\n(\nhref\n);\n\n\n?\n\n\n\n\n\n\n\nThere are many more methods available to help you traverse the DOM! Look through the documentation or give me a shout!\n\n\nOption 2: using Xpath to query\n\n\n\n\nuse XPath selectors (a little bit like JQuery selectors) to find the appropriate DOMNodeList. Some DOMXPath examples (from PHP documentation)(sorry, not my forte!):\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n?php\n\n\n$xpath\n \n=\n \nnew\n \nDOMXpath\n(\n$domdocument\n);\n\n\n\n// example 1: for everything with an id\n\n\n$elements\n \n=\n \n$xpath\n-\nquery\n(\n//*[@id]\n);\n\n\n\n// example 2: for node data in a selected id\n\n\n$elements\n \n=\n \n$xpath\n-\nquery\n(\n/html/body/div[@id=\nIdToSearch\n]\n);\n\n\n\n// example 3: for node data in a selected class with wildcard\n\n\n$elements\n \n=\n \n$xpath\n-\nquery\n(\n*/div[@class=\nClassToSearch\n]\n);\n\n\n?\n\n\n\n\n\n\n\nAn easy way to experiment and learn about XPath is by using Google Chrome Developer tools. Open the tools, browse to a page, look at the Elements -\n right-click on an element of interest and select Copy \u2013 Copy XPath. Paste somewhere and examine!\n\n\nNotes\n\n\n\n\n--DOMNodes/DOMElements are objects. You may be interested in their nodeValue (the string between the \ntag\n \n/tag\n) or in their specific attribute values (using \ngetAttribute('attributeName')\n )\n\n\n--Web scraping is hard-coded to the html document: if the scraped page changes, your scraper won't work. For that reason it is ok to do things like looking for the 1 # st \ntd\n in a \ntable\n with a given id: the number 1, the html tags and the id are all hard-coded.\n\n\n\n\nBTW, this query will look like this with DOM traversal (could by put in a single line of code)\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n?php\n\n\n//find the table\n\n\n\n$table\n \n=\n \n$domdocument\n-\ngetElementById\n(\njaya\n);\n\n\n\n//get the first td\n\n\n\n$td\n \n=\n \n$table\n-\ngetElementsByTagName\n(\ntd\n)\n-\nitem\n(\n0\n)\n-\nnodeValue\n;\n\n\n\nSame\n \nquery\n \nwith\n \nXpath\n:\n\n\n\n$td\n \n=\n \n$xpath\n-\nquery\n(\n//table[@id=\njaya\n]/tr/td\n)\n-\nitem\n(\n0\n)\n-\nnodeValue\n;\n\n\n?", 
            "title": "Lab4"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/lab4/#lab-4a-sticky-form-with-template-and-functions", 
            "text": "Revisit your form from lab 3, making the following changes:   --Combine your form display and handling scripts into a single script (i.e., submit the form back to the same script). This means you no longer need a third script with your arrays.  --Modularize with functions. Create functions for data validation!  --If the form input is valid, redirect to a second script that simply says Thank you.  --If the form is invalid, display a summary of errors, followed by the form. Optional: display the previously entered data  --Create a new header template file (header.html.php) that will be included in both display scripts. The header should have the title set through php (i.e.,  title   ?php $title ?   /title . Include it in your form when you are ready to start output.  --BONUS: Add javascript validation!!!", 
            "title": "Lab 4a - Sticky form with template and functions"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/lab4/#lab-4b-web-scraping", 
            "text": "", 
            "title": "Lab 4b - Web scraping"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/lab4/#part-1", 
            "text": "Write a php script that will be invoked from the console (i.e., run from command line with command php script.php ) that will GET a web page ( https://www.dawsoncollege.qc.ca ), retrieve its contents and store in a string, then print the string. This means you must:   Initialise a cURL handle  Set the URL to GET. Make sure that the content is not printed to the console here.  Execute the handle  Close Curl  Echo the string   Remember: cURL is a library of  functions !  NB: if you notice that your string is actually a  301 Moved Permanently  response, you used the wrong URL: make sure it is  https !   Note  To invoke the php scrip from command line, you must vagrant ssh into your VM, and cd through the Code folder (mapped to PHPCode) to your file.", 
            "title": "Part 1"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/lab4/#part-2", 
            "text": "Now take the string of the web page html, and programmatically look for the Dawson College twitter link (in an   tag with a class dc_twitter \u2013 find the href). Don't use a regex \u2013 it is not the best tool for parsing an HTML (or XML-type) document; a DOM parser is a better tool. Within PHP, the DOM manipulation is supported by a number  of DOM classes . We are interested in the  DOMDocument ; you can subsequently use the  DOMNodeList  and  DOMNodes  to traverse through the tree, or use  DOMXPath  to query to get a specific DOMNode in a DOMNodeList.  Remember: DOM is a collection of  classes !", 
            "title": "Part 2"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/lab4/#steps", 
            "text": "Load the HTML string into the DOMDocument using the loadHTML method.    Note  If the string you are loading has errors (e.g., imperfect markup), you may have a long stream of warning messages when you use the loadHTML method. These warnings will not prevent you from scraping the site. So we usually use the  error control operator   @  : this operator is prefixed before an expression that may cause many warnings (@ operator is affectionately known as the stfu operator \uf04a ). Usage:  @$domdocument- loadHTML($page);    How do you know if the website you want to scrape will cause many warnings? Run it through validator.w3.org. (so many errors from the Dawson home page, oh the shame\u2026)", 
            "title": "Steps:"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/lab4/#option-1-traversing-the-dom-tree", 
            "text": "query the DOMDocument to find the appropriate node. Some examples :    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 ?php  // example 1: to echo the value of all div tags (all tags are stripped)  $elements   =   $domdocument - getElementsByTagName ( div );  foreach   ( $elements   as   $item )  echo   $item - nodeValue ;  // example 2: find the element with given id  $element   =   $domdocument - getElementById ( IdToSearch );  // example 3: to echo the value of all href attributes of a tags  $elements   =   $domdocument - getElementsByTagName ( a );  foreach   ( $elements   as   $item )  echo   $item - getAttribute ( href );  ?    There are many more methods available to help you traverse the DOM! Look through the documentation or give me a shout!", 
            "title": "Option 1: traversing the DOM tree"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/lab4/#option-2-using-xpath-to-query", 
            "text": "use XPath selectors (a little bit like JQuery selectors) to find the appropriate DOMNodeList. Some DOMXPath examples (from PHP documentation)(sorry, not my forte!):    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 ?php  $xpath   =   new   DOMXpath ( $domdocument );  // example 1: for everything with an id  $elements   =   $xpath - query ( //*[@id] );  // example 2: for node data in a selected id  $elements   =   $xpath - query ( /html/body/div[@id= IdToSearch ] );  // example 3: for node data in a selected class with wildcard  $elements   =   $xpath - query ( */div[@class= ClassToSearch ] );  ?    An easy way to experiment and learn about XPath is by using Google Chrome Developer tools. Open the tools, browse to a page, look at the Elements -  right-click on an element of interest and select Copy \u2013 Copy XPath. Paste somewhere and examine!", 
            "title": "Option 2: using Xpath to query"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/lab4/#notes", 
            "text": "--DOMNodes/DOMElements are objects. You may be interested in their nodeValue (the string between the  tag   /tag ) or in their specific attribute values (using  getAttribute('attributeName')  )  --Web scraping is hard-coded to the html document: if the scraped page changes, your scraper won't work. For that reason it is ok to do things like looking for the 1 # st  td  in a  table  with a given id: the number 1, the html tags and the id are all hard-coded.   BTW, this query will look like this with DOM traversal (could by put in a single line of code)   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 ?php  //find the table  $table   =   $domdocument - getElementById ( jaya );  //get the first td  $td   =   $table - getElementsByTagName ( td ) - item ( 0 ) - nodeValue ;  Same   query   with   Xpath :  $td   =   $xpath - query ( //table[@id= jaya ]/tr/td ) - item ( 0 ) - nodeValue ;  ?", 
            "title": "Notes"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/lab5/", 
            "text": "Lab 5 - PHP and Databases\n\n\n(csv file and table specs from\n \nPHP and MySQL practice exercises\n)\n\n\nIn this lab, we will create and populate a database in a command-line application, then perform CRUD operations in a web application.\n\n\nPart 1 \u2013 Create and populate the database and tables\n\n\nUse the vagrant localhost server, with the Postgres database homestead, user homestead and password secret. Write a function within a PHP command-line application that will drop if exists and create a table that represents items. The items table definition:\n\n\n\n\n\n\n\n\nTable Name\n\n\nColumn Name\n\n\nData Type\n\n\nLength\n\n\nComment\n\n\n\n\n\n\n\n\n\n\nitems\n\n\nid\n\n\nint             5\n\n\nprimary key\n\n\n\n\n\n\n\n\nname\n\n\nvarchar        15\n\n\n\n\n\n\n\n\n\n\n\n\ncost\n\n\ndecimal         5\n\n\n2 dec. places\n\n\n\n\n\n\n\n\n\n\n\n\nWrite one or more functions that will load the contents of items.csv (in the S: drive) into the item table. Remember to trim each segment as you read it in.\n\n\nFinally, write the top-level code that will invoke the functions. This application will be invoked from Vagrant command line.\n\n\nPart 2 \u2013 Web application to provide CRUD operations\n\n\nWrite a script called index.php that asks the user to choose between adding a new item, deleting an existing item, updating a given item, or finding an item. These 4 choices can be buttons or links to the 4 other PHP scripts described below.\n\n\nIn the create script: provide a form that asks for the item id, name and cost. When the form is submitted, validate the data types. If all is well, insert a new row. Be sure to take care of the case where the id supplied is already used in the table. If there are any problems, display the form again with the error message. If the create is successful, redirect back to the index.php page, but providing a querystring: index.php?task=create.\n\n\nLet's revisit the index.php script: check if the \n$_GET\n superglobal has a \ntask\n element. If it does, and the value is create, display a message saying \"The item was successfully created\". If the value is \ndelete\n, display \nThe item was successfully deleted\n, and if the value is \nupdate\n, display \nThe item was successfully updated\n.\n\n\nIn the delete script: \n\n\n\n\nprovide a form that asks for the item id. \n\n\nWhen the form is submitted, validate the data type. If all is well, delete the matching row. \n\n\nBe sure to take care of the case where the id supplied is not used in the table. If there are any problems, display the form again with the error message. \n\n\nIf the delete is successful, redirect back to the \nindex.php\n page, but providing a querystring: \nindex.php?task=delete\n.\n\n\n\n\nThe update script is similar to the create script, except that an existing row is updated based on the provided item id.\n\n\nFinally, the find script provides a form that asks for the name, searches through the database looking names that are like the provided name, and displaying the top 10 matches.", 
            "title": "Lab5"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/lab5/#lab-5-php-and-databases", 
            "text": "(csv file and table specs from   PHP and MySQL practice exercises )  In this lab, we will create and populate a database in a command-line application, then perform CRUD operations in a web application.", 
            "title": "Lab 5 - PHP and Databases"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/lab5/#part-1-create-and-populate-the-database-and-tables", 
            "text": "Use the vagrant localhost server, with the Postgres database homestead, user homestead and password secret. Write a function within a PHP command-line application that will drop if exists and create a table that represents items. The items table definition:     Table Name  Column Name  Data Type  Length  Comment      items  id  int             5  primary key     name  varchar        15       cost  decimal         5  2 dec. places       Write one or more functions that will load the contents of items.csv (in the S: drive) into the item table. Remember to trim each segment as you read it in.  Finally, write the top-level code that will invoke the functions. This application will be invoked from Vagrant command line.", 
            "title": "Part 1 \u2013 Create and populate the database and tables"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/lab5/#part-2-web-application-to-provide-crud-operations", 
            "text": "Write a script called index.php that asks the user to choose between adding a new item, deleting an existing item, updating a given item, or finding an item. These 4 choices can be buttons or links to the 4 other PHP scripts described below.  In the create script: provide a form that asks for the item id, name and cost. When the form is submitted, validate the data types. If all is well, insert a new row. Be sure to take care of the case where the id supplied is already used in the table. If there are any problems, display the form again with the error message. If the create is successful, redirect back to the index.php page, but providing a querystring: index.php?task=create.  Let's revisit the index.php script: check if the  $_GET  superglobal has a  task  element. If it does, and the value is create, display a message saying \"The item was successfully created\". If the value is  delete , display  The item was successfully deleted , and if the value is  update , display  The item was successfully updated .  In the delete script:    provide a form that asks for the item id.   When the form is submitted, validate the data type. If all is well, delete the matching row.   Be sure to take care of the case where the id supplied is not used in the table. If there are any problems, display the form again with the error message.   If the delete is successful, redirect back to the  index.php  page, but providing a querystring:  index.php?task=delete .   The update script is similar to the create script, except that an existing row is updated based on the provided item id.  Finally, the find script provides a form that asks for the name, searches through the database looking names that are like the provided name, and displaying the top 10 matches.", 
            "title": "Part 2 \u2013 Web application to provide CRUD operations"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/lab6/", 
            "text": "Lab 6 - Object-oriented PHP\n\n\n(partially inspired from a \nJava assignment\n from Seneca College and converted to PHP)\n\n\nIn this assignment, we will build an Object-Oriented payroll system. We will have an Employee class and a Payroll class, along with a DAO interface and concrete class, and application scripts! Read through the entire lab first, then get ready to code!\n\n\nPart 1  Create tables\n\n\nCreate tables in your Postgres database on homestead, preferably through a PHP script so that you can recreate the next time you are in the lab. Here is a link to the PostGres \ndatatypes\n as well as the syntax for primary and foreign key \nconstraints\n.\n\n\nCreate payroll and employee tables with the following columns and obvious data types:\n\n\nPayroll table\n\n1\n2\nid (SERIAL primary key)\nname\n\n\n\n\nCreate a default payroll record with name \"Not being paid\". It should have id 1 since it is the first in the sequence.\n\n\nEmployee table:\n\n1\n2\n3\n4\n5\nid (SERIAL primary key)\nfirstname\nemail\nsalary\npayrollId (default value 1, foreign key to payroll)\n\n\n\n\n\nPart 2 \u2013 The transfer objects\n\n\nWe will write two classes to represent the rows in the two tables.\n\n\nWrite a PHP class called Payroll. The constructor takes the payroll\u2019s name (e.g., \"Tutors\") and id (default value of 0). It provides the public methods \ngetName\n and \ngetId\n.\n\n\nWrite a PHP class called Employee. When an Employee object is created, it is provided a name, an email address, a Payroll object, and base monthly salary. The constructor\u2019s default values are empty strings, null and 0. \n\n\nPublic methods: \n* \nsetFirstName\n, \nsetEmail\n, \nsetPayroll\n, \nsetSalary\n, \n* \ngetFirstName\n, \ngetEmail\n, \ngetSalary\n, \ngetPayroll\n, \n* \n__toString\n. \n\n\nNotes\n\n\nValidate input passed to the constructor. If a null reference is passed into a constructor, or a negative salary throw an InvalidArgumentException.\n\n\nThe exception is Payroll, which can remain null.\nin each setter, validate the data. \n\n\n\n\nNote\n\n\nWrite a separate private method used by both the constructor and the setter that performs data validation\n\n\n\n\nThe salary should only have two decimal digits. Use the PHP function \nround\n to 2 decimal digit precision with \nPHP_ROUND_HALF_EVEN\n mode.\n\n\nPart 3 - Write the Data Access layer (DAO interface and concrete class)\n\n\nWrite a DAO interface and a concrete class which implements the interface with all the CRUD-type methods that will be required by the business objects (read about their functionality in Part 4 below). \n\n\nNotice that Delete methods are optional, since they are not required by the business class. We use an interface in order to have our business class coded to interfaces, not implementation (i.e., concrete classes). \n\n\nSome of the methods defined in the interface (return type indicated for your information only)\n\n\n\n\naddEmployee(Employee e) //e\u2019s id will be changed to reflect the id in the database\n\n\nbool updateEmployee(Employee e) //true if successful (i.e., existing Employee)\n\n\nEmployee getEmployee(int id)\n\n\nEmployee[] getEmployees(Payroll p) //concrete class give default value of null: if null, an array with all employees is returned\n\n\nint countEmployees(Payroll p) //concrete class give default value of null: if null, all employees are returned\n\n\naddPayroll(Payroll p) //p\u2019s id will be changed to reflect the id in the database\n\n\nPayroll getPayroll(int id)\n\n\nPayroll[] getPayrolls()\n\n\n\n\nPart 4 \u2013 PayrollSystem class\n\n\nWrite a PayrollSystem class that functions as the business object. It has a constructor which gets a handle to an object that implements the DAO interface. We pass it a DAO instance in the constructor, instead of the constructor creating its own: dependency injection makes unit testing much easier, since you can use a stub/mock instead of the real concrete class.\n\n\nYou must implement the following methods: \n* \nint size(payrollid)\n, \n* \nEmployee addEmployee(firstname, email, salary, payrollid)\n, \n* \nbool removeEmployee(Employee emp)\n, \n* \nPayroll addPayroll(name)\n,\n* \nEmployee[] getEmployees(payrollid)\n. \n\n\nThe size method returns the total number of employees on that payroll. \n\n\nThe \naddEmployee()\n method returns false if the employee is already on the given payroll. If not, it adds an employee to the database and returns the Employee. The method makes sure that an employee may occur at most once on the given payroll. \n\n\nThe \naddPayroll\n method works in a similar fashion.\n\nremoveEmployee()\n will change the employee\u2019s payroll id back to 0 (i.e., the \"not being paid\" Payroll object, it doesn\u2019t delete the Employee from the table).\n\n\ngetEmployees\n returns an array of \nEmployees\n with the given payrollid.\n\n\nPart 6 \u2013 Application UI Requirements\n\n\nWrite a PHP script that give the administrator the option of:\n* creating a new Payroll\n* creating a new Employee (ask for payroll id in the form)\n* displaying all Employees in a given Payroll\n\n\nIf the user chooses the first option, display the Payroll information is successful, else redisplay the form.\n\n\nIf the user chooses the second option, use the payroll id to get the Payroll object to create and save the Employee.\n\n\nIn the last option, display a summary for all the employees in that payroll. The information of an employee will be displayed in two lines with name and salary. Here is an example for the payroll summary of four employees: \n\n1\n2\n3\n4\n5\n6\n7\n8\nname: John Doe\ntotal: $5235.99\nname: Mark Sloan\ntotal: $5678.00\nname: Joyce Hughs\ntotal: $7876.99\nname: Josh Gosling\ntotal: $2000.00", 
            "title": "Lab6"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/lab6/#lab-6-object-oriented-php", 
            "text": "(partially inspired from a  Java assignment  from Seneca College and converted to PHP)  In this assignment, we will build an Object-Oriented payroll system. We will have an Employee class and a Payroll class, along with a DAO interface and concrete class, and application scripts! Read through the entire lab first, then get ready to code!", 
            "title": "Lab 6 - Object-oriented PHP"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/lab6/#part-1-create-tables", 
            "text": "Create tables in your Postgres database on homestead, preferably through a PHP script so that you can recreate the next time you are in the lab. Here is a link to the PostGres  datatypes  as well as the syntax for primary and foreign key  constraints .  Create payroll and employee tables with the following columns and obvious data types:  Payroll table 1\n2 id (SERIAL primary key)\nname  \nCreate a default payroll record with name \"Not being paid\". It should have id 1 since it is the first in the sequence.  Employee table: 1\n2\n3\n4\n5 id (SERIAL primary key)\nfirstname\nemail\nsalary\npayrollId (default value 1, foreign key to payroll)", 
            "title": "Part 1  Create tables"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/lab6/#part-2-the-transfer-objects", 
            "text": "We will write two classes to represent the rows in the two tables.  Write a PHP class called Payroll. The constructor takes the payroll\u2019s name (e.g., \"Tutors\") and id (default value of 0). It provides the public methods  getName  and  getId .  Write a PHP class called Employee. When an Employee object is created, it is provided a name, an email address, a Payroll object, and base monthly salary. The constructor\u2019s default values are empty strings, null and 0.   Public methods: \n*  setFirstName ,  setEmail ,  setPayroll ,  setSalary , \n*  getFirstName ,  getEmail ,  getSalary ,  getPayroll , \n*  __toString .", 
            "title": "Part 2 \u2013 The transfer objects"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/lab6/#notes", 
            "text": "Validate input passed to the constructor. If a null reference is passed into a constructor, or a negative salary throw an InvalidArgumentException.  The exception is Payroll, which can remain null.\nin each setter, validate the data.    Note  Write a separate private method used by both the constructor and the setter that performs data validation   The salary should only have two decimal digits. Use the PHP function  round  to 2 decimal digit precision with  PHP_ROUND_HALF_EVEN  mode.", 
            "title": "Notes"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/lab6/#part-3-write-the-data-access-layer-dao-interface-and-concrete-class", 
            "text": "Write a DAO interface and a concrete class which implements the interface with all the CRUD-type methods that will be required by the business objects (read about their functionality in Part 4 below).   Notice that Delete methods are optional, since they are not required by the business class. We use an interface in order to have our business class coded to interfaces, not implementation (i.e., concrete classes).   Some of the methods defined in the interface (return type indicated for your information only)   addEmployee(Employee e) //e\u2019s id will be changed to reflect the id in the database  bool updateEmployee(Employee e) //true if successful (i.e., existing Employee)  Employee getEmployee(int id)  Employee[] getEmployees(Payroll p) //concrete class give default value of null: if null, an array with all employees is returned  int countEmployees(Payroll p) //concrete class give default value of null: if null, all employees are returned  addPayroll(Payroll p) //p\u2019s id will be changed to reflect the id in the database  Payroll getPayroll(int id)  Payroll[] getPayrolls()", 
            "title": "Part 3 - Write the Data Access layer (DAO interface and concrete class)"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/lab6/#part-4-payrollsystem-class", 
            "text": "Write a PayrollSystem class that functions as the business object. It has a constructor which gets a handle to an object that implements the DAO interface. We pass it a DAO instance in the constructor, instead of the constructor creating its own: dependency injection makes unit testing much easier, since you can use a stub/mock instead of the real concrete class.  You must implement the following methods: \n*  int size(payrollid) , \n*  Employee addEmployee(firstname, email, salary, payrollid) , \n*  bool removeEmployee(Employee emp) , \n*  Payroll addPayroll(name) ,\n*  Employee[] getEmployees(payrollid) .   The size method returns the total number of employees on that payroll.   The  addEmployee()  method returns false if the employee is already on the given payroll. If not, it adds an employee to the database and returns the Employee. The method makes sure that an employee may occur at most once on the given payroll.   The  addPayroll  method works in a similar fashion. removeEmployee()  will change the employee\u2019s payroll id back to 0 (i.e., the \"not being paid\" Payroll object, it doesn\u2019t delete the Employee from the table).  getEmployees  returns an array of  Employees  with the given payrollid.", 
            "title": "Part 4 \u2013 PayrollSystem class"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/lab6/#part-6-application-ui-requirements", 
            "text": "Write a PHP script that give the administrator the option of:\n* creating a new Payroll\n* creating a new Employee (ask for payroll id in the form)\n* displaying all Employees in a given Payroll  If the user chooses the first option, display the Payroll information is successful, else redisplay the form.  If the user chooses the second option, use the payroll id to get the Payroll object to create and save the Employee.  In the last option, display a summary for all the employees in that payroll. The information of an employee will be displayed in two lines with name and salary. Here is an example for the payroll summary of four employees:  1\n2\n3\n4\n5\n6\n7\n8 name: John Doe\ntotal: $5235.99\nname: Mark Sloan\ntotal: $5678.00\nname: Joyce Hughs\ntotal: $7876.99\nname: Josh Gosling\ntotal: $2000.00", 
            "title": "Part 6 \u2013 Application UI Requirements"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/lab7/", 
            "text": "Large DBs, Pagination, AJAX\n\n\nIn academia, we often create a database schema and populate the tables with a few dozen fake records. But we should have much more fake data that resembles real data when we are testing our apps. One way of populating our test database is with \nFaker.\n\n\nFaker\n is an open-source php library that lets us specify the different data that we require for many different scenarios. It is available through \nComposer\n; Composer is the open source defacto dependency manager used in PHP. Composer allows you to install packages that you require; Composer uses a json file to list all your project dependencies, and it will find and install them. \nPackagist\n is the package repository used by Composer.\n\n\nOnce we have seeded the database, we will create an application that displays the results using pagination.\n\n\nPart 0 \u2013 OPTIONAL: Solving intermittent 502 Bad Gateway problems\n\n\nDo this part only if you find that you have intermittent 502 Bad Gateway responses from nginx:\n\n\nGo to \n/etc/php/7.1/fpm/pool.d/ , edit www.conf (use sudo nano) and edit the line listen = /run/php/php7.1-fpm.sock to  /var/run/php/php7.1-fpm.sock\n\n\nExit and save the file, then run sudo service php7.1-fpm restart\n\n\nPart 1 \u2013 Install Faker using Composer\n\n\nComposer is already installed in the Homestead Vagrant box.\n\n\nCreate a new lab7 folder for this project in H:/PHPCode/labs\nssh into n Vagrant and:\n\n\n\n\ncd to the lab7 folder\n\n\nwrite the following command:\n\n\ncomposer require fzaninotto/faker\n\n\n\n\nThis will install the latest stable release of Faker in a vendor folder. It will also update a composer.json file so that Composer can track this project dependency.\n\n\nPart 2- Create a table in Postgres\n\n\nCreate a \ncustomer\n table with the following columns and obvious data types in Vagrant:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nid (serial)\nfirstname\nlastname\nemail\nsalary\ncivicnumber\nstreet\ncity\n\n\n\n\n\n\nstate\npostcode (note: this follows the American standard, so leave about 12 char in your db)\n\n\nPart 3 \u2013 Populate the database\n\n\nCreate a class to represent a customer, and a DAO class.\n\n\nWrite a command-line application that uses Faker to seed the database. Faker documentation can be found at \nhttps://packagist.org/packages/fzaninotto/faker\n or \nhttps://github.com/fzaninotto/Faker\n\n\nIn order to use Faker, you need to specify the required files, instantiate a Faker instance through the factory method, and generate data by accessing properties. Code to get an instance:\n\n\n1\n2\n3\n4\n?php\n\n\nrequire\n \nvendor/autoload.php\n;\n  \n//assumes your code is lab7 folder\n\n\n//your other requires or autoload function for Customer and DAO\n\n\n$faker\n \n=\n \nFaker\\Factory\n::\ncreate\n();\n  \n//factory method to get an instance\n\n\n\n\n\n\n\nNote the backslash syntax: this is a qualified class name (Factory) with its namespace (Faker). \n\n\nOnce you have an instance, you generate data by accessing Faker \u201cproperties\u201d and methods. These properties are called \u201cformatters\u201d and are generated random results. Some of the formatters available:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nfirstName //generates a randomly chosen gender American name\nfirstName($gender) //generates an American name, $gender can be \u2018male\u2019 or \u2019female\u2019\nlastName\nemail\nnumberBetween($min, $max)  //random int generator\nrandomFloat($nbMaxDecimals, $min, $max) //random float generator with decimal digits\ndateTimeBetween(\u2018-65 years\u2019, \u2018now\u2019) //DateTime between\nbuildingNumber\nstreetName\ncity\nstateAbbr\npostcode \n\n\n\n\n\n\nUsing Faker:\n\n\n\n\n$faker\n-\nfirstName will return a randomly generated American first name, like \u2018Maynard\u2019.\n\n\n$faker\n-\nstreetName will return a random street name like \u2018Keegan Trail\u2019\n\n\n\n\n\n\nNote\n\n\n\n\n\u200b   The random numbers created by Faker are not any different from random numbers you would create using PHP functions. You\u2019ll notice that the salaries don\u2019t really reflect reality: you would ideally like a function to return a random salary that fit a normal distribution. This post has a nice function to create normalized random numbers. If you use it, be sure to give credit to the author \u263a\n\n\n\u200b   When working with datetime Faker formatters, the result is returned as a DateTime php object. You cannot use a DateTime object directly in an SQL commend (SQL parameters can be strings, int, or null). So you will have to convert the DateTime object into string representation with the date function. The syntax:\n\n\n$stringDate = $datetime-\nformat('Y-m-d H:i:s');\n\n\nIn a loop, generate 10000 Customer objects and save them to the Vagrant database.\n\n\n\n\nNote\n\n\n\n\n\u200b   It may take a few seconds to write the 10000 records into your database. Make sure you write that as a command-line application (not a web application), since we don\u2019t want to have a maximum execution time limit. \n\n\nPart 4: Web application\n\n\nCreate a php script index.php that gives the user a form where they can choose to find customers and display their full names based on:\n- living within a certain state or postcode (allow incomplete postcode entry and use LIKE syntax)\n- salary range\n\n\nYour results page should use pagination (20 results / page) and display the entire customer record, sorted alphabetically by name.\n\n\nPart 5: Ajax application (if it has been covered in class, otherwise do it next week!)\n\n\nNow create an html file name.html. Within name.html (or a linked js file), write a Javascript script that makes an AJAX GET request to ajax.php on every key up event in the text box, and display the records that are returned. In other words, when the user enters the first letters in a lastname, the PHP response provides all employees whose lastname starts with the given letters. \n\n\n\n\n\n\nMake sure that your form is not submitting - simply don\u2019t use a FORM tag just a text input field. \n\n\nYour ajax.php script should send back an array of Customers using JSON encoding. Here are some (untested) pseudo-code snippets:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n?php\n\n\n//build the array of objects in a DAO class\n\n\n$response\n=\nnull\n;\n  \n//to initialize\n\n\n\n//create a prepared statement\n\n\n\n//Add the following line so the fetch mode is into a Customer object\n\n\n$stmt\n-\nsetFetchMode\n(\nPDO\n::\nFETCH_CLASS\n|\nPDO\n::\nFETCH_PROPS_LATE\n,\n \n\u2018Customer\u2019\n);\n\n\n\n//execute the statement\n\n\n$response\n \n=\n \n$stmt\n-\nfetchAll\n();\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\u200b   You will be able to fetch into an object only if the class\u2019s properties have the same names as the columns. If not, use aliases in your SQL query or fetch as an associated array\n\n\n\n\nTip\n\n\n\n\n\u200b   You can only json encode public attributes. In order not to lose all encapsulation, make the Customer class implement JsonSerializable, and add a jsonSerialize() function that returns an associative array with the attributes that you want to serialize. \n\n\nFor example, if I just want the firstname and lastname attributes:\n\n\n1\n2\n3\n4\n5\n6\nfunction jsonSerialize() {\n    return [\n        \nfirstname\n =\n $this-\nfirstname,\n        \nlastname\n =\n $this-\nlastname\n    ];\n}\n\n\n\n\n\n\nThe SQL LIKE query with wildcards is tricky in a prepared statement because of the wildcard needing to be appended. You must use bindValue if you are not passing by reference (e.g., passing a calculated value or a literal, nor a direct variable):\n\n\n1\n2\n3\n?php\n\n\n$stmt\n \n=\n \n$dbh\n-\nprepare\n(\nSELECT * FROM `customer` WHERE `lastname` LIKE :lastname\n);\n\n\n$stmt\n-\nbindValue\n(\n:lastname\n,\n \n$lastname\n \n.\n \n%\n);\n\n\n\n\n\n\n\nFinally, since ajax.php is sending back json, not html as the HTTP response message body, you need to first set the content type, before echoing the json:\n\n\n1\n2\n3\n4\n?php\n\n\nheader\n(\nContent-Type: application/json\n);\n\n\n//echo the json \n\n\necho\n \njson_encode\n(\n$response\n);\n\n\n\n\n\n\n\nIn JS, you will need to iterate through the json data. \n//first convert resultText into a JSON object jsonArr\n\n\n1\n2\n3\n4\n5\n//if the jsonArr is not null\n\n\nfor\n(\nvar\n \ni\n \n=\n \n0\n;\n \ni\n \n \njsonArr\n.\nlength\n;\n \ni\n++\n)\n \n{\n\n\n\n//do something with jsonArr[i] object\n\n\n}\n\n\n\n\n\n\n\nOnce you get the resultText in JS, you will have to display the data in a table. In pure JS, you would use something like innerHTML. With JQuery, you would use\n.html(htmlString)\nfunction to set the HTML contents in your div/table. Note that you\u2019ll have an easier time clearing and rebuilding the table if you use a \ntbody\n tag.\n\n\n\n\nWarning\n\n\n\n\n\u200b   Debugging php when it is sending JSON or XML is tricky since any error message gets written into the JSON/XML and is not shown on the browser. The browser developer tools are your best friends \n ! Learn how to put breakpoint in your JS code (this is very helpful in debugging JS, much better than alerts!)  and how to look at the http messages going back and forth.", 
            "title": "Lab7"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/lab7/#large-dbs-pagination-ajax", 
            "text": "In academia, we often create a database schema and populate the tables with a few dozen fake records. But we should have much more fake data that resembles real data when we are testing our apps. One way of populating our test database is with  Faker.  Faker  is an open-source php library that lets us specify the different data that we require for many different scenarios. It is available through  Composer ; Composer is the open source defacto dependency manager used in PHP. Composer allows you to install packages that you require; Composer uses a json file to list all your project dependencies, and it will find and install them.  Packagist  is the package repository used by Composer.  Once we have seeded the database, we will create an application that displays the results using pagination.", 
            "title": "Large DBs, Pagination, AJAX"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/lab7/#part-0-optional-solving-intermittent-502-bad-gateway-problems", 
            "text": "Do this part only if you find that you have intermittent 502 Bad Gateway responses from nginx:  Go to  /etc/php/7.1/fpm/pool.d/ , edit www.conf (use sudo nano) and edit the line listen = /run/php/php7.1-fpm.sock to  /var/run/php/php7.1-fpm.sock  Exit and save the file, then run sudo service php7.1-fpm restart", 
            "title": "Part 0 \u2013 OPTIONAL: Solving intermittent 502 Bad Gateway problems"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/lab7/#part-1-install-faker-using-composer", 
            "text": "Composer is already installed in the Homestead Vagrant box.  Create a new lab7 folder for this project in H:/PHPCode/labs\nssh into n Vagrant and:   cd to the lab7 folder  write the following command:  composer require fzaninotto/faker   This will install the latest stable release of Faker in a vendor folder. It will also update a composer.json file so that Composer can track this project dependency.", 
            "title": "Part 1 \u2013 Install Faker using Composer"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/lab7/#part-2-create-a-table-in-postgres", 
            "text": "Create a  customer  table with the following columns and obvious data types in Vagrant:  1\n2\n3\n4\n5\n6\n7\n8 id (serial)\nfirstname\nlastname\nemail\nsalary\ncivicnumber\nstreet\ncity   state\npostcode (note: this follows the American standard, so leave about 12 char in your db)", 
            "title": "Part 2- Create a table in Postgres"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/lab7/#part-3-populate-the-database", 
            "text": "Create a class to represent a customer, and a DAO class.  Write a command-line application that uses Faker to seed the database. Faker documentation can be found at  https://packagist.org/packages/fzaninotto/faker  or  https://github.com/fzaninotto/Faker  In order to use Faker, you need to specify the required files, instantiate a Faker instance through the factory method, and generate data by accessing properties. Code to get an instance:  1\n2\n3\n4 ?php  require   vendor/autoload.php ;    //assumes your code is lab7 folder  //your other requires or autoload function for Customer and DAO  $faker   =   Faker\\Factory :: create ();    //factory method to get an instance    Note the backslash syntax: this is a qualified class name (Factory) with its namespace (Faker).   Once you have an instance, you generate data by accessing Faker \u201cproperties\u201d and methods. These properties are called \u201cformatters\u201d and are generated random results. Some of the formatters available:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 firstName //generates a randomly chosen gender American name\nfirstName($gender) //generates an American name, $gender can be \u2018male\u2019 or \u2019female\u2019\nlastName\nemail\nnumberBetween($min, $max)  //random int generator\nrandomFloat($nbMaxDecimals, $min, $max) //random float generator with decimal digits\ndateTimeBetween(\u2018-65 years\u2019, \u2018now\u2019) //DateTime between\nbuildingNumber\nstreetName\ncity\nstateAbbr\npostcode", 
            "title": "Part 3 \u2013 Populate the database"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/lab7/#using-faker", 
            "text": "$faker - firstName will return a randomly generated American first name, like \u2018Maynard\u2019.  $faker - streetName will return a random street name like \u2018Keegan Trail\u2019    Note   \u200b   The random numbers created by Faker are not any different from random numbers you would create using PHP functions. You\u2019ll notice that the salaries don\u2019t really reflect reality: you would ideally like a function to return a random salary that fit a normal distribution. This post has a nice function to create normalized random numbers. If you use it, be sure to give credit to the author \u263a  \u200b   When working with datetime Faker formatters, the result is returned as a DateTime php object. You cannot use a DateTime object directly in an SQL commend (SQL parameters can be strings, int, or null). So you will have to convert the DateTime object into string representation with the date function. The syntax:  $stringDate = $datetime- format('Y-m-d H:i:s');  In a loop, generate 10000 Customer objects and save them to the Vagrant database.   Note   \u200b   It may take a few seconds to write the 10000 records into your database. Make sure you write that as a command-line application (not a web application), since we don\u2019t want to have a maximum execution time limit.", 
            "title": "Using Faker:"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/lab7/#part-4-web-application", 
            "text": "Create a php script index.php that gives the user a form where they can choose to find customers and display their full names based on:\n- living within a certain state or postcode (allow incomplete postcode entry and use LIKE syntax)\n- salary range  Your results page should use pagination (20 results / page) and display the entire customer record, sorted alphabetically by name.", 
            "title": "Part 4: Web application"
        }, 
        {
            "location": "/Internet-App-Dev-III/labs/lab7/#part-5-ajax-application-if-it-has-been-covered-in-class-otherwise-do-it-next-week", 
            "text": "Now create an html file name.html. Within name.html (or a linked js file), write a Javascript script that makes an AJAX GET request to ajax.php on every key up event in the text box, and display the records that are returned. In other words, when the user enters the first letters in a lastname, the PHP response provides all employees whose lastname starts with the given letters.     Make sure that your form is not submitting - simply don\u2019t use a FORM tag just a text input field.   Your ajax.php script should send back an array of Customers using JSON encoding. Here are some (untested) pseudo-code snippets:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 ?php  //build the array of objects in a DAO class  $response = null ;    //to initialize  //create a prepared statement  //Add the following line so the fetch mode is into a Customer object  $stmt - setFetchMode ( PDO :: FETCH_CLASS | PDO :: FETCH_PROPS_LATE ,   \u2018Customer\u2019 );  //execute the statement  $response   =   $stmt - fetchAll ();     Tip   \u200b   You will be able to fetch into an object only if the class\u2019s properties have the same names as the columns. If not, use aliases in your SQL query or fetch as an associated array   Tip   \u200b   You can only json encode public attributes. In order not to lose all encapsulation, make the Customer class implement JsonSerializable, and add a jsonSerialize() function that returns an associative array with the attributes that you want to serialize.   For example, if I just want the firstname and lastname attributes:  1\n2\n3\n4\n5\n6 function jsonSerialize() {\n    return [\n         firstname  =  $this- firstname,\n         lastname  =  $this- lastname\n    ];\n}   The SQL LIKE query with wildcards is tricky in a prepared statement because of the wildcard needing to be appended. You must use bindValue if you are not passing by reference (e.g., passing a calculated value or a literal, nor a direct variable):  1\n2\n3 ?php  $stmt   =   $dbh - prepare ( SELECT * FROM `customer` WHERE `lastname` LIKE :lastname );  $stmt - bindValue ( :lastname ,   $lastname   .   % );    Finally, since ajax.php is sending back json, not html as the HTTP response message body, you need to first set the content type, before echoing the json:  1\n2\n3\n4 ?php  header ( Content-Type: application/json );  //echo the json   echo   json_encode ( $response );    In JS, you will need to iterate through the json data. \n//first convert resultText into a JSON object jsonArr  1\n2\n3\n4\n5 //if the jsonArr is not null  for ( var   i   =   0 ;   i     jsonArr . length ;   i ++ )   {  //do something with jsonArr[i] object  }    Once you get the resultText in JS, you will have to display the data in a table. In pure JS, you would use something like innerHTML. With JQuery, you would use .html(htmlString) function to set the HTML contents in your div/table. Note that you\u2019ll have an easier time clearing and rebuilding the table if you use a  tbody  tag.   Warning   \u200b   Debugging php when it is sending JSON or XML is tricky since any error message gets written into the JSON/XML and is not shown on the browser. The browser developer tools are your best friends   ! Learn how to put breakpoint in your JS code (this is very helpful in debugging JS, much better than alerts!)  and how to look at the http messages going back and forth.", 
            "title": "Part 5: Ajax application (if it has been covered in class, otherwise do it next week!)"
        }, 
        {
            "location": "/Internship-Prep/dawson/", 
            "text": "Presenter\n\n\n\n\n4 years CompSci student\n\n\nRepresents IT\n\n\n\n\nTech\n\n\n\n\nWordpress\n\n\nCMS based sites\n\n\nNginx\n\n\nPHP-FPM\n\n\nPlugins have to be up to date\n\n\n\n\nWebsites\n\n\n\n\nSeparated by projects", 
            "title": "Dawson"
        }, 
        {
            "location": "/Internship-Prep/dawson/#presenter", 
            "text": "4 years CompSci student  Represents IT", 
            "title": "Presenter"
        }, 
        {
            "location": "/Internship-Prep/dawson/#tech", 
            "text": "Wordpress  CMS based sites  Nginx  PHP-FPM  Plugins have to be up to date", 
            "title": "Tech"
        }, 
        {
            "location": "/Internship-Prep/dawson/#websites", 
            "text": "Separated by projects", 
            "title": "Websites"
        }, 
        {
            "location": "/Mobile-Development/07-03-multiple-screens/", 
            "text": "Android Supporting Multiple Screens\n\n\nOverview\n\n\n\n\nThe target platform for Android Uis are many and varied in sizes and densities.\n\n\nAs of Android 1.6 multiple screen sizes and densities were supported\n\n\nThe idea is to optimise your UI for any device\ns screen without having to design for ALL possibilities\n\n\nTo simplify Android gives us ways to map to various screen densities and sizes\n\n\n\n\nScreen densities\n\n\nTo simplify design Android divided the range of screen densities into a set of generalized densities\n\n\n\n\n\n\n\n\nGeneral size\n\n\nName\n\n\ndpi(ppi)\n\n\nfactor\n\n\n\n\n\n\n\n\n\n\nldpi\n\n\nLow\n\n\n120\n\n\n.75\n\n\n\n\n\n\nmdpi\n\n\nMedium (baseline)\n\n\n160\n\n\n1\n\n\n\n\n\n\nhdpi\n\n\nHigh\n\n\n240\n\n\n1.5\n\n\n\n\n\n\nxhdpi\n\n\nExtra high\n\n\n320\n\n\n2\n\n\n\n\n\n\nxxhdpi\n\n\nExtra extra high\n\n\n480\n\n\n3\n\n\n\n\n\n\nxxxhdpi\n\n\nExtra extra extra high\n\n\n640\n\n\n4\n\n\n\n\n\n\n\n\nGeneral densities\n\n\n\n\nEach generalized density spans a range of real device densities\n\n\n\n\n\n\n\n\n\n\nGeneral size\n\n\nName\n\n\ndpi(ppi)\n\n\nfactor\n\n\n\n\n\n\n\n\n\n\nldpi\n\n\nLow\n\n\n120\n\n\n.75\n\n\n\n\n\n\nmdpi\n\n\nMedium (baseline)\n\n\n160\n\n\n1\n\n\n\n\n\n\nhdp\n\n\nHigh\n\n\n240\n\n\n1.5\n\n\n\n\n\n\nxhdpi\n\n\nExtra high\n\n\n320\n\n\n2\n\n\n\n\n\n\nxxhdpi\n\n\nExtra extra high\n\n\n480\n\n\n3\n\n\n\n\n\n\nxxxhdpi\n\n\nExtra extra extra high\n\n\n640\n\n\n4\n\n\n\n\n\n\n\n\n311dpi screen\n442dpi screen\n\n\nAlternate drawables\n\n\n\n\n\n\nHave alternates for different screen densities for at least the launcher icon.\n\n\nYou want the icon to look good on any density.\n\n\nIf you include other bitmap drawables (.png, .gif, or .jpg and .9.png) you should provide alternates for different densities\n\n\nWhen you create alternates follow a scaling ratio of: 3:4:6:8:12:16\n\n\n\n\n\n\nNote\n\n\nNot only launcher icons (res/mipmap)but any drawable (res/drawable) is to be put in theresource directory appropriate to its density.\n\n\n\n\nShould you have only one image meant for all densities use the default res/drawable directory\n\n\n\n\n\n\n\n\nIcon size in pixels\n\n\nDensity\n\n\nScale\n\n\nResource directory\n\n\n\n\n\n\n\n\n\n\n36x36\n\n\nLow\n\n\n.75\n\n\nres/mipmap-ldpi\n\n\n\n\n\n\n48x48\n\n\nMedium\n\n\n1 (baseline)\n\n\nres/mipmap-mdpi\n\n\n\n\n\n\n72x72\n\n\nHigh\n\n\n1.5\n\n\nres/mipmap-hdpi\n\n\n\n\n\n\n96x96\n\n\nExtra high\n\n\n2\n\n\nres/mipmap-xhdpi\n\n\n\n\n\n\n144x144\n\n\nExtra extra high\n\n\n3\n\n\nres/mipmap-xxhdpi\n\n\n\n\n\n\n192x192\n\n\nExtra extra extrahigh        [\n\n\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\n\nUsing any app let\u2019s give it a custom icon\n\n\nRun the \ngenerator\n to create your own icon\n\n\nDownload the icons and copy them into your app mipmap folder(s)\n\n\nInstall your app, the icon will be your custom icon\n\n\n\n\nScreen sizes\n\n\nSince Android 3.2 size qualifiers are used.  These sizes correspond not to actual screen sizes but to the width and height in dp (density independent pixels) that are available to your activity\u2019s window.\n\n\n\n\n\n\n\n\nScreen configuration\n\n\nQualifier values\n\n\nExamples\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsmallestWidth\n\n\nsw\nN\ndp\n\n\nsw600dp sw720dp\n\n\nSmallest possible width.Regardless of orientation N dps ofwidth are availablefor this UI .MOST USED OPTION\n\n\n\n\n\n\nAvailable screen width\n\n\nw\nN\ndp\n\n\nw720dp w1024dp\n\n\nMinimum available width required.\n\n\n\n\n\n\nAvailable screen height\n\n\nh\nN\ndp\n\n\nH720dp H1024dp\n\n\nMinimum available height required. RARELY USED as mostdevices will scroll vertically only width isrestricted.\n\n\n\n\n\n\n\n\nTypical screen widths\n\n\n\n\n320dp: a typical phone screen (240x320 ldpi, 320x480 mdpi, 480x800 hdpi, etc\n\n\n480dp: a tweener tablet like the Streak (480x800 mdpi\n\n\n600dp: a 7\n tablet (600x1024 mdpi).\n\n\n720dp: a 10\n tablet (720x1280 mdpi, 800x1280 mdpi, etc).\n\n\n\n\nExample configurations\n\n\nShould I need different layouts for small and large displays I would use the following:\n * res/layout/main_activity.xml For handsets (smaller than 600dp available width\n * res/layout-sw600dp/main_activity.xml # For 7\n tablets (600dp wide and bigger)\n * res/layout-sw720dp/main_activity.xml # For 10\n tablets (720dp wide and bigger)\n\n\nFor more examples and information see\n\n\nhttps://developer.android.com/guide/practices/screens_support.html#DeclaringTabletLayouts\n\n\nDeclaringTabletLayouts\n\n\n\nResource Mapping\n\n\n\n\nBuild the application layout through XML configuration files\n\n\nDefine two different XML layouts for two different devices\n\n\nAt runtime, Android detects the current device configuration and loads the appropriate resources for the application\n\n\nNo need to recompile!\n\n\nJust add a new XML file if you need to support a new device\n\n\n\n\n\n\nReferences\n\n\n\n\nhttp://www.vogella.com/tutorials/AndroidDrawables/article.html#xml-drawables\n\n\nhttps://developer.android.com/guide/practices/screens_support.html\n\n\nhttps://developer.android.com/guide/practices/screens_support.html#DeclaringTabletLayouts", 
            "title": "07 03 multiple screens"
        }, 
        {
            "location": "/Mobile-Development/07-03-multiple-screens/#android-supporting-multiple-screens", 
            "text": "", 
            "title": "Android Supporting Multiple Screens"
        }, 
        {
            "location": "/Mobile-Development/07-03-multiple-screens/#overview", 
            "text": "The target platform for Android Uis are many and varied in sizes and densities.  As of Android 1.6 multiple screen sizes and densities were supported  The idea is to optimise your UI for any device s screen without having to design for ALL possibilities  To simplify Android gives us ways to map to various screen densities and sizes", 
            "title": "Overview"
        }, 
        {
            "location": "/Mobile-Development/07-03-multiple-screens/#screen-densities", 
            "text": "To simplify design Android divided the range of screen densities into a set of generalized densities     General size  Name  dpi(ppi)  factor      ldpi  Low  120  .75    mdpi  Medium (baseline)  160  1    hdpi  High  240  1.5    xhdpi  Extra high  320  2    xxhdpi  Extra extra high  480  3    xxxhdpi  Extra extra extra high  640  4", 
            "title": "Screen densities"
        }, 
        {
            "location": "/Mobile-Development/07-03-multiple-screens/#general-densities", 
            "text": "Each generalized density spans a range of real device densities      General size  Name  dpi(ppi)  factor      ldpi  Low  120  .75    mdpi  Medium (baseline)  160  1    hdp  High  240  1.5    xhdpi  Extra high  320  2    xxhdpi  Extra extra high  480  3    xxxhdpi  Extra extra extra high  640  4     311dpi screen\n442dpi screen", 
            "title": "General densities"
        }, 
        {
            "location": "/Mobile-Development/07-03-multiple-screens/#alternate-drawables", 
            "text": "Have alternates for different screen densities for at least the launcher icon.  You want the icon to look good on any density.  If you include other bitmap drawables (.png, .gif, or .jpg and .9.png) you should provide alternates for different densities  When you create alternates follow a scaling ratio of: 3:4:6:8:12:16    Note  Not only launcher icons (res/mipmap)but any drawable (res/drawable) is to be put in theresource directory appropriate to its density.   Should you have only one image meant for all densities use the default res/drawable directory     Icon size in pixels  Density  Scale  Resource directory      36x36  Low  .75  res/mipmap-ldpi    48x48  Medium  1 (baseline)  res/mipmap-mdpi    72x72  High  1.5  res/mipmap-hdpi    96x96  Extra high  2  res/mipmap-xhdpi    144x144  Extra extra high  3  res/mipmap-xxhdpi    192x192  Extra extra extrahigh        [", 
            "title": "Alternate drawables"
        }, 
        {
            "location": "/Mobile-Development/07-03-multiple-screens/#exercise", 
            "text": "Using any app let\u2019s give it a custom icon  Run the  generator  to create your own icon  Download the icons and copy them into your app mipmap folder(s)  Install your app, the icon will be your custom icon", 
            "title": "Exercise"
        }, 
        {
            "location": "/Mobile-Development/07-03-multiple-screens/#screen-sizes", 
            "text": "Since Android 3.2 size qualifiers are used.  These sizes correspond not to actual screen sizes but to the width and height in dp (density independent pixels) that are available to your activity\u2019s window.     Screen configuration  Qualifier values  Examples  Description      smallestWidth  sw N dp  sw600dp sw720dp  Smallest possible width.Regardless of orientation N dps ofwidth are availablefor this UI .MOST USED OPTION    Available screen width  w N dp  w720dp w1024dp  Minimum available width required.    Available screen height  h N dp  H720dp H1024dp  Minimum available height required. RARELY USED as mostdevices will scroll vertically only width isrestricted.", 
            "title": "Screen sizes"
        }, 
        {
            "location": "/Mobile-Development/07-03-multiple-screens/#typical-screen-widths", 
            "text": "320dp: a typical phone screen (240x320 ldpi, 320x480 mdpi, 480x800 hdpi, etc  480dp: a tweener tablet like the Streak (480x800 mdpi  600dp: a 7  tablet (600x1024 mdpi).  720dp: a 10  tablet (720x1280 mdpi, 800x1280 mdpi, etc).", 
            "title": "Typical screen widths"
        }, 
        {
            "location": "/Mobile-Development/07-03-multiple-screens/#example-configurations", 
            "text": "Should I need different layouts for small and large displays I would use the following:\n * res/layout/main_activity.xml For handsets (smaller than 600dp available width\n * res/layout-sw600dp/main_activity.xml # For 7  tablets (600dp wide and bigger)\n * res/layout-sw720dp/main_activity.xml # For 10  tablets (720dp wide and bigger)", 
            "title": "Example configurations"
        }, 
        {
            "location": "/Mobile-Development/07-03-multiple-screens/#for-more-examples-and-information-see", 
            "text": "https://developer.android.com/guide/practices/screens_support.html#DeclaringTabletLayouts  DeclaringTabletLayouts", 
            "title": "For more examples and information see"
        }, 
        {
            "location": "/Mobile-Development/07-03-multiple-screens/#resource-mapping", 
            "text": "Build the application layout through XML configuration files  Define two different XML layouts for two different devices  At runtime, Android detects the current device configuration and loads the appropriate resources for the application  No need to recompile!  Just add a new XML file if you need to support a new device", 
            "title": "Resource Mapping"
        }, 
        {
            "location": "/Mobile-Development/07-03-multiple-screens/#references", 
            "text": "http://www.vogella.com/tutorials/AndroidDrawables/article.html#xml-drawables  https://developer.android.com/guide/practices/screens_support.html  https://developer.android.com/guide/practices/screens_support.html#DeclaringTabletLayouts", 
            "title": "References"
        }, 
        {
            "location": "/Mobile-Development/19-android-content-providers/", 
            "text": "Android Content Providers using built in\n\n\nREST\n\n\n\n\nREpresentational State Transfer (REST)\n\n\nTyping a URL and getting a web page\n\n\nChanging the state of a web server by filling a form and submitting it\n\n\nConsists of clients and servers\n\n\nClients initiate requests\n\n\nServers process requests and return appropriate responses\n\n\nRequests and responses are built around the transfer of representations of resources\n\n\n\n\nREST principles\n\n\nClients are separated from servers by a uniform interface\n\n\n\n\n\n\nClients need not worry about how data is stored on servers\n\n\n\n\nportable client code\n\n\n\n\n\n\n\n\nServers need not worry about the user interface\n \n\n\n\n\nimproves server scalability and makes servers simpler\n\n\n\n\n\n\nStateless\n\n\n\n\nLayered system\n\n\n\n\nA client cannot ordinarily tell whether it is connected directly to the end server, or to an intermediary along the way\n\n\nHence allows for load balancing and shared caches\n\n\n\n\n\n\n\n\nUniform Interface\n\n\n\n\nSimplifies and decouples the architecture\n\n\nEnables the client and the server sides to evolve independently\n\n\n\n\n\n\n\n\nAndroid Processes\n\n\nEach of the .db's are sandboxed in their own application. These dbs can NOT be accessed outside their application context. \n\n\n\n\nTo access or to expose the data in the db, you must use a Content Provider\n\n\n\n\nAndroid Content Providers\n\n\n\n\nA way of sharing data across apps\n  Abstracting data into service\n\n\nThis idea of content providers makes data sources look like REST-enabled data providers such as web sites\n\n\nA content provider is a wrapper around data\n\n\nContent providers supply CRUD methods as needed via URIs\n\n\nA SQLite database on an Android device is an example of a data source that you can encapsulate into a content provider\n\n\nAndroid also has several built-in content providers that encapsulate databases\n\n\nContent providers play a significant role in sharing data between applications\n\n\nThe content providers\u2019 responsibility is to provide an encapsulation mechanism not a data-access mechanism\n\n\nYou\u2019ll need an actual data access mechanism such as SQLite to get to the underlying data sources\n\n\n\n\nAndroid's Built-in Providers\n\n\nThe top-level items are SQLite databases encapsulated as providers\n* Contacts\n* Mediastore\n* Calendar\n* etc.\n\n\nThese SQLite databases typically have an extension of \n.db\n\n\nContent Providers\n\n\n\n\n\n\nA system to access shared data\n\n\nSimilar to a REST web service\n\n\nTo each Content Provider, one or more URIs are assigned in the form:\n\n\n\n\n1\ncontent:\n//\nauthority\n/path\n\n\n\n\n\n\n\n\n\nContacts \n\n\nPeople\n\n\nPhones\n\n\nPhotos\n  \n\n\n\n\n\n\n\n\nhttp://developer.android.com/guide/topics/providers/contacts-provider.html\n\n\n\n\nContacts Content Provider Permissions\n\n\nRequired to use the Contacts content provider. In the manifest\n\n\nRead\n\n\n1\nuses-permission\n \nandroid:name=\nandroid.permission.READ_CONTACTS\n\n\n\n\n\n\n\nWrite\n\n\n1\nuses-permission\n \nandroid:name=\nandroid.permission.WRITE_CONTACTS\n\n\n\n\n\n\n\n\n\nCalendars \n\n\nEvent\n\n\nAttendees\n\n\nReminders\n\n\n\n\nhttps://developer.android.com/guide/topics/providers/calendar-provider.html\n\n\n\n\nCalendar Content Provider Permissions\n\n\nRequired to use the Calendar content provider. In the manifest\n\n\nRead\n\n\nuses-permission android:name=\nandroid.permission.READ_CALENDAR\n\n\nWrite\n\n\nuses-permission android:name=\nandroid.permission.WRITE_CALENDAR\n\n\nMediaStore\n\n\n\n\nAudio\n\n\nAlbums\n\n\nArtists\n\n\nGenres\n\n\nPlaylists\n\n\n\n\n\n\nImages\n\n\nThumbnails\n\n\n\n\n\n\nVideo\n\n\n\n\nNew in API 19 Storage Access Framework \n\n\nhttp://developer.android.com/guide/topics/providers/document-provider.html\n\n\nTo build your own Content Provider\n\n\n\n\nDefine the DB\n\n\nCreate a class that extends android.content.\nContentProvider\n\n\nImplement \nquery()\n, \ninsert()\n, \nupdate()\n, \ndelete()\n\n\nRegister the \nContentProvider\n authority in the manifest\n\n\nExpose the URIs and schema\n\n\nWe will not do this, see the slide deck: diy\n\n\n\n\nTo use a Content Provider (built-in or provided by others)\n\n\n\n\nDiscover the exposed data (schema, URIs)\n\n\nSet the appropriate permission(s) in the manifest, for built content providers in see \nhere\n\n\nGet the URI(s)\n\n\nUsually these are declared as a public constant  inside the content provider class \n\n\nMake a query(or other CRUD), maybe adding some where clauses\n\n\nThe query returns a Cursor \n\n\nNavigate the Cursor\n\n\n\n\nExample: use Contacts, built-in Content Provider\n\n\n\n\nDiscover the exposed \ndata\n\n\nRequest  permission via the manifest\n\n\nQuery the contacts content provider  using the URI\n\n\nContacts information is in the Cursor\n\n\n\n\nContacts: manifest\n\n\nRequest permission:\n\n\n1\nuses-permission\n \nandroid:name=\nandroid.permission.READ_CONTACTS\n\n\n\n\n\n\n\nContacts: Code\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\npublic\n \nvoid\n \nonCreate\n(\nBundle\n \nsavedInstanceState\n)\n \n{\n\n  \nsuper\n.\nonCreate\n(\nsavedInstanceState\n);\n\n  \nsetContentView\n(\nR\n.\nlayout\n.\nmain\n);\n\n  \n// get a cursor all contacts  \n\n  \nCursor\n \ncursor\n \n=\n \ngetContentResolver\n()\n\n     \n.\nquery\n(\nContactsContract\n.\nContacts\n.\nCONTENT_URI\n,\n \n              \nnull\n,\n \nnull\n,\n \nnull\n,\n \nnull\n);\n \n  \n// we could use the cursor with an AdapterView \n adapter\n\n  \n// but here we\nre logging only the Display Name \n\n  \nwhile\n \n(\ncursor\n.\nmoveToNext\n())\n \n{\n \n      \nString\n \ncontactName\n \n=\n \ncursor\n.\ngetString\n(\n\n        \ncursor\n.\ngetColumnIndex\n(\n\n          \nContactsContract\n.\nContacts\n.\nDISPLAY_NAME\n\n        \n)\n\n      \n);\n\n      \nLog\n.\nd\n(\nTAG\n,\n \ncontactName\n);\n\n  \n}\n   \n// while cursor not at end\n\n  \ncursor\n.\nclose\n();\n\n\n}\n \n// onCreate()\n\n\n\n\n\n\n\nContent Providers CRUD methods\n\n\nSee the pdf on moodle for the query method\n\n\nSome details\n here see operations\n\n\nan example app in android training\n\n\nReferences\n\n\nGeneral Content Providers\n\n\nhttp://developer.android.com/guide/topics/providers/content-providers.html\n\n\nContacts Content Provider\n\n\nhttps://developer.android.com/guide/topics/providers/contacts-provider.html\n\n\nhttps://developer.android.com/reference/android/provider/ContactsContract.Contacts.html\n\n\nhttp://www.ibm.com/developerworks/webservices/library/ws-RESTservices/", 
            "title": "19 android content providers"
        }, 
        {
            "location": "/Mobile-Development/19-android-content-providers/#android-content-providers-using-built-in", 
            "text": "", 
            "title": "Android Content Providers using built in"
        }, 
        {
            "location": "/Mobile-Development/19-android-content-providers/#rest", 
            "text": "REpresentational State Transfer (REST)  Typing a URL and getting a web page  Changing the state of a web server by filling a form and submitting it  Consists of clients and servers  Clients initiate requests  Servers process requests and return appropriate responses  Requests and responses are built around the transfer of representations of resources", 
            "title": "REST"
        }, 
        {
            "location": "/Mobile-Development/19-android-content-providers/#rest-principles", 
            "text": "Clients are separated from servers by a uniform interface    Clients need not worry about how data is stored on servers   portable client code     Servers need not worry about the user interface     improves server scalability and makes servers simpler    Stateless   Layered system   A client cannot ordinarily tell whether it is connected directly to the end server, or to an intermediary along the way  Hence allows for load balancing and shared caches     Uniform Interface   Simplifies and decouples the architecture  Enables the client and the server sides to evolve independently", 
            "title": "REST principles"
        }, 
        {
            "location": "/Mobile-Development/19-android-content-providers/#android-processes", 
            "text": "Each of the .db's are sandboxed in their own application. These dbs can NOT be accessed outside their application context.    To access or to expose the data in the db, you must use a Content Provider", 
            "title": "Android Processes"
        }, 
        {
            "location": "/Mobile-Development/19-android-content-providers/#android-content-providers", 
            "text": "A way of sharing data across apps\n  Abstracting data into service  This idea of content providers makes data sources look like REST-enabled data providers such as web sites  A content provider is a wrapper around data  Content providers supply CRUD methods as needed via URIs  A SQLite database on an Android device is an example of a data source that you can encapsulate into a content provider  Android also has several built-in content providers that encapsulate databases  Content providers play a significant role in sharing data between applications  The content providers\u2019 responsibility is to provide an encapsulation mechanism not a data-access mechanism  You\u2019ll need an actual data access mechanism such as SQLite to get to the underlying data sources", 
            "title": "Android Content Providers"
        }, 
        {
            "location": "/Mobile-Development/19-android-content-providers/#androids-built-in-providers", 
            "text": "The top-level items are SQLite databases encapsulated as providers\n* Contacts\n* Mediastore\n* Calendar\n* etc.  These SQLite databases typically have an extension of  .db", 
            "title": "Android's Built-in Providers"
        }, 
        {
            "location": "/Mobile-Development/19-android-content-providers/#content-providers", 
            "text": "A system to access shared data  Similar to a REST web service  To each Content Provider, one or more URIs are assigned in the form:   1 content: // authority /path     Contacts   People  Phones  Photos\n       http://developer.android.com/guide/topics/providers/contacts-provider.html", 
            "title": "Content Providers"
        }, 
        {
            "location": "/Mobile-Development/19-android-content-providers/#contacts-content-provider-permissions", 
            "text": "Required to use the Contacts content provider. In the manifest", 
            "title": "Contacts Content Provider Permissions"
        }, 
        {
            "location": "/Mobile-Development/19-android-content-providers/#read", 
            "text": "1 uses-permission   android:name= android.permission.READ_CONTACTS", 
            "title": "Read"
        }, 
        {
            "location": "/Mobile-Development/19-android-content-providers/#write", 
            "text": "1 uses-permission   android:name= android.permission.WRITE_CONTACTS     Calendars   Event  Attendees  Reminders   https://developer.android.com/guide/topics/providers/calendar-provider.html", 
            "title": "Write"
        }, 
        {
            "location": "/Mobile-Development/19-android-content-providers/#calendar-content-provider-permissions", 
            "text": "Required to use the Calendar content provider. In the manifest", 
            "title": "Calendar Content Provider Permissions"
        }, 
        {
            "location": "/Mobile-Development/19-android-content-providers/#read_1", 
            "text": "uses-permission android:name= android.permission.READ_CALENDAR", 
            "title": "Read"
        }, 
        {
            "location": "/Mobile-Development/19-android-content-providers/#write_1", 
            "text": "uses-permission android:name= android.permission.WRITE_CALENDAR", 
            "title": "Write"
        }, 
        {
            "location": "/Mobile-Development/19-android-content-providers/#mediastore", 
            "text": "Audio  Albums  Artists  Genres  Playlists    Images  Thumbnails    Video   New in API 19 Storage Access Framework   http://developer.android.com/guide/topics/providers/document-provider.html", 
            "title": "MediaStore"
        }, 
        {
            "location": "/Mobile-Development/19-android-content-providers/#to-build-your-own-content-provider", 
            "text": "Define the DB  Create a class that extends android.content. ContentProvider  Implement  query() ,  insert() ,  update() ,  delete()  Register the  ContentProvider  authority in the manifest  Expose the URIs and schema  We will not do this, see the slide deck: diy", 
            "title": "To build your own Content Provider"
        }, 
        {
            "location": "/Mobile-Development/19-android-content-providers/#to-use-a-content-provider-built-in-or-provided-by-others", 
            "text": "Discover the exposed data (schema, URIs)  Set the appropriate permission(s) in the manifest, for built content providers in see  here  Get the URI(s)  Usually these are declared as a public constant  inside the content provider class   Make a query(or other CRUD), maybe adding some where clauses  The query returns a Cursor   Navigate the Cursor", 
            "title": "To use a Content Provider (built-in or provided by others)"
        }, 
        {
            "location": "/Mobile-Development/19-android-content-providers/#example-use-contacts-built-in-content-provider", 
            "text": "Discover the exposed  data  Request  permission via the manifest  Query the contacts content provider  using the URI  Contacts information is in the Cursor", 
            "title": "Example: use Contacts, built-in Content Provider"
        }, 
        {
            "location": "/Mobile-Development/19-android-content-providers/#contacts-manifest", 
            "text": "Request permission:  1 uses-permission   android:name= android.permission.READ_CONTACTS", 
            "title": "Contacts: manifest"
        }, 
        {
            "location": "/Mobile-Development/19-android-content-providers/#contacts-code", 
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 public   void   onCreate ( Bundle   savedInstanceState )   { \n   super . onCreate ( savedInstanceState ); \n   setContentView ( R . layout . main ); \n   // get a cursor all contacts   \n   Cursor   cursor   =   getContentResolver () \n      . query ( ContactsContract . Contacts . CONTENT_URI ,  \n               null ,   null ,   null ,   null );  \n   // we could use the cursor with an AdapterView   adapter \n   // but here we re logging only the Display Name  \n   while   ( cursor . moveToNext ())   {  \n       String   contactName   =   cursor . getString ( \n         cursor . getColumnIndex ( \n           ContactsContract . Contacts . DISPLAY_NAME \n         ) \n       ); \n       Log . d ( TAG ,   contactName ); \n   }     // while cursor not at end \n   cursor . close ();  }   // onCreate()", 
            "title": "Contacts: Code"
        }, 
        {
            "location": "/Mobile-Development/19-android-content-providers/#content-providers-crud-methods", 
            "text": "See the pdf on moodle for the query method  Some details  here see operations  an example app in android training", 
            "title": "Content Providers CRUD methods"
        }, 
        {
            "location": "/Mobile-Development/19-android-content-providers/#references", 
            "text": "", 
            "title": "References"
        }, 
        {
            "location": "/Mobile-Development/19-android-content-providers/#general-content-providers", 
            "text": "http://developer.android.com/guide/topics/providers/content-providers.html", 
            "title": "General Content Providers"
        }, 
        {
            "location": "/Mobile-Development/19-android-content-providers/#contacts-content-provider", 
            "text": "https://developer.android.com/guide/topics/providers/contacts-provider.html  https://developer.android.com/reference/android/provider/ContactsContract.Contacts.html  http://www.ibm.com/developerworks/webservices/library/ws-RESTservices/", 
            "title": "Contacts Content Provider"
        }, 
        {
            "location": "/Mobile-Development/introduction/", 
            "text": "", 
            "title": "Introduction"
        }, 
        {
            "location": "/Mobile-Development/assignments/assignment1/", 
            "text": "Overview\n\n\nThe goal of this assignment is to create a driver's quiz about road signs.  You will display  4 road sign images and a description that matches one sign.  The user is to click on the image that matches the description.  They are to be given 2 tries.  If the first selection is incorrect the image is to be replaced with a \"wrong\" image.   If the first selection is correct or the second incorrect make the next button visible.  You will keep counters for correct / incorrect answers across activities.   You will also keep a counter of quiz attempts,  all three counters will be maintained after the app is killed.\n\n\nSample UIs\n\n\nMy example UIs are below, you can probably do better ;)\n\n\n\n\n\n\n\n\nDefault UI  (main layout)\n\n\nClicked image incorrect:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSpecifications\n\n\n\n\nApp name in the Launcher must be DQ followed by your  first names:  DQName1Name2\n\n\nCreate and use your own icon\n\n\nShow the user a minimum of 4 questions, one at a time for the quiz.\nYou will need a least 15 images so the answers are not obvious.\nOne text question per image.\nOne hint per image\nRandomly select the image/question.\n\n\nMaintain all counters between run times (SharedPreferences.)\n\n\nMaintain state in the Bundleas needed for display information\n\n\nYou are responsible for the logic to select a random image and it's text for each question.  Randomly select 3 other images to display with it. Use them to populate your layout so they are displayed in a random order using setBackground() or setImageResource()  Keep track of the correct answer. Hint: Resource class, Random class, Array class, Collection class\u2026\n\n\nUI must show\n\n\n4 image buttons\n\n\nquestion count ex:                          question 1 of 4\n\n\ncounts for correct and incorrect:         correct 1 incorrect 0\n\n\nhint button\n\n\nabout button\n\n\nnext button  (hidden for each new question)\n\n\nMake sure the images scale when the screen is rotated and you can see the whole image (if resolution is off, that is ok, you only need one set of images but they must look centred and fill the view, no gaps unless part of the image)   You may need to crop so they are similar sizes or convert to 9 patch images.\n\n\n\n\nHere are some cheat sheets for \nviews and layouts\n\nSee also \nScaleType Android\n \n this is pretty good \na visual guide\n\nHere are some description and image sources:\n\n\nhttp://www.drivingtest.ca/quebec-driving-test/\n\n\nhttps://testdeconnaissances.saaq.gouv.qc.ca/en/\n\n\n\n\nCreate and use a unique Icon: \nhttp://romannurik.github.io/AndroidAssetStudio/icons-launcher.html\n\n\nWhen the last question is answered, update the saved scores (keep the last two scores) (SharedPreferences)\n\n\n\n\nIf the app ends before they finish the questions (n.b.  override finish)  When the app is started again use shared preferences to return the user to next question and set the counters. You need counters to implement that, along with an array of  what questions have been answered.\n\n\n\n\n\n\nImage Buttons actions:\n\n\n\n\nIf it is the correct image:\n\n\nadd one to the correct count, update score, update question counter\n\n\nmake all images not clickable\n\n\nchange the image in some way to show it is the correct answer (you may want to try \n and/or an alternate image that shows the same with a border) see: \nhttp://developer.android.com/guide/topics/ui/controls/button.html\n\n\nenable and make visible the next button\n\n\n\n\n\n\nif it is not the correct image (first incorrect):\n\n\nset it to not clickable\n\n\nchange the image in some way to show it is incorrect\n\n\n\n\n\n\n\n\nif it is not the correct image (second incorrect):\n\n\n\n\nadd one to the incorrect count, update score, update question counter\n\n\nset all images to not clickable\n\n\nhighlight the correct image in some way  (see point a. iii. )\n\n\nenable and make the next button visible\n\n\n\n\n\n\n\n\nAbout button: fire a new Activity:\n\n\n\n\nCreate a layout ( UI ) with\n\n\nA short paragraph describing how to play\n\n\nCredits (who wrote the app)\n\n\nAny saved past scores (SharedPreferences)\n\n\nAny small image you like (ex: your photos)\n\n\n\n\n\n\nHint button:  fire an Intent to do a google search using the current question's  description text, maybe prefix it with \"road sign\"  See Perform a Web Search here \nhttps://developer.android.com/guide/components/intents-common.html#Search\n\n\nBe sure to comment your methods and all code thoroughly, use Javadocs for class and your methods.\n\n\nUse Logging\n\n\nAll of your UI strings must be in strings.xml.\n\n\nOnce you have tested and the UI and logic are operating correctly, use localization to make your app bilingual (add french) strings\n \nhttp://developer.android.com/guide/topics/resources/localization.html\n\n\n\n\nCollaboration (you may NOT do this solo)\n\n\n\n\nYou will do this assignment with a \nteacher assigned partner\n.\n\n\nYou will be given access to an assigned a repo by the teacher and expected to use the protected workflow from git lab 3 \nREAD the workflow overview here\n\nYou will have to create a branch from the protected branch master and discuss and agree on merging pull requests.   Most expectations are in the workflow overview but see also \ncollaboration expectations\n.\n\n\nDue in two weeks,  I will clone master once the deadline expires, ensure all of your changes are applied to it via a merged pull request.\n\n\nSee collaboration expectations for rules \n regs\n\n\n\n\nLearning Objectives\n\n\n\n\nUI layouts, widgets\n\n\nState, SharedPreferences\n\n\nActivity lifecycle\n\n\nDrawable resources\n\n\nString resources\n\n\nExplicit and Implicit  Intents\n\n\nLocalisation\n\n\nCollaboration using git\n\n\n\n\nUI Example  with minimal xml\n\n\nBelow is my layout overview, just to give you an idea. You are free to use what you wish \nlayout optimisation\n,   \nRelativeLayout\n, \nConstraint\n \nLayout\n etc.  Just be sure it resizes on rotate.  (Try to make yours prettier than mine :) )\n\n\nLayout:\n\n\nXML:\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\nLinearLayout \n  (vertical)\n    \nLinearLayout\n (horizontal)\n        \nTextView /\n\n        \nTextView /\n\n    \n/LinearLayout\n\n    \nLinearLayout \n (horizontal)\n      \nImageButton/\n\n      \nImageButton/\n\n    \n/LinearLayout\n\n    \nLinearLayout\n (horizontal)\n        \nImageButton /\n\n        \nImageButton /\n\n    \n/LinearLayout\n\n    \nTextView/\n\n    \nTextView/\n\n    \nLinearLayout\n (horizontal) \n        \nButton /\n\n        \nButton /\n\n    \n/LinearLayout\n\n    \nButton/\n\n\n/LinearLayout", 
            "title": "Assignment1"
        }, 
        {
            "location": "/Mobile-Development/assignments/assignment1/#overview", 
            "text": "The goal of this assignment is to create a driver's quiz about road signs.  You will display  4 road sign images and a description that matches one sign.  The user is to click on the image that matches the description.  They are to be given 2 tries.  If the first selection is incorrect the image is to be replaced with a \"wrong\" image.   If the first selection is correct or the second incorrect make the next button visible.  You will keep counters for correct / incorrect answers across activities.   You will also keep a counter of quiz attempts,  all three counters will be maintained after the app is killed.", 
            "title": "Overview"
        }, 
        {
            "location": "/Mobile-Development/assignments/assignment1/#sample-uis", 
            "text": "My example UIs are below, you can probably do better ;)     Default UI  (main layout)  Clicked image incorrect:", 
            "title": "Sample UIs"
        }, 
        {
            "location": "/Mobile-Development/assignments/assignment1/#specifications", 
            "text": "App name in the Launcher must be DQ followed by your  first names:  DQName1Name2  Create and use your own icon  Show the user a minimum of 4 questions, one at a time for the quiz.\nYou will need a least 15 images so the answers are not obvious.\nOne text question per image.\nOne hint per image\nRandomly select the image/question.  Maintain all counters between run times (SharedPreferences.)  Maintain state in the Bundleas needed for display information  You are responsible for the logic to select a random image and it's text for each question.  Randomly select 3 other images to display with it. Use them to populate your layout so they are displayed in a random order using setBackground() or setImageResource()  Keep track of the correct answer. Hint: Resource class, Random class, Array class, Collection class\u2026  UI must show  4 image buttons  question count ex:                          question 1 of 4  counts for correct and incorrect:         correct 1 incorrect 0  hint button  about button  next button  (hidden for each new question)  Make sure the images scale when the screen is rotated and you can see the whole image (if resolution is off, that is ok, you only need one set of images but they must look centred and fill the view, no gaps unless part of the image)   You may need to crop so they are similar sizes or convert to 9 patch images.   Here are some cheat sheets for  views and layouts \nSee also  ScaleType Android    this is pretty good  a visual guide \nHere are some description and image sources:  http://www.drivingtest.ca/quebec-driving-test/  https://testdeconnaissances.saaq.gouv.qc.ca/en/   Create and use a unique Icon:  http://romannurik.github.io/AndroidAssetStudio/icons-launcher.html  When the last question is answered, update the saved scores (keep the last two scores) (SharedPreferences)   If the app ends before they finish the questions (n.b.  override finish)  When the app is started again use shared preferences to return the user to next question and set the counters. You need counters to implement that, along with an array of  what questions have been answered.    Image Buttons actions:   If it is the correct image:  add one to the correct count, update score, update question counter  make all images not clickable  change the image in some way to show it is the correct answer (you may want to try   and/or an alternate image that shows the same with a border) see:  http://developer.android.com/guide/topics/ui/controls/button.html  enable and make visible the next button    if it is not the correct image (first incorrect):  set it to not clickable  change the image in some way to show it is incorrect     if it is not the correct image (second incorrect):   add one to the incorrect count, update score, update question counter  set all images to not clickable  highlight the correct image in some way  (see point a. iii. )  enable and make the next button visible     About button: fire a new Activity:   Create a layout ( UI ) with  A short paragraph describing how to play  Credits (who wrote the app)  Any saved past scores (SharedPreferences)  Any small image you like (ex: your photos)    Hint button:  fire an Intent to do a google search using the current question's  description text, maybe prefix it with \"road sign\"  See Perform a Web Search here  https://developer.android.com/guide/components/intents-common.html#Search  Be sure to comment your methods and all code thoroughly, use Javadocs for class and your methods.  Use Logging  All of your UI strings must be in strings.xml.  Once you have tested and the UI and logic are operating correctly, use localization to make your app bilingual (add french) strings\n  http://developer.android.com/guide/topics/resources/localization.html", 
            "title": "Specifications"
        }, 
        {
            "location": "/Mobile-Development/assignments/assignment1/#collaboration-you-may-not-do-this-solo", 
            "text": "You will do this assignment with a  teacher assigned partner .  You will be given access to an assigned a repo by the teacher and expected to use the protected workflow from git lab 3  READ the workflow overview here \nYou will have to create a branch from the protected branch master and discuss and agree on merging pull requests.   Most expectations are in the workflow overview but see also  collaboration expectations .  Due in two weeks,  I will clone master once the deadline expires, ensure all of your changes are applied to it via a merged pull request.  See collaboration expectations for rules   regs", 
            "title": "Collaboration (you may NOT do this solo)"
        }, 
        {
            "location": "/Mobile-Development/assignments/assignment1/#learning-objectives", 
            "text": "UI layouts, widgets  State, SharedPreferences  Activity lifecycle  Drawable resources  String resources  Explicit and Implicit  Intents  Localisation  Collaboration using git", 
            "title": "Learning Objectives"
        }, 
        {
            "location": "/Mobile-Development/assignments/assignment1/#ui-example-with-minimal-xml", 
            "text": "Below is my layout overview, just to give you an idea. You are free to use what you wish  layout optimisation ,    RelativeLayout ,  Constraint   Layout  etc.  Just be sure it resizes on rotate.  (Try to make yours prettier than mine :) )  Layout: \nXML:  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 LinearLayout    (vertical)\n     LinearLayout  (horizontal)\n         TextView / \n         TextView / \n     /LinearLayout \n     LinearLayout   (horizontal)\n       ImageButton/ \n       ImageButton/ \n     /LinearLayout \n     LinearLayout  (horizontal)\n         ImageButton / \n         ImageButton / \n     /LinearLayout \n     TextView/ \n     TextView/ \n     LinearLayout  (horizontal) \n         Button / \n         Button / \n     /LinearLayout \n     Button/  /LinearLayout", 
            "title": "UI Example  with minimal xml"
        }, 
        {
            "location": "/Mobile-Development/assignments/assignment2/", 
            "text": "Review\n\n\n\n\ngit-workflow\n\n\n\n\ngeneral\n\n\n\n\n\n\ncode guidelines\n\n\n\n\n\n\nYou will follow this codelabs tutorial that creates a chat application with individual sign up and authentication, notifications and other cool stuff  in order to learn how to use firebase (firebase is a cloud hosted NoSQL database where data is stored as JSON.)  (nice one for the CV!)\n\n\nOverview\n\n\nTutorial:   \nhttps://codelabs.developers.google.com/codelabs/firebase-android\n/\n\n\nThis tutorial needs Android api v 26. which is not installed in the lab (so will have to be installed every time you use it).  You may want to Instead work with A ToDo app with authentication: \nhttps://www.sitepoint.com/creating-a-cloud-backend-for-your-android-app-using-firebase/\n\n\nYou will create an app that uses   \nfirebase\n.  The database will not require user authentication (you will do authentication without user intervention, so one id/password, done by code without asking the user), you will not update the database from the app*.\n\n\nIt will be read only and the database will be populated through the firebase console, manually.\n\n\nFor more on reading \n writing to firebase in Android see \nhttps://firebase.google.com/docs/database/android/read-and-write\n\n\nUsing images in Android \n firebase see:\n\n\nhttps://firebase.google.com/docs/storage/android/download-files#downloading\n_images_with_firebaseui\n\n\nDatabase\n\n\nYou will define the firebase JSON / database as having:\n\n\n\n\n\n\n[] Category (for example: sci fi, romance, computer science, science, celebrities, politicians, fictional characters, etc)\n\n\n\n\n\n\n[] Small Image for each category (smaller than 10MB due to firebase spec)\n\n\n\n\n\n\n[] Multiple quotes per category, for each quote have:\n\n\n\n\n[] Attributed (name of the person the quote is attributed to)\n\n\n[] Date of birth (of person who said the quote)\n\n\n[] Blurb  (one sentence of information about the person who said the quote)\n\n\n[] Quote short (30 char)\n\n\n[] Quote full ( the quote text itself )\n\n\n[] Reference (url of the site where you found the quote)\n\n\n[] Date (date added)  YYYY-MM-DD\n\n\n\n\n\n\n\n\nSuggested ERD\n   but firebase is NOSQL so see \nhow to structure firebase including best practices\n\n\nTo populate the database decide on minimum 5 categories and have minimum 4 quotes for each. Get real quotes from the web for example from   \nhttps://en.wikiquote.org/wiki/Main\n_Page\n\n\nPopulate the database via the console: \nhttp://mariechatfield.com/tutorials/firebase/step2.html\n\n\nBehaviour\n\n\n\n\n\n\n[] \nMainActivity\n on launch will show  ListView or RecyclerView populated with the categories from firebase.  When a user clicks on the category launch QuoteListActivity\n\n\n\n\n\n\n[] \nQuoteListActivity\n will show a ListView or RecyclerView and display the short quote for all quotes in that category.  When a user clicks on the short quote launch QuoteActivity\n\n\n\n\n\n\n[] \nQuoteActivity\n display all of the information associated with the quote, except the blurb.  Include the image for the category. Design it nicely, the URI must be clickable, name it refernce    Format the Views nicely.  The name attributed is clickable and will show a dialogue containing the blurb information with one button to dismiss.\n\n\n\n\n\n\nDialog\n\n\nAll activites are to have the same options menu with the following (do not duplicate code, see the Menus ppts, use the name MenuActivity)\n\n\n\n\n\n\n[] About: it will launch a single AboutActivity.\n\n\n\n\n\n\n[] Random: it will choose a random category \n random quote and display it.\n\n\n\n\n[] Last: it will show the last quote from the previous runtime\n\n\n\n\nYou will have to save the last quote for the next runtime.\n\n\nAboutActivity must contain information about the app, your names and an image (your photo(s))\n\n\nApp Name\n\n\nMake the app name Quotes\n  so that it will be unique when I install. Use the first name only, for each team member.  For example if Ada Lovelace was working with Grace Hopper  the name would be QuotesAdaGrace\n\n\nCollaboration (you may NOT do this solo)\n\n\nYou will do this assignment with a \nteacher assigned partner.\n  Use the protected branch workflow from git lab 3 \nREAD the workflow overview again\n\n\nI will create a repo and assign you and your partner access.\n\n\nBefore you do anything create a separate staging branch and a branch for each teammate.  (Ex:  Ada \n Grace team99, branches:  master, staging, ada, grace)    Never push to master,  never push to staging.   Each of you must perform a code review on the other\ns pull requests.   Most expectations are in the workflow overview but see also \ncollaboration expectations\n.\n\n\nThere are issue \n PR templates, they are a starting point, you may add more and remove what you don\nt need.\n\n\nDue in two weeks,  I will clone master once the deadline expires, ensure all of your changes are applied to it via a merged pull request. \n\n\n\n\nLearning Objectives\n\n\n\n\n\n\nFirebase Realtime NoSQL Database\n\n\n\n\n\n\nUI layouts, widgets\n\n\n\n\nState, SharedPreferences\n\n\nActivity lifecycle\n\n\n\n\nViews and ViewGroups\n\n\n\n\n\n\nDrawable resources\n\n\n\n\n\n\nAdapters and AdapterViews\n\n\n\n\n\n\nString resources\n\n\n\n\nExplicit Intents\n\n\nCollaboration using git/github\n\n\n\n\nExtras/Bonus\n\n\nIf you complete this part of the project too quickly and want a challenge  you may implement an Activity that adds quotes to the database and a delete for individual quotes. \nDO NOT attempt this untill your app is fully functional per the preceeding spec.\n\n\nReferences\n\n\n\n\nReading \n writing to firebase in Android\n\n\n\n\nUsing images in Android \n firebase\n\n\n\n\n\n\nFirebase Storage\n\n\n\n\nCreating a Dialog\n\n\nToDo app with authentication\n\n\nFirebase Setup with Android\n\n\nTutorial on using firebase (no mobile)", 
            "title": "Assignment2"
        }, 
        {
            "location": "/Mobile-Development/assignments/assignment2/#review", 
            "text": "git-workflow   general    code guidelines    You will follow this codelabs tutorial that creates a chat application with individual sign up and authentication, notifications and other cool stuff  in order to learn how to use firebase (firebase is a cloud hosted NoSQL database where data is stored as JSON.)  (nice one for the CV!)", 
            "title": "Review"
        }, 
        {
            "location": "/Mobile-Development/assignments/assignment2/#overview", 
            "text": "Tutorial:    https://codelabs.developers.google.com/codelabs/firebase-android /  This tutorial needs Android api v 26. which is not installed in the lab (so will have to be installed every time you use it).  You may want to Instead work with A ToDo app with authentication:  https://www.sitepoint.com/creating-a-cloud-backend-for-your-android-app-using-firebase/  You will create an app that uses    firebase .  The database will not require user authentication (you will do authentication without user intervention, so one id/password, done by code without asking the user), you will not update the database from the app*.  It will be read only and the database will be populated through the firebase console, manually.  For more on reading   writing to firebase in Android see  https://firebase.google.com/docs/database/android/read-and-write  Using images in Android   firebase see:  https://firebase.google.com/docs/storage/android/download-files#downloading _images_with_firebaseui", 
            "title": "Overview"
        }, 
        {
            "location": "/Mobile-Development/assignments/assignment2/#database", 
            "text": "You will define the firebase JSON / database as having:    [] Category (for example: sci fi, romance, computer science, science, celebrities, politicians, fictional characters, etc)    [] Small Image for each category (smaller than 10MB due to firebase spec)    [] Multiple quotes per category, for each quote have:   [] Attributed (name of the person the quote is attributed to)  [] Date of birth (of person who said the quote)  [] Blurb  (one sentence of information about the person who said the quote)  [] Quote short (30 char)  [] Quote full ( the quote text itself )  [] Reference (url of the site where you found the quote)  [] Date (date added)  YYYY-MM-DD     Suggested ERD    but firebase is NOSQL so see  how to structure firebase including best practices  To populate the database decide on minimum 5 categories and have minimum 4 quotes for each. Get real quotes from the web for example from    https://en.wikiquote.org/wiki/Main _Page  Populate the database via the console:  http://mariechatfield.com/tutorials/firebase/step2.html", 
            "title": "Database"
        }, 
        {
            "location": "/Mobile-Development/assignments/assignment2/#behaviour", 
            "text": "[]  MainActivity  on launch will show  ListView or RecyclerView populated with the categories from firebase.  When a user clicks on the category launch QuoteListActivity    []  QuoteListActivity  will show a ListView or RecyclerView and display the short quote for all quotes in that category.  When a user clicks on the short quote launch QuoteActivity    []  QuoteActivity  display all of the information associated with the quote, except the blurb.  Include the image for the category. Design it nicely, the URI must be clickable, name it refernce    Format the Views nicely.  The name attributed is clickable and will show a dialogue containing the blurb information with one button to dismiss.    Dialog  All activites are to have the same options menu with the following (do not duplicate code, see the Menus ppts, use the name MenuActivity)    [] About: it will launch a single AboutActivity.    [] Random: it will choose a random category   random quote and display it.   [] Last: it will show the last quote from the previous runtime   You will have to save the last quote for the next runtime.  AboutActivity must contain information about the app, your names and an image (your photo(s))", 
            "title": "Behaviour"
        }, 
        {
            "location": "/Mobile-Development/assignments/assignment2/#app-name", 
            "text": "Make the app name Quotes   so that it will be unique when I install. Use the first name only, for each team member.  For example if Ada Lovelace was working with Grace Hopper  the name would be QuotesAdaGrace", 
            "title": "App Name"
        }, 
        {
            "location": "/Mobile-Development/assignments/assignment2/#collaboration-you-may-not-do-this-solo", 
            "text": "You will do this assignment with a  teacher assigned partner.   Use the protected branch workflow from git lab 3  READ the workflow overview again  I will create a repo and assign you and your partner access.  Before you do anything create a separate staging branch and a branch for each teammate.  (Ex:  Ada   Grace team99, branches:  master, staging, ada, grace)    Never push to master,  never push to staging.   Each of you must perform a code review on the other s pull requests.   Most expectations are in the workflow overview but see also  collaboration expectations .  There are issue   PR templates, they are a starting point, you may add more and remove what you don t need.  Due in two weeks,  I will clone master once the deadline expires, ensure all of your changes are applied to it via a merged pull request.", 
            "title": "Collaboration (you may NOT do this solo)"
        }, 
        {
            "location": "/Mobile-Development/assignments/assignment2/#learning-objectives", 
            "text": "Firebase Realtime NoSQL Database    UI layouts, widgets   State, SharedPreferences  Activity lifecycle   Views and ViewGroups    Drawable resources    Adapters and AdapterViews    String resources   Explicit Intents  Collaboration using git/github", 
            "title": "Learning Objectives"
        }, 
        {
            "location": "/Mobile-Development/assignments/assignment2/#extrasbonus", 
            "text": "If you complete this part of the project too quickly and want a challenge  you may implement an Activity that adds quotes to the database and a delete for individual quotes.  DO NOT attempt this untill your app is fully functional per the preceeding spec.", 
            "title": "Extras/Bonus"
        }, 
        {
            "location": "/Mobile-Development/assignments/assignment2/#references", 
            "text": "Reading   writing to firebase in Android   Using images in Android   firebase    Firebase Storage   Creating a Dialog  ToDo app with authentication  Firebase Setup with Android  Tutorial on using firebase (no mobile)", 
            "title": "References"
        }, 
        {
            "location": "/Mobile-Development/assignments/final-assignment/UI/", 
            "text": "All of the following, except the Menu and Weather at the bottom..., should be  image buttons  they must resize on rotate and fill the screen.   This is my starting point if you wish to use some special feature of \nmaterial design\n  such as \ntabs\n or \nnavigation drawers\n instead or as a complement to the UI you may do so provided you implement all of the app functionality specified and  it is visually appealing.    \n\n\nThere are whole \ncourses on UX design\n, I do not expect you to be experts  but there must be some effort.\n\n\n\n\nDawson image from \nhttp://www.confuciusinstitute.qc.ca/wp-content/themes/confuciusdawson/imgs/Dawson_EN_black.png", 
            "title": "UI"
        }, 
        {
            "location": "/Mobile-Development/assignments/final-assignment/overview/", 
            "text": "Dawson Student App  2017\n\n\nOverview\n\n\nThis app is intended to be useful for new and current Dawson students. The purpose of this project is to create an application that will exercise what you have learned about the Android framework  and Mobile software development. It is to be integrated with your final project for PHP. In phase 1 you will implement most app only components, \nin phase 2 you will integrate with your PHP and PostgresSL server side data\n.    \n\n\nGeneral functionality\n\n\nOn first launch the app will have the user input their \nname\n, an \nemail address\n as \nuserid\n, and a \npassword\n.   \nDo not use a splash page for this\n, check and if there is no remembered information (\nSharedPrefs\n) launch an \nActivity\n to collect this information.   Once this is input the \nMainActivity\n displays a menu and series of buttons per the UI specification  to invoke various functionality. On button click most will launch an activity, maybe containing fragments, the design of the UIs is up to you but make it clean and neat, aligned and looking nice.  If you want to do something I have not requested or use some additional Android classes (example: Material Design) that I have not covered please check with me first.  I am open to agile-type design decisions but you must meet the spec .  \nI am your Project Manager,  you must report to me for anything that is outside the spec.\n\n\nOn Startup\n\n\n\n\n1\nst\n launch: ask for last name, first name, email address and password  save it in shared preferences with date stamp,  \n(phase 2 will involve checking the back end web REST resources from the PHP project for updates and downloading data, using this information)\n\n\nSubsequent launch you will not ask for authentication, the auth data will be used for access to the back end.  \n\n\n\n\nGeneral\n\n\n\n\n Unique App Name: Dawson\n\n\n Unique repo name: must include TeamName\n\n\n Unique Launcher icon, (you may make your own) \nhttp://romannurik.github.io/AndroidAssetStudio/\n\n\n Include appropriate inline documentation and JavaDocs for your methods and classes.\n\n\n All images should be scalable (png, or jpg) and must resize on rotate\n\n\n All UI strings and integers must be resources, no constants.\n\n\n All code-internal data must be constants, no literals, even for logging.\n\n\n Use logging with a unique tag for each Activity/Fragment\n\n\n You are required to use Fragments in at least one UI\n\n\n Maintain state on rotation and wherever necessary for all UIs\n\n\n\n\nGrading\n\n\n\n\nNote\n\n\nSame as the PHP side of the project\n\n\n\n\nPart of your grade will reflect how you are able to organize your work and advance during the time that has been allocated. You must be able to show progress (procrastinators will be penalized). \nPlease be prepared to attend your scheduled lab session for spot checks.\n\n\nYou must use the protected branch workflow as in the assignments but you will be 4 now so it changes the game a little.   The penultimate Monday you will be expected to demo the full android progject.   We will also organize combined demonstrations on the last Monday of the semester (with the PHP project). These are demos are scheduled before the final project due date. This means that:\n\n\n\n\nyou may still be missing some functionality (but not a lot) \n\n\nYour UI should be finalized, the underlying code must be as complete as possible\n\n\nyou must be prepared to explain what is remaining to do or fix (it should not be much at this point in time)\n\n\n\n\nPhase 1 (to start)\n\n\n\n\n Choose a team name, check it with the teacher\n\n\n Create a private, shared repository on gitlab or github with all team members as contributors add campbe13,  I will be checking it sporadically.  You may want to protect your master branch to avoid pushing errors. I suggest you designate one person as the github controller.\n\n\n Design your UX see the UI Layout\n\n\n Create / gather / modify the necessary images for your main activity UI and the About page.\n\n\n Create the UI associated resources and code that launches stub activities for all buttons you will implement.\n\n\n Create your firebase database using the phonebook json file. \n\n\n Create your SQLite database DAO. \n\n\n Implement  startup check for shared preferences, input user info.\n\n\n Implement the Menu \n\n\n For the Menu \n UI implement stub Activities then focus on one at a time of the following:\n\n\n Implement the About Activity\n\n\n Implement the Settings Activity\n\n\n Implement the Activites/Fragments  associated with the actions  for phase 1in the main UI  (buttons or  \u2026)\n\n\n Implement the main UI have each component launch a stub Activity\n\n\n\n\n\n\n\n\nThe preceeding is how to setup the skeleton for phase 1.   Once you have the skeleton ready distribute the work and implement the details in \nPhase 1 Specification\n\n\nWe may not use all of the following apis, you may delay getting keys until you need them.\n- [ ] Sign up for an API key for Open Weather Map \nhttps://openweathermap.org/api\n\n- [ ] Sign up for an API key for Google Places  \nhttps://developers.google.com/places/android-api/start\n\n    - [ ] Use PlacePicker \nhttps://developers.google.com/places/android-api/placepicker\n\n    - [ ] Use CurrentPlace \nhttps://developers.google.com/places/android-api/current-place\n\n\nNext: \nPhase 1 Specification", 
            "title": "Overview"
        }, 
        {
            "location": "/Mobile-Development/assignments/final-assignment/overview/#dawson-student-app-2017", 
            "text": "", 
            "title": "Dawson Student App  2017"
        }, 
        {
            "location": "/Mobile-Development/assignments/final-assignment/overview/#overview", 
            "text": "This app is intended to be useful for new and current Dawson students. The purpose of this project is to create an application that will exercise what you have learned about the Android framework  and Mobile software development. It is to be integrated with your final project for PHP. In phase 1 you will implement most app only components,  in phase 2 you will integrate with your PHP and PostgresSL server side data .", 
            "title": "Overview"
        }, 
        {
            "location": "/Mobile-Development/assignments/final-assignment/overview/#general-functionality", 
            "text": "On first launch the app will have the user input their  name , an  email address  as  userid , and a  password .    Do not use a splash page for this , check and if there is no remembered information ( SharedPrefs ) launch an  Activity  to collect this information.   Once this is input the  MainActivity  displays a menu and series of buttons per the UI specification  to invoke various functionality. On button click most will launch an activity, maybe containing fragments, the design of the UIs is up to you but make it clean and neat, aligned and looking nice.  If you want to do something I have not requested or use some additional Android classes (example: Material Design) that I have not covered please check with me first.  I am open to agile-type design decisions but you must meet the spec .   I am your Project Manager,  you must report to me for anything that is outside the spec.", 
            "title": "General functionality"
        }, 
        {
            "location": "/Mobile-Development/assignments/final-assignment/overview/#on-startup", 
            "text": "1 st  launch: ask for last name, first name, email address and password  save it in shared preferences with date stamp,   (phase 2 will involve checking the back end web REST resources from the PHP project for updates and downloading data, using this information)  Subsequent launch you will not ask for authentication, the auth data will be used for access to the back end.", 
            "title": "On Startup"
        }, 
        {
            "location": "/Mobile-Development/assignments/final-assignment/overview/#general", 
            "text": "Unique App Name: Dawson   Unique repo name: must include TeamName   Unique Launcher icon, (you may make your own)  http://romannurik.github.io/AndroidAssetStudio/   Include appropriate inline documentation and JavaDocs for your methods and classes.   All images should be scalable (png, or jpg) and must resize on rotate   All UI strings and integers must be resources, no constants.   All code-internal data must be constants, no literals, even for logging.   Use logging with a unique tag for each Activity/Fragment   You are required to use Fragments in at least one UI   Maintain state on rotation and wherever necessary for all UIs", 
            "title": "General"
        }, 
        {
            "location": "/Mobile-Development/assignments/final-assignment/overview/#grading", 
            "text": "Note  Same as the PHP side of the project   Part of your grade will reflect how you are able to organize your work and advance during the time that has been allocated. You must be able to show progress (procrastinators will be penalized).  Please be prepared to attend your scheduled lab session for spot checks.  You must use the protected branch workflow as in the assignments but you will be 4 now so it changes the game a little.   The penultimate Monday you will be expected to demo the full android progject.   We will also organize combined demonstrations on the last Monday of the semester (with the PHP project). These are demos are scheduled before the final project due date. This means that:   you may still be missing some functionality (but not a lot)   Your UI should be finalized, the underlying code must be as complete as possible  you must be prepared to explain what is remaining to do or fix (it should not be much at this point in time)", 
            "title": "Grading"
        }, 
        {
            "location": "/Mobile-Development/assignments/final-assignment/overview/#phase-1-to-start", 
            "text": "Choose a team name, check it with the teacher   Create a private, shared repository on gitlab or github with all team members as contributors add campbe13,  I will be checking it sporadically.  You may want to protect your master branch to avoid pushing errors. I suggest you designate one person as the github controller.   Design your UX see the UI Layout   Create / gather / modify the necessary images for your main activity UI and the About page.   Create the UI associated resources and code that launches stub activities for all buttons you will implement.   Create your firebase database using the phonebook json file.    Create your SQLite database DAO.    Implement  startup check for shared preferences, input user info.   Implement the Menu    For the Menu   UI implement stub Activities then focus on one at a time of the following:   Implement the About Activity   Implement the Settings Activity   Implement the Activites/Fragments  associated with the actions  for phase 1in the main UI  (buttons or  \u2026)   Implement the main UI have each component launch a stub Activity     The preceeding is how to setup the skeleton for phase 1.   Once you have the skeleton ready distribute the work and implement the details in  Phase 1 Specification  We may not use all of the following apis, you may delay getting keys until you need them.\n- [ ] Sign up for an API key for Open Weather Map  https://openweathermap.org/api \n- [ ] Sign up for an API key for Google Places   https://developers.google.com/places/android-api/start \n    - [ ] Use PlacePicker  https://developers.google.com/places/android-api/placepicker \n    - [ ] Use CurrentPlace  https://developers.google.com/places/android-api/current-place  Next:  Phase 1 Specification", 
            "title": "Phase 1 (to start)"
        }, 
        {
            "location": "/Mobile-Development/assignments/final-assignment/phase-1-specs/", 
            "text": "Final Project UI\n\n\nUI Layout here\n\n\nFor all UIs\n\n\nSome of the UIs in the assignments were not visually appealing:  too small fonts with respect to the other views,  not spanning the page properly, ugly interfaces.  Not everyone has an eye for design but be sure to spend some time on design and images. Be sure to test on at least 1 small screen (phone AVD) and 1 large screen (your tablet.)  \nUIs created without any effort at UX design will cost you marks.\n\n\nWhat you click on -\n Code response, action\n\n\n1\n2\n3\n4\nMenu -\n About,  Dawson, Settings \nAbout -\n Launches About Activity\nDawson -\n Launches Dawson Computer Science web page\nSettings -\n Launches Settings Activity \n\n\n\n\n\n\nAbout Activity show the App Credits\n\n\n\n\n Paragraph describing the app, format the text in a non black colour and with a largish font \u201cDawson College\u201d  Course Id, \n\n\n Authors names, mages of each or all of you together. \n\n\n onclick Course Id -\n Launches Dawson Computer Science web page\n\n\n onclick Your name or image -\n a Dialogue with a blurb about you.  Grad Dawson CS 2017 etc\n\n\n\n\nSettings Activity show any settings saved for the app\n\n\n\n\n First and last name, \n\n\n email address, \n\n\n password and \n\n\n date stamp (when created or \n\n\n If changes are made update the date \n\n\n Implement a save button, if back is pressed launch a dialogue to confirm \n\n\n\n\nDawson Image Click\n\n\n\n\n Launches Dawson Computer Science web page  \n\n\n\n\nLogo Image Click\n\n\n\n\n Launches \nAbout Activity\n\n\n\n\nClass Cancelation\n\n\nCanceledActivity\n using the RSS feed from \nhttps://www.dawsoncollege.qc.ca/registrar/online-services/class-cancellations/\n\n\n\n\nCanceledActivity\n is an \nActivity\n/\nFragment\n to display the canceled classes from the feed.\n\n\n widgets as needed, use an \nAdapterView\n to show the course+section number.\n\n\n \nAdapterView\n \nonItemClick\n show all of the information for this course\n \nShowCancelActivity\n\n\n\n\n\n\nShowCancelActivity\n is an \nActivity\n/\nFragment\n to display the full information from the RSS feed for the item selected.\n\n\n Implement a button or click on the teacher name  to display Teacher Contact info (same fragment \nasTeacherContactActivity\n)\n\n\n\n\n\n\n\n\nFind Teachers\n\n\nFindTeacherActivity\n (use \nFragments\n)\n(you are given a \nphone json file\n, you must import it into firebase to create a database and use it here)\n\n\n\n\n \nFindTeacherActivty\n an \nActivity\n/\nFragment\n lookup the teacher in the phone directory.   \n(use first and last name)\n\n\n Widgets as needed for search fields of first name and last name.\n\n\n Validate that at least one is set for the search. \n\n\n search button to launch the search\n\n\n a radio button for like/exact search (use appropriate searches)\n\n\n Results only show after the search \n\n\n \n1\n result \nChooseTeacherActivity\n \nActivity\n/\nFragment\n\n\n \n==1\n result \nTeacherContactActivity\n \nActivity\n/\nFragment\n\n\n\n\n\n\n \nChooseTeacherActivity\n Display list of teacher\u2019s retrieved in the search previous\n\n\n \nListView\n (or other \nAdapterView\n) to show the teacher first \n last names\n\n\n \nonItemClick\n \n \nTeacherContactActivity\n\n\n\n\n\n\n \nTeacherContactActivity\n  display all information from the firebase database for this teacher\n\n\n The fragment will be used in two places \n\n\n Widgets as needed for all fields\nsubject:  \nfrom \nyourappname\n\n\n \nonClick\n for local launches an implicit intent to make a phonecall \ntel://number,local\n\nSee \nhttps://developer.android.com/guide/components/intents-common.html\n\n\n\n\n\n\n\n\nSchool Notes\n\n\nNotesActivity\n\n\nShow existing or add new notes from the sqlite db \nActivity\n/\nFragment\n.  \n\n\n\n\n widgets for new notes input and a button to add a note\n\n\n Use an AdapterView to show the first few chars of the notes in the db.\n\n\n onItemClick will launch ItemNoteActivity to display the whole note\n\n\n\n\nItemNoteActivity\n\n\nDisplay a single note from the notes db\n\n\n\n\n Widget with large text to display the notes (you may need a ScrollView)\n\n\n You may want to do this tutorial and incorporate some of the code \n\n\n\n\nhttps://www.sitepoint.com/starting-android-development-creating-todo-app/\n\n\nAdd To Calendar\n\n\nCalendarActivity\n\n\nActivity/Fragment add an event to the calendar\n\n\n\n\n widgets as needed for date, start time, end time \n event\n\n\n Add the event to the default calendar \n\n\n\n\nhttps://developer.android.com/guide/topics/providers/calendar-provider.html\n\n\n\n\n (optional: create a Dawson calendar)\n\n\n\n\nAcademic Calendar\n\n\nLoad the url for the academic calendar in a \nWebView\n.\n- [ ] By default load the current term (fall 2017) have \n- [ ] widgets to allow for entering the year and a  radio button for fall/winter and a Button.\n\n- [ ] Change the widget in the \nWebView\n  when the button is hit.\n\n\nCurrent Temperature\n\n\n(text, not clickable)  display the current temperature.\n\n\n\n\n You will use the Location Manager to obtain the device\u2019s current latitude and longitude. (and a LocationListener to keep it up to date) This is a pretty good tutorial  \nhttp://www.androidhive.info/2012/07/android-gps-location-manager-tutorial/\n\n\n Google is pushing towards using Google Play services to obtain this information but getting the information directly from GPS is preferrable to having everything tracked by\n\n\n Google and required for this assignment.\n\n\n You will need to make sure \n check that GPS is on at least for your app \nSettings\u201d \n \u201cLocation Access\u201d \n \u201cAccess my location\u201d\n\n\n Use the openweather api + lat/long to get the current temperature in centigrade.  \n\n\n Format it in a large text \n display the temperature in centigrade.\n\n\n\n\nhttps://openweathermap.org/current\n\n\nChoose either Weather or Messaging\n\n\nWeather\n\n\nWeather Activity\n\n\n\n\n Have a widget to input the city \n use a spinner for the ISO 3166  country codes \n\n\n Default to Montreal,CA\n\n\n\n\n\n\n Have a button to display the UV index and the 5 day forecast \n\n\n This can be in the same Activity/Fragment or launch a new one\n\n\n\n\n\n\n\n\nhttps://openweathermap.org/forecast5\n\n\nhttps://openweathermap.org/api/uvi\n\n\n\n\nWarning\n\n\nThis option is much more advanced and time consuming than the weather option.  It is an extra challenge.  Consult with me before taking it on.\n\n\n\n\n\n\n\n\n You will implement Firebase Cloud Messaging\n\n\n\n\n\n\n In the app to recieve notifications\n\n\nhttps://firebase.google.com/docs/cloud-messaging/android/client\n\n\n\n\n\n\n On the firebase console to send notifications\n\n\n\n\n\n\n\n\n\n\nhttps://firebase.google.com/docs/cloud-messaging/\n   \n\n\nhttps://github.com/firebase/quickstart-android/tree/master/messaging", 
            "title": "Phase 1 specs"
        }, 
        {
            "location": "/Mobile-Development/assignments/final-assignment/phase-1-specs/#final-project-ui", 
            "text": "UI Layout here", 
            "title": "Final Project UI"
        }, 
        {
            "location": "/Mobile-Development/assignments/final-assignment/phase-1-specs/#for-all-uis", 
            "text": "Some of the UIs in the assignments were not visually appealing:  too small fonts with respect to the other views,  not spanning the page properly, ugly interfaces.  Not everyone has an eye for design but be sure to spend some time on design and images. Be sure to test on at least 1 small screen (phone AVD) and 1 large screen (your tablet.)   UIs created without any effort at UX design will cost you marks.", 
            "title": "For all UIs"
        }, 
        {
            "location": "/Mobile-Development/assignments/final-assignment/phase-1-specs/#what-you-click-on-code-response-action", 
            "text": "1\n2\n3\n4 Menu -  About,  Dawson, Settings \nAbout -  Launches About Activity\nDawson -  Launches Dawson Computer Science web page\nSettings -  Launches Settings Activity", 
            "title": "What you click on -&gt; Code response, action"
        }, 
        {
            "location": "/Mobile-Development/assignments/final-assignment/phase-1-specs/#about-activity-show-the-app-credits", 
            "text": "Paragraph describing the app, format the text in a non black colour and with a largish font \u201cDawson College\u201d  Course Id,    Authors names, mages of each or all of you together.    onclick Course Id -  Launches Dawson Computer Science web page   onclick Your name or image -  a Dialogue with a blurb about you.  Grad Dawson CS 2017 etc", 
            "title": "About Activity show the App Credits"
        }, 
        {
            "location": "/Mobile-Development/assignments/final-assignment/phase-1-specs/#settings-activity-show-any-settings-saved-for-the-app", 
            "text": "First and last name,    email address,    password and    date stamp (when created or    If changes are made update the date    Implement a save button, if back is pressed launch a dialogue to confirm", 
            "title": "Settings Activity show any settings saved for the app"
        }, 
        {
            "location": "/Mobile-Development/assignments/final-assignment/phase-1-specs/#dawson-image-click", 
            "text": "Launches Dawson Computer Science web page", 
            "title": "Dawson Image Click"
        }, 
        {
            "location": "/Mobile-Development/assignments/final-assignment/phase-1-specs/#logo-image-click", 
            "text": "Launches  About Activity", 
            "title": "Logo Image Click"
        }, 
        {
            "location": "/Mobile-Development/assignments/final-assignment/phase-1-specs/#class-cancelation", 
            "text": "CanceledActivity  using the RSS feed from  https://www.dawsoncollege.qc.ca/registrar/online-services/class-cancellations/   CanceledActivity  is an  Activity / Fragment  to display the canceled classes from the feed.   widgets as needed, use an  AdapterView  to show the course+section number.    AdapterView   onItemClick  show all of the information for this course   ShowCancelActivity    ShowCancelActivity  is an  Activity / Fragment  to display the full information from the RSS feed for the item selected.   Implement a button or click on the teacher name  to display Teacher Contact info (same fragment  asTeacherContactActivity )", 
            "title": "Class Cancelation"
        }, 
        {
            "location": "/Mobile-Development/assignments/final-assignment/phase-1-specs/#find-teachers", 
            "text": "FindTeacherActivity  (use  Fragments )\n(you are given a  phone json file , you must import it into firebase to create a database and use it here)     FindTeacherActivty  an  Activity / Fragment  lookup the teacher in the phone directory.    (use first and last name)   Widgets as needed for search fields of first name and last name.   Validate that at least one is set for the search.    search button to launch the search   a radio button for like/exact search (use appropriate searches)   Results only show after the search     1  result  ChooseTeacherActivity   Activity / Fragment    ==1  result  TeacherContactActivity   Activity / Fragment      ChooseTeacherActivity  Display list of teacher\u2019s retrieved in the search previous    ListView  (or other  AdapterView ) to show the teacher first   last names    onItemClick     TeacherContactActivity      TeacherContactActivity   display all information from the firebase database for this teacher   The fragment will be used in two places    Widgets as needed for all fields subject:   from  yourappname    onClick  for local launches an implicit intent to make a phonecall  tel://number,local \nSee  https://developer.android.com/guide/components/intents-common.html", 
            "title": "Find Teachers"
        }, 
        {
            "location": "/Mobile-Development/assignments/final-assignment/phase-1-specs/#school-notes", 
            "text": "", 
            "title": "School Notes"
        }, 
        {
            "location": "/Mobile-Development/assignments/final-assignment/phase-1-specs/#notesactivity", 
            "text": "Show existing or add new notes from the sqlite db  Activity / Fragment .      widgets for new notes input and a button to add a note   Use an AdapterView to show the first few chars of the notes in the db.   onItemClick will launch ItemNoteActivity to display the whole note", 
            "title": "NotesActivity"
        }, 
        {
            "location": "/Mobile-Development/assignments/final-assignment/phase-1-specs/#itemnoteactivity", 
            "text": "Display a single note from the notes db    Widget with large text to display the notes (you may need a ScrollView)   You may want to do this tutorial and incorporate some of the code    https://www.sitepoint.com/starting-android-development-creating-todo-app/", 
            "title": "ItemNoteActivity"
        }, 
        {
            "location": "/Mobile-Development/assignments/final-assignment/phase-1-specs/#add-to-calendar", 
            "text": "", 
            "title": "Add To Calendar"
        }, 
        {
            "location": "/Mobile-Development/assignments/final-assignment/phase-1-specs/#calendaractivity", 
            "text": "Activity/Fragment add an event to the calendar    widgets as needed for date, start time, end time   event   Add the event to the default calendar    https://developer.android.com/guide/topics/providers/calendar-provider.html    (optional: create a Dawson calendar)", 
            "title": "CalendarActivity"
        }, 
        {
            "location": "/Mobile-Development/assignments/final-assignment/phase-1-specs/#academic-calendar", 
            "text": "Load the url for the academic calendar in a  WebView .\n- [ ] By default load the current term (fall 2017) have \n- [ ] widgets to allow for entering the year and a  radio button for fall/winter and a Button. \n- [ ] Change the widget in the  WebView   when the button is hit.", 
            "title": "Academic Calendar"
        }, 
        {
            "location": "/Mobile-Development/assignments/final-assignment/phase-1-specs/#current-temperature", 
            "text": "(text, not clickable)  display the current temperature.    You will use the Location Manager to obtain the device\u2019s current latitude and longitude. (and a LocationListener to keep it up to date) This is a pretty good tutorial   http://www.androidhive.info/2012/07/android-gps-location-manager-tutorial/   Google is pushing towards using Google Play services to obtain this information but getting the information directly from GPS is preferrable to having everything tracked by   Google and required for this assignment.   You will need to make sure   check that GPS is on at least for your app  Settings\u201d   \u201cLocation Access\u201d   \u201cAccess my location\u201d   Use the openweather api + lat/long to get the current temperature in centigrade.     Format it in a large text   display the temperature in centigrade.   https://openweathermap.org/current", 
            "title": "Current Temperature"
        }, 
        {
            "location": "/Mobile-Development/assignments/final-assignment/phase-1-specs/#choose-either-weather-or-messaging", 
            "text": "", 
            "title": "Choose either Weather or Messaging"
        }, 
        {
            "location": "/Mobile-Development/assignments/final-assignment/phase-1-specs/#weather", 
            "text": "Weather Activity    Have a widget to input the city   use a spinner for the ISO 3166  country codes    Default to Montreal,CA     Have a button to display the UV index and the 5 day forecast    This can be in the same Activity/Fragment or launch a new one     https://openweathermap.org/forecast5  https://openweathermap.org/api/uvi   Warning  This option is much more advanced and time consuming than the weather option.  It is an extra challenge.  Consult with me before taking it on.      You will implement Firebase Cloud Messaging     In the app to recieve notifications  https://firebase.google.com/docs/cloud-messaging/android/client     On the firebase console to send notifications      https://firebase.google.com/docs/cloud-messaging/      https://github.com/firebase/quickstart-android/tree/master/messaging", 
            "title": "Weather"
        }, 
        {
            "location": "/Software-Project/introduction/", 
            "text": "Welcome to the Software Development Project. In this first week we will discuss the course in general, the project and the development tools that we will use. You should have all reviewed the project specification I sent out last week.\n\n\nIn the lab you will create the DDL statements for the database. As MySQL is slightly different from Oracle in its syntax I have a file in this week's  download with a set of DDL statements for a different problem. We will discuss how all of this works in the lab.\n\n\nFor homework, you will code a common dice game played in casinos in Java. The instructions for the assignment are in another file in this week's download.\n\n\nTechnologies required\n\n\nYou can use what you see fit in terms of IDE/tools\n\n\n\n\nJava 1.8\n\n\nJavaFX 2.2\n\n\nMySQL 5.7\n\n\nJDBC\n\n\nJUnit 4\n\n\nJavaMail / Jodd\n\n\nMaven\n\n\nGit\n\n\nGitlab    \n\n\n\n\n\n\nDanger\n\n\nKen won't let us use GitHub :c\n\n\n\n\nSteps to a project\n\n\n\n\nRead the Specs\n\n\nCreate the Database and Tables\n\n\nWrite the Java JDBC CRUD code while writing unit tests after every method is coded\n\n\nCreate\n\n\nRead\n\n\nUpdate\n\n\nDelete\n\n\n\n\n\n\n\n\nWeek One Lab\n\n\nWrite the SQL cripts to create the necessaru tables in MySQL and then email the scripts to \n by the end of the lab period\n\n\nImportant\n\n\nYou should have 50 account thingies per month\n\n\nSetting Up MySQL\n\n\n\n\nInstall MySQL Community edition\n\n\n\n\n1\n$ mysql -h\n\n\n\n\n\n\nEmail Requirements for JAM\n\n\n\n\nSearch for all appointments that start at the interval from the present time\n\n\nIf any are found, prepare an email for each appointment\n\n\nSend the email", 
            "title": "Introduction"
        }, 
        {
            "location": "/Software-Project/introduction/#technologies-required", 
            "text": "You can use what you see fit in terms of IDE/tools   Java 1.8  JavaFX 2.2  MySQL 5.7  JDBC  JUnit 4  JavaMail / Jodd  Maven  Git  Gitlab        Danger  Ken won't let us use GitHub :c", 
            "title": "Technologies required"
        }, 
        {
            "location": "/Software-Project/introduction/#steps-to-a-project", 
            "text": "Read the Specs  Create the Database and Tables  Write the Java JDBC CRUD code while writing unit tests after every method is coded  Create  Read  Update  Delete", 
            "title": "Steps to a project"
        }, 
        {
            "location": "/Software-Project/introduction/#week-one-lab", 
            "text": "Write the SQL cripts to create the necessaru tables in MySQL and then email the scripts to   by the end of the lab period", 
            "title": "Week One Lab"
        }, 
        {
            "location": "/Software-Project/introduction/#important", 
            "text": "You should have 50 account thingies per month", 
            "title": "Important"
        }, 
        {
            "location": "/Software-Project/introduction/#setting-up-mysql", 
            "text": "Install MySQL Community edition   1 $ mysql -h", 
            "title": "Setting Up MySQL"
        }, 
        {
            "location": "/Software-Project/introduction/#email-requirements-for-jam", 
            "text": "Search for all appointments that start at the interval from the present time  If any are found, prepare an email for each appointment  Send the email", 
            "title": "Email Requirements for JAM"
        }, 
        {
            "location": "/Software-Project/logging/", 
            "text": "What is logging\n\n\nLogging is the process of recording application actions and state to a secondary interface.\n\n\nStructured Approach to Logging\n\n\nEvents or problems of gradually\nincreasing severity\n* WARN, ERROR\n\n\nGeneral information purposes\n* INFO\n* Debugging\n* DEBUG, TRACE\n\n\nWhat do you need to log?\n\n\nMost common are:\n* Java.util.logging\n* Log4j2 (most used in 2017)\n* Logback\n\n\nUsing a logging fa\u00e7ade\n\n\n\n\nDifferent projects may use different\nframeworks\n\n\nRather than become an expert in each\none you use a fa\u00e7ade\n\n\nFa\u00e7ade provides a new interface to an\nexisting class\n\n\n\n\nSimple Logging Fa\u00e7ade for Java (SLF4J)\n\n\n\n\nSearches for a framework in class/build\npath\n\n\nIf more than one is found it throws an\nexception\n\n\nIf none is found it uses a no-op\nimplementation\n\n\nProgram runs but logging does nothing\n\n\n\n\n\n\n\n\n\n\n\n\nHow to Use it\n\n\nAdd the proper dependencies to the Maven pom file.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n!-- The dependency for the SLF4J Facade --\n\n\ndependency\n\n    \ngroupId\norg.slf4j\n/groupId\n\n    \nartifactId\nslf4j-api\n/artifactId\n\n    \nversion\n1.7.25\n/version\n\n\n/dependency\n\n\n\n!-- Binding for Log4J --\n\n\ndependency\n\n    \ngroupId\norg.apache.logging.log4j\n/groupId\n\n    \nartifactId\nlog4j-slf4j-impl\n/artifactId\n\n    \nversion\n2.8.2\n/version\n\n\n/dependency\n\n\n!-- Logging Framework Dependency Uses the log4j2 library --\n\n\ndependency\n\n    \ngroupId\norg.apache.logging.log4j\n/groupId\n\n    \nartifactId\nlog4j-api\n/artifactId\n\n    \nversion\n2.8.2\n/version\n\n\n/dependency\n\n\n\ndependency\n\n    \ngroupId\norg.apache.logging.log4j\n/groupId\n\n    \nartifactId\nlog4j-core\n/artifactId\n\n    \nversion\n2.8.2\n/version\n\n\n/dependency\n\n\n\n\n\n\n\nIn each class:\n\n\n\n\nAdd two imports:\n\n1\n2\nimport\n \norg.slf4j.Logger\n;\n\n\nimport\n \norg.slf4j.LoggerFactory\n;\n\n\n\n\n\n\nDeclare a Logger class variable:\n\n1\nprivate\n \nfinal\n \nLogger\n \nlog\n \n=\n \nLoggerFactory\n.\ngetLogger\n(\nthis\n.\ngetClass\n().\ngetName\n());\n\n\n\n\n\n\n\n\nLog message may include a \nString\n or a \nString\n and an \nObject\n.\n\n\nlog.info(\u201cprogram starts\u201d);\n\n\nor\n\n\n1\n2\n3\n}\n \ncatch\n \n(\nSQLException\n \nsqlex\n)\n \n{\n\n    \nlog\n.\nerror\n(\n\u201c\nConnect\n \nfailed\n\u201d\n,\n \nsqlex\n);\n\n\n}\n\n\n\n\n\n\n\nLogging configuration file is required\notherwise there is no logging\n\n\n\n\nFormat is framework dependent\n\n\nFile goes into \nsrc/main/resources\n\n\nSee the sample code for an example\n\n\n\n\nBibliography\n\n\n\n\nSample code: \nhttps://gitlab.com/omniprof/LoggingDemo.git\n\n\nhttp://www.codeproject.com/Articles/42354/The-Art-of-Logging\n\n\nhttp://zeroturnaround.com/rebellabs/the-state-of-logging-in-java-2013/\n\n\nhttp://www.slf4j.org/\n\n\nhttp://www.slf4j.org/manual.html\n\n\nhttp://log4jtester.com/\n\n\nhttp://logging.apache.org/log4j/2.x/manual/layouts.html#PatternLayout", 
            "title": "Logging"
        }, 
        {
            "location": "/Software-Project/logging/#what-is-logging", 
            "text": "Logging is the process of recording application actions and state to a secondary interface.", 
            "title": "What is logging"
        }, 
        {
            "location": "/Software-Project/logging/#structured-approach-to-logging", 
            "text": "Events or problems of gradually\nincreasing severity\n* WARN, ERROR  General information purposes\n* INFO\n* Debugging\n* DEBUG, TRACE", 
            "title": "Structured Approach to Logging"
        }, 
        {
            "location": "/Software-Project/logging/#what-do-you-need-to-log", 
            "text": "Most common are:\n* Java.util.logging\n* Log4j2 (most used in 2017)\n* Logback", 
            "title": "What do you need to log?"
        }, 
        {
            "location": "/Software-Project/logging/#using-a-logging-facade", 
            "text": "Different projects may use different\nframeworks  Rather than become an expert in each\none you use a fa\u00e7ade  Fa\u00e7ade provides a new interface to an\nexisting class", 
            "title": "Using a logging fa\u00e7ade"
        }, 
        {
            "location": "/Software-Project/logging/#simple-logging-facade-for-java-slf4j", 
            "text": "Searches for a framework in class/build\npath  If more than one is found it throws an\nexception  If none is found it uses a no-op\nimplementation  Program runs but logging does nothing", 
            "title": "Simple Logging Fa\u00e7ade for Java (SLF4J)"
        }, 
        {
            "location": "/Software-Project/logging/#how-to-use-it", 
            "text": "Add the proper dependencies to the Maven pom file.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25 !-- The dependency for the SLF4J Facade --  dependency \n     groupId org.slf4j /groupId \n     artifactId slf4j-api /artifactId \n     version 1.7.25 /version  /dependency  !-- Binding for Log4J --  dependency \n     groupId org.apache.logging.log4j /groupId \n     artifactId log4j-slf4j-impl /artifactId \n     version 2.8.2 /version  /dependency  !-- Logging Framework Dependency Uses the log4j2 library --  dependency \n     groupId org.apache.logging.log4j /groupId \n     artifactId log4j-api /artifactId \n     version 2.8.2 /version  /dependency  dependency \n     groupId org.apache.logging.log4j /groupId \n     artifactId log4j-core /artifactId \n     version 2.8.2 /version  /dependency    In each class:   Add two imports: 1\n2 import   org.slf4j.Logger ;  import   org.slf4j.LoggerFactory ;    Declare a Logger class variable: 1 private   final   Logger   log   =   LoggerFactory . getLogger ( this . getClass (). getName ());     Log message may include a  String  or a  String  and an  Object .  log.info(\u201cprogram starts\u201d);  or  1\n2\n3 }   catch   ( SQLException   sqlex )   { \n     log . error ( \u201c Connect   failed \u201d ,   sqlex );  }    Logging configuration file is required\notherwise there is no logging   Format is framework dependent  File goes into  src/main/resources  See the sample code for an example", 
            "title": "How to Use it"
        }, 
        {
            "location": "/Software-Project/logging/#bibliography", 
            "text": "Sample code:  https://gitlab.com/omniprof/LoggingDemo.git  http://www.codeproject.com/Articles/42354/The-Art-of-Logging  http://zeroturnaround.com/rebellabs/the-state-of-logging-in-java-2013/  http://www.slf4j.org/  http://www.slf4j.org/manual.html  http://log4jtester.com/  http://logging.apache.org/log4j/2.x/manual/layouts.html#PatternLayout", 
            "title": "Bibliography"
        }, 
        {
            "location": "/Software-Project/maven/", 
            "text": "Maven \nWeek 1 [August 25]\n\n\n\u2754Wat ist dis\n\n\nA software project management and comprehension tool.\nMaven is a standalone java application.\n\n\nMaven Build System\n\n\n\n\nEnsures that the right library jars are in the build path of a project\n\n\nManages compiling/building\n\n\nExecutes unit tests\n\n\nProjects can be used in different IDEs \n\n\n\n\nStandard Project Directory Layout\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n-src\n  -main\n    -java\n    -resources\n    -webapp\n  -test\n    -java\n    -resources\n-target\n\n\n\n\n\n\n\n\nsrc\n\n\ncontains all of the source material for building the project\n\n\n\n\n\n\nsrc/main/java\n\n\nJava source files (packages are here)\n\n\n\n\n\n\nsrc/main/resources\n\n\nNon code resources such as CSS, images, etc.\n\n\n\n\n\n\nsrc/test/java\n\n\nJava source code for tests\n\n\n\n\n\n\nsrc/test/resources\n\n\nNon code resources used only for tests\n\n\n\n\n\n\nsrc/main/webapp\n\n\nRoot folder of a web application, home to HTML, JSF, etc. \n\n\nWill be used next semester\n\n\n\n\n\n\ntarget\n\n\nused to house all output of the build\n\n\n\n\n\n\n\n\nFor more information on the standard directory structure see \nhttps://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html\n\n\nMaven POM - Project Object Model\n\n\nMaven uses a file called \npom\n, create a local repository and puts it in. It's in your build path so now when you go to compile your code all the libraries are visible. And when you build/package it, it goes into your \n.jar\n. It then officially becomes a fat \n.jar\n.\n\n\n\n\nDescribes a project\n\n\nName and Version\n\n\nModule Type (\n.jar\n,\n.war\n, etc.)\n\n\nSource Code Locations (optional)\n\n\nDependencies\n\n\nPlugins\n\n\nProfiles (Alternate build configurations)\n\n\nWritten as an XML file\n\n\n\n\nBuild Cycle\n\n\nOnly \nthree build lifecycles\n\n\n\n\nclean\n \u2013project cleaning\n\n\ndefault\n \u2013building and deploying project\n\n\nsite\n \u2013 generation of project documentation\n\n\n\n\nLifecycles are broken down into build phases\nPhases are made up of goals\n\n\nBuild Phases for Default Lifecycle\n\n\n\n\nvalidate\n: check \npom.xml\n\n\ncompile\n: compile the source\n\n\ntest\n: run unit tests\n\n\npackage\n: create \njar/war/...\n\n\nverify\n: verify the package\n\n\ninstall\n: publish package to local repo\n\n\ndeploy\n: publish package to remote repo\n\n\n\n\nExtras\n\n\nPlugins\n\n\n\n\nArtifacts/modules that extend what Maven does\n\n\nLarge library of plugins\n\n\nCan write your own\n\n\nBound to different lifecycle phases\n\n\n\n\nRepositories\n\n\n\n\nHolds build modules of various types\n\n\nLocal or remote\n\n\nIf a module is not found locally then remote is accessed\n\n\n\n\nMaven Repos\n\n\n\n\nDependencies downloaded from repositories via http\n\n\nUsually found in \n${user.home}/.m2/repository\n\n\n\n\nMaven Central is primary community repo\n\nhttp://repo1.maven.org/maven2\n\n\nThe Central Repository can be searched at:\n\nhttp://search.maven.org/#browse\n\n\nSnapshot Builds\n\n\n\n\nVersion of a project not yet been released\n\n\nVersion number ends with \n-SNAPSHOT\n\n\nDefine a project Snapshot until ready for  production\n\n\nIn prod, remove this\n\n\n\n\nMaven Coordinates\n\n\n\n\nAll projects are uniquely identified by a set of Maven Coordinates\n\n\nGroup ID\n\n\nArtifact ID\n\n\nVersion\n\n\n\n\n\n\ngroup-id:artifact-id:version\n\n\njunit:junit:4.11\n\n\norg.kuali.rice:core-api:2.2.1\n\n\ncom.kfcstandard:fxfishtable:1.12\n\n\n\n\n\n\n\n\nExample: If your domain is \nkitties.com\n, your package would be \ncom.kitties.~\n\n\nFor this classe's purposes, we will be using something along the lines of \ncom.firsnamelastname.~\n\n\nBibliography\n\n\n\n\nMaven Homepage: \nhttp://maven.apache.org\n\n\nReference Documentation for Maven\n\n\nReference Documentation for core Plugins\n\n\n\n\n\n\nDescription of the pom.xml that must be used in this course\n\n\nhttps://www.omnijava.com/2017/08/23/the-kfcstandard-pom-xml-file-update/\n\n\n\n\n\n\n\n\nExample POM\n\n\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nproject\n \nxmlns=\nhttp://maven.apache.org/POM/4.0.0\n \nxmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n         \nxsi:schemaLocation=\nhttp://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\n\n\n    \n!-- Maven version of the xml document currently only 4.0.0 is valid --\n\n    \nmodelVersion\n4.0.0\n/modelVersion\n\n\n    \n!-- The GAV consists of an arbitrary descriptor that is usually in the\n\n\n    form of a reverse domain name. --\n\n    \ngroupId\ncom.kfdesktopstandard\n/groupId\n\n\n    \n!-- This is the name given to the packaged build --\n\n    \nartifactId\nkf_desktop_standard_project\n/artifactId\n\n\n    \n!-- The version of the build. Any value is valid though a number and a\n\n\n    string are common. SNAPSHOT means a project under development. FINAL or no\n\n\n    text is commonly used to refer to stable production version --\n\n    \nversion\n1.1-SNAPSHOT\n/version\n\n\n    \n!-- Default value is jar but may be war or ear --\n\n    \npackaging\njar\n/packaging\n\n\n    \n!-- The name given to the project. Unlike groupId and artifactId a name\n\n\n    may have spaces. By default it is the following so it is optional --\n\n    \nname\n${project.artifactId}\n/name\n\n\n    \n!-- A description of the program --\n\n    \ndescription\nStandard starting point for JavaFX programs for students of Ken Fogel\n        that displays a table of data using JavaFX and JDBC\n/description\n\n\n    \n!-- Identifies the programmer or programmers who worked on the project --\n\n    \ndevelopers\n\n        \ndeveloper\n\n            \nid\nEnter your school id\n/id\n\n            \nname\nEnter your name\n/name\n\n            \nemail\nEnter your email address\n/email\n\n        \n/developer\n\n    \n/developers\n\n\n    \n!-- The company or organization that the programmer(s) work for --\n\n    \norganization\n\n        \nname\nEnter school name\n/name\n\n    \n/organization\n\n\n    \n!-- Global settings for the project. Settings can be accessed in the pom\n\n\n    by placing the tag name in ${...} ex. ${mainClass} --\n\n    \nproperties\n\n        \nproject.build.sourceEncoding\nUTF-8\n/project.build.sourceEncoding\n\n        \nmaven.compiler.source\n1.8\n/maven.compiler.source\n\n        \nmaven.compiler.target\n1.8\n/maven.compiler.target\n\n\n        \n!-- class that has the main method --\n\n        \nmainClass\n${project.groupId}.MainApp\n/mainClass\n\n    \n/properties\n\n\n    \ndependencies\n\n\n        \n!-- The dependency for the SLF4J Facade --\n\n        \ndependency\n\n            \ngroupId\norg.slf4j\n/groupId\n\n            \nartifactId\nslf4j-api\n/artifactId\n\n            \nversion\n1.7.25\n/version\n\n        \n/dependency\n\n        \n!-- Binding for Log4J --\n\n        \ndependency\n\n            \ngroupId\norg.apache.logging.log4j\n/groupId\n\n            \nartifactId\nlog4j-slf4j-impl\n/artifactId\n\n            \nversion\n2.8.2\n/version\n\n        \n/dependency\n\n        \n!-- Logging Framework Dependency Uses the log4j2 library --\n\n        \ndependency\n\n            \ngroupId\norg.apache.logging.log4j\n/groupId\n\n            \nartifactId\nlog4j-api\n/artifactId\n\n            \nversion\n2.8.2\n/version\n\n        \n/dependency\n\n        \ndependency\n\n            \ngroupId\norg.apache.logging.log4j\n/groupId\n\n            \nartifactId\nlog4j-core\n/artifactId\n\n            \nversion\n2.8.2\n/version\n\n        \n/dependency\n\n\n        \n!-- JUnit 4 testing dependency --\n\n        \ndependency\n\n            \ngroupId\njunit\n/groupId\n\n            \nartifactId\njunit\n/artifactId\n\n            \nversion\n4.12\n/version\n\n            \n!-- only to be used during test, phase will not be included in executable jar --\n\n            \nscope\ntest\n/scope\n\n        \n/dependency\n\n\n        \n!-- MySQL dependency --\n\n        \ndependency\n\n            \ngroupId\nmysql\n/groupId\n\n            \nartifactId\nmysql-connector-java\n/artifactId\n\n            \nversion\n5.1.43\n/version\n\n        \n/dependency\n\n\n\n    \n/dependencies\n\n\n    \nbuild\n\n        \n!-- Goals may be set in the IDE or the pom IDE or CLI goals override the\n\n\n        defaultGoal --\n\n        \ndefaultGoal\nclean compile package exec:exec\n/defaultGoal\n\n\n        \n!-- Plugins define components that perform actions --\n\n        \nplugins\n\n            \n!-- Shade: Create an executable jar containing all the dependencies when\n\n\n            the package goal is carried out --\n\n            \nplugin\n\n                \ngroupId\norg.apache.maven.plugins\n/groupId\n\n                \nartifactId\nmaven-shade-plugin\n/artifactId\n\n                \nversion\n3.0.0\n/version\n\n                \nexecutions\n\n                    \nexecution\n\n                        \ngoals\n\n                            \ngoal\nshade\n/goal\n\n                        \n/goals\n\n                        \nconfiguration\n\n                            \ntransformers\n\n                                \ntransformer\n \nimplementation=\n\n                      \norg.apache.maven.plugins.shade.resource.ManifestResourceTransformer\n\n                                    \nmainClass\n${mainClass}\n/mainClass\n\n                                \n/transformer\n\n                            \n/transformers\n\n                        \n/configuration\n\n                    \n/execution\n\n                \n/executions\n\n            \n/plugin\n\n\n            \n!-- Exec: Executes the program --\n\n            \nplugin\n\n                \ngroupId\norg.codehaus.mojo\n/groupId\n\n                \nartifactId\nexec-maven-plugin\n/artifactId\n\n                \nversion\n1.6.0\n/version\n\n                \nexecutions\n\n                    \nexecution\n\n                        \nid\ndefault-cli\n/id\n\n                        \ngoals\n\n                            \n!-- Runs in separate instance of JVM --\n\n                            \ngoal\nexec\n/goal\n\n                            \n!-- Runs in same instance of the JVM as Maven --\n\n                            \ngoal\njava\n/goal\n\n                        \n/goals\n\n                        \nconfiguration\n\n                            \n!--used by java goal --\n\n                            \n!--executes in the same VM that Maven runs in --\n\n                            \nmainClass\n${mainClass}\n/mainClass\n\n\n                            \n!--used by exec goal --\n\n                            \n!--runs in a separate VM from the one that Maven runs in --\n\n                            \nexecutable\n${java.home}/bin/java\n/executable\n\n                            \ncommandlineArgs\n-jar ${project.build.directory}/${project.build.finalName}.jar\n/commandlineArgs\n\n                        \n/configuration\n\n\n                    \n/execution\n\n                \n/executions\n\n            \n/plugin\n\n\n            \n!-- Executes JUnit tests and writes the results as an xml and\n\n\n            txt file Test classes must include one of the following in their\n\n\n            name: Test* *Test *TestCase --\n\n            \nplugin\n\n                \ngroupId\norg.apache.maven.plugins\n/groupId\n\n                \nartifactId\nmaven-surefire-plugin\n/artifactId\n\n                \nversion\n2.20\n/version\n\n                \nconfiguration\n\n                    \nargLine\n-Dfile.encoding=${project.build.sourceEncoding}\n/argLine\n\n                    \nskipTests\nfalse\n/skipTests\n\n                \n/configuration\n\n            \n/plugin\n\n\n        \n/plugins\n\n    \n/build\n\n\n/project", 
            "title": "Maven"
        }, 
        {
            "location": "/Software-Project/maven/#maven-week-1-august-25", 
            "text": "", 
            "title": "Maven Week 1 [August 25]"
        }, 
        {
            "location": "/Software-Project/maven/#wat-ist-dis", 
            "text": "A software project management and comprehension tool.\nMaven is a standalone java application.", 
            "title": "\u2754Wat ist dis"
        }, 
        {
            "location": "/Software-Project/maven/#maven-build-system", 
            "text": "Ensures that the right library jars are in the build path of a project  Manages compiling/building  Executes unit tests  Projects can be used in different IDEs", 
            "title": "Maven Build System"
        }, 
        {
            "location": "/Software-Project/maven/#standard-project-directory-layout", 
            "text": "1\n2\n3\n4\n5\n6\n7\n8\n9 -src\n  -main\n    -java\n    -resources\n    -webapp\n  -test\n    -java\n    -resources\n-target    src  contains all of the source material for building the project    src/main/java  Java source files (packages are here)    src/main/resources  Non code resources such as CSS, images, etc.    src/test/java  Java source code for tests    src/test/resources  Non code resources used only for tests    src/main/webapp  Root folder of a web application, home to HTML, JSF, etc.   Will be used next semester    target  used to house all output of the build     For more information on the standard directory structure see  https://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html", 
            "title": "Standard Project Directory Layout"
        }, 
        {
            "location": "/Software-Project/maven/#maven-pom-project-object-model", 
            "text": "Maven uses a file called  pom , create a local repository and puts it in. It's in your build path so now when you go to compile your code all the libraries are visible. And when you build/package it, it goes into your  .jar . It then officially becomes a fat  .jar .   Describes a project  Name and Version  Module Type ( .jar , .war , etc.)  Source Code Locations (optional)  Dependencies  Plugins  Profiles (Alternate build configurations)  Written as an XML file", 
            "title": "Maven POM - Project Object Model"
        }, 
        {
            "location": "/Software-Project/maven/#build-cycle", 
            "text": "Only  three build lifecycles   clean  \u2013project cleaning  default  \u2013building and deploying project  site  \u2013 generation of project documentation   Lifecycles are broken down into build phases\nPhases are made up of goals", 
            "title": "Build Cycle"
        }, 
        {
            "location": "/Software-Project/maven/#build-phases-for-default-lifecycle", 
            "text": "validate : check  pom.xml  compile : compile the source  test : run unit tests  package : create  jar/war/...  verify : verify the package  install : publish package to local repo  deploy : publish package to remote repo", 
            "title": "Build Phases for Default Lifecycle"
        }, 
        {
            "location": "/Software-Project/maven/#extras", 
            "text": "", 
            "title": "Extras"
        }, 
        {
            "location": "/Software-Project/maven/#plugins", 
            "text": "Artifacts/modules that extend what Maven does  Large library of plugins  Can write your own  Bound to different lifecycle phases", 
            "title": "Plugins"
        }, 
        {
            "location": "/Software-Project/maven/#repositories", 
            "text": "Holds build modules of various types  Local or remote  If a module is not found locally then remote is accessed", 
            "title": "Repositories"
        }, 
        {
            "location": "/Software-Project/maven/#maven-repos", 
            "text": "Dependencies downloaded from repositories via http  Usually found in  ${user.home}/.m2/repository   Maven Central is primary community repo http://repo1.maven.org/maven2  The Central Repository can be searched at: http://search.maven.org/#browse", 
            "title": "Maven Repos"
        }, 
        {
            "location": "/Software-Project/maven/#snapshot-builds", 
            "text": "Version of a project not yet been released  Version number ends with  -SNAPSHOT  Define a project Snapshot until ready for  production  In prod, remove this", 
            "title": "Snapshot Builds"
        }, 
        {
            "location": "/Software-Project/maven/#maven-coordinates", 
            "text": "All projects are uniquely identified by a set of Maven Coordinates  Group ID  Artifact ID  Version    group-id:artifact-id:version  junit:junit:4.11  org.kuali.rice:core-api:2.2.1  com.kfcstandard:fxfishtable:1.12     Example: If your domain is  kitties.com , your package would be  com.kitties.~  For this classe's purposes, we will be using something along the lines of  com.firsnamelastname.~", 
            "title": "Maven Coordinates"
        }, 
        {
            "location": "/Software-Project/maven/#bibliography", 
            "text": "Maven Homepage:  http://maven.apache.org  Reference Documentation for Maven  Reference Documentation for core Plugins    Description of the pom.xml that must be used in this course  https://www.omnijava.com/2017/08/23/the-kfcstandard-pom-xml-file-update/", 
            "title": "Bibliography"
        }, 
        {
            "location": "/Software-Project/maven/#example-pom", 
            "text": "1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175 ?xml version= 1.0  encoding= UTF-8 ?  project   xmlns= http://maven.apache.org/POM/4.0.0   xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n          xsi:schemaLocation= http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd \n\n     !-- Maven version of the xml document currently only 4.0.0 is valid -- \n     modelVersion 4.0.0 /modelVersion \n\n     !-- The GAV consists of an arbitrary descriptor that is usually in the      form of a reverse domain name. -- \n     groupId com.kfdesktopstandard /groupId \n\n     !-- This is the name given to the packaged build -- \n     artifactId kf_desktop_standard_project /artifactId \n\n     !-- The version of the build. Any value is valid though a number and a      string are common. SNAPSHOT means a project under development. FINAL or no      text is commonly used to refer to stable production version -- \n     version 1.1-SNAPSHOT /version \n\n     !-- Default value is jar but may be war or ear -- \n     packaging jar /packaging \n\n     !-- The name given to the project. Unlike groupId and artifactId a name      may have spaces. By default it is the following so it is optional -- \n     name ${project.artifactId} /name \n\n     !-- A description of the program -- \n     description Standard starting point for JavaFX programs for students of Ken Fogel\n        that displays a table of data using JavaFX and JDBC /description \n\n     !-- Identifies the programmer or programmers who worked on the project -- \n     developers \n         developer \n             id Enter your school id /id \n             name Enter your name /name \n             email Enter your email address /email \n         /developer \n     /developers \n\n     !-- The company or organization that the programmer(s) work for -- \n     organization \n         name Enter school name /name \n     /organization \n\n     !-- Global settings for the project. Settings can be accessed in the pom      by placing the tag name in ${...} ex. ${mainClass} -- \n     properties \n         project.build.sourceEncoding UTF-8 /project.build.sourceEncoding \n         maven.compiler.source 1.8 /maven.compiler.source \n         maven.compiler.target 1.8 /maven.compiler.target \n\n         !-- class that has the main method -- \n         mainClass ${project.groupId}.MainApp /mainClass \n     /properties \n\n     dependencies \n\n         !-- The dependency for the SLF4J Facade -- \n         dependency \n             groupId org.slf4j /groupId \n             artifactId slf4j-api /artifactId \n             version 1.7.25 /version \n         /dependency \n         !-- Binding for Log4J -- \n         dependency \n             groupId org.apache.logging.log4j /groupId \n             artifactId log4j-slf4j-impl /artifactId \n             version 2.8.2 /version \n         /dependency \n         !-- Logging Framework Dependency Uses the log4j2 library -- \n         dependency \n             groupId org.apache.logging.log4j /groupId \n             artifactId log4j-api /artifactId \n             version 2.8.2 /version \n         /dependency \n         dependency \n             groupId org.apache.logging.log4j /groupId \n             artifactId log4j-core /artifactId \n             version 2.8.2 /version \n         /dependency \n\n         !-- JUnit 4 testing dependency -- \n         dependency \n             groupId junit /groupId \n             artifactId junit /artifactId \n             version 4.12 /version \n             !-- only to be used during test, phase will not be included in executable jar -- \n             scope test /scope \n         /dependency \n\n         !-- MySQL dependency -- \n         dependency \n             groupId mysql /groupId \n             artifactId mysql-connector-java /artifactId \n             version 5.1.43 /version \n         /dependency \n\n\n     /dependencies \n\n     build \n         !-- Goals may be set in the IDE or the pom IDE or CLI goals override the          defaultGoal -- \n         defaultGoal clean compile package exec:exec /defaultGoal \n\n         !-- Plugins define components that perform actions -- \n         plugins \n             !-- Shade: Create an executable jar containing all the dependencies when              the package goal is carried out -- \n             plugin \n                 groupId org.apache.maven.plugins /groupId \n                 artifactId maven-shade-plugin /artifactId \n                 version 3.0.0 /version \n                 executions \n                     execution \n                         goals \n                             goal shade /goal \n                         /goals \n                         configuration \n                             transformers \n                                 transformer   implementation= \n                       org.apache.maven.plugins.shade.resource.ManifestResourceTransformer \n                                     mainClass ${mainClass} /mainClass \n                                 /transformer \n                             /transformers \n                         /configuration \n                     /execution \n                 /executions \n             /plugin \n\n             !-- Exec: Executes the program -- \n             plugin \n                 groupId org.codehaus.mojo /groupId \n                 artifactId exec-maven-plugin /artifactId \n                 version 1.6.0 /version \n                 executions \n                     execution \n                         id default-cli /id \n                         goals \n                             !-- Runs in separate instance of JVM -- \n                             goal exec /goal \n                             !-- Runs in same instance of the JVM as Maven -- \n                             goal java /goal \n                         /goals \n                         configuration \n                             !--used by java goal -- \n                             !--executes in the same VM that Maven runs in -- \n                             mainClass ${mainClass} /mainClass \n\n                             !--used by exec goal -- \n                             !--runs in a separate VM from the one that Maven runs in -- \n                             executable ${java.home}/bin/java /executable \n                             commandlineArgs -jar ${project.build.directory}/${project.build.finalName}.jar /commandlineArgs \n                         /configuration \n\n                     /execution \n                 /executions \n             /plugin \n\n             !-- Executes JUnit tests and writes the results as an xml and              txt file Test classes must include one of the following in their              name: Test* *Test *TestCase -- \n             plugin \n                 groupId org.apache.maven.plugins /groupId \n                 artifactId maven-surefire-plugin /artifactId \n                 version 2.20 /version \n                 configuration \n                     argLine -Dfile.encoding=${project.build.sourceEncoding} /argLine \n                     skipTests false /skipTests \n                 /configuration \n             /plugin \n\n         /plugins \n     /build  /project", 
            "title": "Example POM"
        }, 
        {
            "location": "/Software-Project/outline/", 
            "text": "Warning\n\n\n\ud83d\udea7 Under Construction\n\n\n\n\nCOURSE OUTLINE \nJava III\n\n\nNumber: 420-517-DW\n\n\n\n\nPonderation: 3-3-3\n\n\nCredits:  3\n\n\n\n\nPrerequisites:\n\n\nSuccessful completion of all Year 2 420.A0 courses\n\n\nCo-requisites:\n\n\n\n\n\n\n420-518-DW Mobile Software Development:  Android\n\n\n\n\n\n\n420-524-DW Internet Application Development III:  PHP\n\n\n\n\n\n\n420-544-DW Data Communications and Networking\n\n\n\n\n\n\nDomain:\n\n\nProgramming, Data Structures and Algorithms\n\n\n\n\nNote\n\n\nYou must pass this course as well as the three co-requisite courses in order to progress to the sixth semester of the Computer Science Technology Program.\n\n\n\n\nDescription\n\n\nIn this course you will learn to design, code and test a desktop application. The application will employ a JavaFX graphical user interface. The data for the application will be stored in and retrieved from a relational database using the Java Database Connectivity library. All components of the application will be tested using the JUnit framework. You will learn the purpose of, the application of and how to code common data structures. You will also review the data structures provided in the Java Collections Framework. These data structures will be applied to the development of code that implements algorithms. You will learn to use a build system to manage your code a repository to store your code.\n\n\nSTATEMENTS OF COMPETENCE\n\n\n\n\nUse an object oriented development approach (016T)\n\n\nProduce algorithms (016W)\n\n\nDevelop user interfaces. (016X)\n\n\nOrganize and use data (0170)\n\n\nCorrect programs (0171)\n\n\nMake functional improvements to an application (0176)\n\n\nAssure the quality of an application (0177)\n\n\nDesign and develop applications in a graphics environment (017C)\n\n\n\n\nContacting Teachers\n\n\nKen Fogel 3F.18                       479901,02\n\n\nTeacher\ns schedule will be posted outside the office by the end of the first week of classes.\n\n\nCourse Objectives:\n\n\nUpon completion of this course the student will be able to:\n\n\n1) Develop Java applications that use JavaFX framework (016X)\n\n\n2) Connect a Java application to a database by utilizing Java Data Base Connectivity (JDBC) libraries (0170)\n\n\n3) Explain the concepts for and apply practically in an application data structures such as stacks, lists, queues, linked lists and binary trees (016W)\n\n\n4) Code stacks, lists, queues and linked lists (016W)\n\n\n4) Use the Java Collections Framework to employ data structures in an application (0170)\n\n\n5) Issue SQL commands to a database and display the result set in an appropriate GUI component such as an Update Table (0170)\n\n\n6) Manage application development using a build system\n\n\n7) Test and validate your code using the unit testing framework (0171, 0177)\n\n\n8) Write a desktop application from a given specification (016T, 017C, 0177, 016W)\n\n\nCourse Methodology\n\n\nThe course consists of two 1\u00bd-hour lectures and one 3-hour lab session per week.  Concepts and techniques will be presented in lectures and practical exercises that apply to the concepts and techniques will be carried out in lab sessions.\n\n\nReadings\n\n\nMore readings will be announced in class\n\n\nJavaFX\n\n\nhttp://docs.oracle.com/javase/8/javase-clienttechnologies.htm\n\n\nCollections\n\n\nhttp://docs.oracle.com/javase/tutorial/collections/index.html\n\n\nGenerics\n\n\nhttp://docs.oracle.com/javase/tutorial/extra/generics/index.html\n\n\nJDBC Database Access\n\n\nhttp://docs.oracle.com/javase/tutorial/jdbc/basics/index.html\n\n\nInternationalization\n\n\nhttp://docs.oracle.com/javase/tutorial/i18n/index.html\n\n\nJODD Email\n\n\nhttp://jodd.org/doc/email.html\n\n\nJUnit 4\n\n\n1\n    http://www.vogella.com/tutorials/JUnit/article.html\n\n\n\n\n\n\nGit\n\n\n1\n    Pro Git Book [http://git-scm.com/book Chapters 1-3](http://git-scm.com/book%20Chapters%201-3)\n\n\n\n\n\n\nRequired\n\n\n\n\nOne 32 Gig USB 3.0 (not 2.0) flash drive.\n\n\nAn account on GitLab.com (not Github or any other service).\n\n\nFour Gmail accounts for testing of the email application.\n\n\n\n\nAssessment of student performance\n\n\n\n\n\n\nMidterm Examination\n\n\n\n\nDuration: 1 \n hours       \n\n\n20%  (Week 7)\n\n\n\n\n\n\n\n\nFinal Examination\n\n\n\n\nDuration: 3 hours        \n\n\n35% (Exam period)\n\n\n\n\n\n\n\n\nQuizzes\n\n\n\n\nWeeks 2, 5, 8, \n 12\n\n\n10%\n\n\n\n\n\n\n\n\nAssignments\n\n\n\n\n10%\n\n\nProject 25%\n\n\n\n\n\n\n\n\nCourse Topics \n Labs\n\n\n\n\n\n\n\n\nLectures\n\n\nTopic\n\n\nLab Work\n\n\n\n\n\n\n\n\n\n\n1\n\n\nPresentation of the course project\n\n\nThe Daily Planner Project\n\n\n\n\n\n\n2\n\n\nSoftware Versioning and Code Revision Systems\n\n\nSoftware Build System\n\n\n\n\n\n\n\n\nDiscuss how programmers manage code for themselves and as part of a team.\n\n\n\n\n\n\n\n\n\n\nLearn to use the open source Git system.\n\n\nConnect to a Git repository, download code and upload code.\n\n\n\n\n\n\n\n\nLearn to use Maven to manage the building of Java application.\n\n\nCreate projects that use Maven\n\n\n\n\n\n\n4\n\n\nJDBC\n\n\n\n\n\n\n\n\n\n\nSetup and configure the MySQL RDBMS\n\n\n\n\n\n\n\n\n\n\n- Examine the principles of interacting with a DBMS from within a program.\n\n\n\n\n\n\n\n\n\n\n- Examine the JDBC interface and classes that support database access.\n\n\n\n\n\n\n\n\n\n\nImplement the tasks necessary to: Connect to a database Issue an SQL statement Process the result\n\n\nImplement a database for storing appointments and a contact list\n\n\n\n\n\n\n2\n\n\nJUnit Testing\n\n\n\n\n\n\n\n\n\n\nExamine how the Junit Framework supports unit testing\n\n\n\n\n\n\n\n\n\n\nLearn to develop test cases and test suites\n\n\nDevelop a test plan and implement it\n\n\n\n\n\n\n2\n\n\nMail\n\n\n\n\n\n\n\n\n\n\nReview the principles of SMTP, POP, and IMAP systems.\n\n\n\n\n\n\n\n\n\n\nLearn to use the JODD Email API to connects to SMTP and IMAP mail systems to send and retrieve emails\n\n\nImplement the email portion of the project\n\n\n\n\n\n\n6\n\n\nJavaFX\n\n\n\n\n\n\n\n\n---\n\n\n---\n\n\n---\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- Examine the architecture of JavaFX\n\n\n\n\n\n\n\n\n\n\n- Scene Graph\n\n\n\n\n\n\n\n\n\n\n- Java Public APIs for JavaFX Features\n\n\n\n\n\n\n\n\n\n\n- Graphics System\n\n\n\n\n\n\n\n\n\n\n- Media and Images\n\n\n\n\n\n\n\n\n\n\n- Web Component\n\n\n\n\n\n\n\n\n\n\n- CSS\n\n\n\n\n\n\n\n\n\n\n- UI Controls\n\n\n\n\n\n\n\n\n\n\n- Layout\n\n\n\n\n\n\n\n\n\n\nCreate form based user interfacesDesign the daily planner project\ns user interface\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- Working with the Scene Builder tool use FXML to code user interfaces and implement MVC\n\n\n\n\n\n\n\n\n\n\n- View created with FXML\n\n\n\n\n\n\n\n\n\n\n- Model implemented as a Properties Bean\n\n\n\n\n\n\n\n\n\n\n- Controller implemented in Java objects that defines the behavior of the GUI\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nApply data validation to user input.\n\n\n.\n\n\n\n\n\n\n2\n\n\nInternationalization and Properties\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- Discuss how software is designed to work in multiple languages and locales.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- Examine the approach Java takes to support software that can dynamically change in different locales.\n\n\n\n\n\n\n\n\n\n\nImplement internationalization in the daily planner so that it can work in both English and French\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- Examine how programs can maintain configuration information\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- Examine the Java Properties class to store and retrieve configuration data\n\n\n\n\n\n\n\n\n\n\nImplement the daily planner configuration in a Properties file.\n\n\n\n\n\n\n\n\n\n\n5\n\n\nSequential Data Structures\n\n\nThe following lab work will make up the assignments portion of the grading scheme\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- Review the workings of and interface for static arrays and dynamic arrays.\n\n\n\n\n\n\n\n\n\n\nCode a dynamic array that implements a supplied interface\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- Examine the interface of a stack data structure and how it is implemented using a sequence data structure\n\n\n\n\n\n\n\n\n\n\nCode a stack that implements a supplied interface such that it could use the dynamic array or linked list created in the previous labs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- Examine the interface of a queue and deque data structures and how they are implemented using a sequence data structure\n\n\n\n\n\n\n\n\n\n\nCode a deque that implements a supplied interface such that it could use the dynamic array or linked list created in the previous labs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- Examine the workings of and interface for a linked list data structure\n\n\n\n\n\n\n\n\n\n\nCode a linked list that implements a supplied interface\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- Examine the Java Collections classes and interfaces for sequential data structures.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3\n\n\nNon-sequential data structures\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- Examine the Java Collections classes and interfaces for non-sequential or unordered data structures such as sets and maps.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- Compare the performance of the various collections classes to determine the best choice for an algorithm.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLab Activities\n\n\nProject\n\n\nDuring the first 9 weeks of the term you will work individually on a project that will demonstrate your achievement of the appropriate objectives in this course. The project will be broken into four phases.\n\n\nFor Fall 2017 the project will be an Daily Planner program. The four phases of this project will be:\n\n\n1)        Design, implement, and unit test the database business and data classes\n\n\nDue on September 18 10:00 AM\n\n\n2)        Design and implement the email business and data classes.\n\n\nDue on September 25 10:00 AM\n\n\n3)        Design and implement a graphical user interface\n\n\nDue on October 16 10:00 AM\n\n\n4)        Deliver the finished application.\n\n\nDue on October 30 10:00 AM\n\n\nPhases 1 must include unit tests. These tests will remain a part of the project till the end.\n\n\nThe project will be completed by October 10, 2017 or sooner. \nThere will be no extension.\n Each phase is worth 25% of the total project mark. If one of the first three phases fails to meet the project requirements it may be resubmitted and a new grade not exceeding 80% of that phase\ns grade may be assigned. Failure to successfully complete any phase by October 30, 2017 will result in a maximum final project grade of 7/25 and a failure in the course.\n\n\nIndividual Labs\n\n\nDuring the last 6 weeks of the course you will complete a series of assignments on the topic of data structures that will demonstrate your achievement of the appropriate objectives.\n\n\nProgram rules and regulations\n\n\nFor 420 career program courses, students must receive at least 50% on the assignment component and at least 60% on the examination component in order to obtain a passing grade for the course. Failure to do so will result in a maximum grade of 50 (the lower of 50 or the grade earned). For the purpose of this rule, quizzes are considered exams.**\n\n\nAssignments are due at the due date specified by the instructor. Assignments received after this time are late. Assignments will not be accepted after due date set by instructor. In exceptional circumstances, such as illness, etc. labs submitted late will be graded provided that the student has received an extension from the instructor in advance.\n\n\nEach student must submit their own individual answers to assignments, and shared solutions are not acceptable. Students must protect their work from being easily copied by others by introducing uniqueness into their work in the choice of images used, the display styles used in the presentation of documents, the originality of the written descriptive passages, and by placing digital signatures on their original images.\n\n\nStudents are reminded that they are responsible for all material presented in the lecture and during the lab, and are expected to obtain material they have missed.\n\n\nStudents must follow exactly the instructions in the lab exercises about how and where to store all computer files in order for their work to be accepted and properly evaluated.\n\n\nThis course outline has been prepared in conformity with the\n \nInstitutional Student Evaluation Policy (I.S.E.P.)\n. The \npolicy is designed to promote equitable and effective evaluation of student learning\n and is\n \ntherefore a crucial policy for you to read and understand\n \n. The policy describes the rights and obligations of students, faculty, departments, programs, and the College administration with regard to evaluation in all your courses.\n \nI.S.E.P.\n \nis published in the College Calendar and reference copies are available in the Library and in the offices of program chairs and the Dean of Social Science \n Business Technologies\n.\n\n\nDAWSON COLLEGE**\n\n\nCOMPUTER SCIENCE DEPARTMENT**\n\n\nPOLICIES**\n\n\n1.        ACADEMIC INTEGRITY**\n\n\nThe Computer Science Department adheres to the Dawson College Academic Conduct policy. Students have an obligation to inform themselves of all aspects of this policy. According to ISEP, the teacher is required to report to the Sector Dean all cases of cheating and plagiarism affecting a student\ns grade. (ISEP Section IV-C) Students may appeal any decision of the teacher regarding cheating and plagiarism according to the methods established by the College. The penalty for cheating or plagiarism may range from a zero on the work to a failure in the course.\n\n\n2.        ATTENDANCE AND LATENESS**\n\n\nStudents are responsible for all material covered in classes and labs, whether or not they are present. Students have an obligation to arrive on time and to remain for the duration of scheduled classes, labs and activities. Students who disregard this obligation may be asked to leave the class, lab or activity. Students should refer to the Institutional Student Evaluation Policy (ISEP Section III-C) regarding attendance.\n\n\n3.        RELIGIOUS HOLIDAY OBSERVANCE**\n\n\nClass period(s) may be cancelled in order that the teacher can observe religious holidays. Any material missed as a result, will be made up during labs, class periods and alternate tutorial sessions.\n\n\nStudents, who intend to observe religious holidays, must inform their teachers in writing as prescribed in the ISEP Policy on Religious Observances (ISEP Section III-D) Students absent from classes because of observance of religious holidays will not be penalized. It must be emphasized, however, that this College policy should not be interpreted to mean that a student can receive credit for work not performed. It is the student\ns responsibility to fulfill the requirements of the alternative arrangement.\n\n\n4.        SOFTWARE**\n\n\nThe Computer Science Department forbids the use of the computer labs it uses to make any copies of any software without the explicit authorization of the Department. Apart from any legal action that might arise from such unauthorized copying, the Computer Science Department reserves the right to discipline any student involved in such activity.\n\n\nStudents who borrow software from the College and fail to return it will be placed on the defaulter list and be subject to the appropriate penalties.\n\n\nViruses are programs that attach themselves to a computer system without the permission of those to whom the system belongs. They are deliberately written to be, at worst, harmful (e.g. destroying the contents of disks) and, at best, bothersome (e.g. disturbing the image shown on the screen). They can cause serious losses of time and effort for students, staff and faculty. Any student involved in the deliberate spreading of viruses is subject to the most severe penalties prescribed by College regulations, apart from any legal action that might arise from such acts.\n\n\n5.        LITERACY**\n\n\nThe Computer Science Department recognizes that literacy in all its forms (read, written, spoken) is essential to our students in their careers.\n\n\nTeachers may choose to incorporate a literacy component into the marking scheme for any piece of work. Teachers may use their discretion to insist that any piece of work submitted for credit is revised by the student if it is unsatisfactory with regard to literacy.\n\n\nTeachers will inform all students in their courses of this policy at the beginning of each semester either by including it in the course description or otherwise.\n\n\n6.        CELL PHONES**\n\n\nThe use of cell phones in all Computer Science lectures, labs and exams is prohibited.\n\n\n7.        PORTABLE COMPUTERS**\n\n\nThe use of portable computers in all Computer Science lectures for purposes other than note-taking is prohibited.\n\n\n8.        STUDENT CONDUCT**\n\n\nEveryone has the right to a safe and non-violent environment. Students are obliged to conduct themselves as stated in the Student Code of Conduct and in the ISEP section on the roles and responsibilities of students. (ISEP section II-D)\n\n\n9.        INTENSIVE COURSE CONFLICTS**\n\n\nIf a student is attending an intensive course, the student must inform the teacher, within the first two weeks of class, of the specific dates of any anticipated absences.\n\n\n10.        ISEP**\n\n\nThe Institutional Student Evaluation Policy (ISEP) is designed to promote equitable and effective evaluation of student learning and is therefore a crucial policy to read and understand. The policy describes the rights and obligations of students, faculty, departments, programs, and the College administration with regard to evaluation in all your courses, including grade reviews and resolution of academic grievance. The ISEP is available on the Dawson website.", 
            "title": "Outline"
        }, 
        {
            "location": "/Software-Project/outline/#course-outline-java-iii", 
            "text": "", 
            "title": "COURSE OUTLINE Java III"
        }, 
        {
            "location": "/Software-Project/outline/#number-420-517-dw", 
            "text": "Ponderation: 3-3-3  Credits:  3", 
            "title": "Number: 420-517-DW"
        }, 
        {
            "location": "/Software-Project/outline/#prerequisites", 
            "text": "Successful completion of all Year 2 420.A0 courses", 
            "title": "Prerequisites:"
        }, 
        {
            "location": "/Software-Project/outline/#co-requisites", 
            "text": "420-518-DW Mobile Software Development:  Android    420-524-DW Internet Application Development III:  PHP    420-544-DW Data Communications and Networking", 
            "title": "Co-requisites:"
        }, 
        {
            "location": "/Software-Project/outline/#domain", 
            "text": "Programming, Data Structures and Algorithms   Note  You must pass this course as well as the three co-requisite courses in order to progress to the sixth semester of the Computer Science Technology Program.", 
            "title": "Domain:"
        }, 
        {
            "location": "/Software-Project/outline/#description", 
            "text": "In this course you will learn to design, code and test a desktop application. The application will employ a JavaFX graphical user interface. The data for the application will be stored in and retrieved from a relational database using the Java Database Connectivity library. All components of the application will be tested using the JUnit framework. You will learn the purpose of, the application of and how to code common data structures. You will also review the data structures provided in the Java Collections Framework. These data structures will be applied to the development of code that implements algorithms. You will learn to use a build system to manage your code a repository to store your code.", 
            "title": "Description"
        }, 
        {
            "location": "/Software-Project/outline/#statements-of-competence", 
            "text": "Use an object oriented development approach (016T)  Produce algorithms (016W)  Develop user interfaces. (016X)  Organize and use data (0170)  Correct programs (0171)  Make functional improvements to an application (0176)  Assure the quality of an application (0177)  Design and develop applications in a graphics environment (017C)", 
            "title": "STATEMENTS OF COMPETENCE"
        }, 
        {
            "location": "/Software-Project/outline/#contacting-teachers", 
            "text": "Ken Fogel 3F.18                       479901,02  Teacher s schedule will be posted outside the office by the end of the first week of classes.", 
            "title": "Contacting Teachers"
        }, 
        {
            "location": "/Software-Project/outline/#course-objectives", 
            "text": "Upon completion of this course the student will be able to:  1) Develop Java applications that use JavaFX framework (016X)  2) Connect a Java application to a database by utilizing Java Data Base Connectivity (JDBC) libraries (0170)  3) Explain the concepts for and apply practically in an application data structures such as stacks, lists, queues, linked lists and binary trees (016W)  4) Code stacks, lists, queues and linked lists (016W)  4) Use the Java Collections Framework to employ data structures in an application (0170)  5) Issue SQL commands to a database and display the result set in an appropriate GUI component such as an Update Table (0170)  6) Manage application development using a build system  7) Test and validate your code using the unit testing framework (0171, 0177)  8) Write a desktop application from a given specification (016T, 017C, 0177, 016W)", 
            "title": "Course Objectives:"
        }, 
        {
            "location": "/Software-Project/outline/#course-methodology", 
            "text": "The course consists of two 1\u00bd-hour lectures and one 3-hour lab session per week.  Concepts and techniques will be presented in lectures and practical exercises that apply to the concepts and techniques will be carried out in lab sessions.", 
            "title": "Course Methodology"
        }, 
        {
            "location": "/Software-Project/outline/#readings", 
            "text": "More readings will be announced in class  JavaFX  http://docs.oracle.com/javase/8/javase-clienttechnologies.htm  Collections  http://docs.oracle.com/javase/tutorial/collections/index.html  Generics  http://docs.oracle.com/javase/tutorial/extra/generics/index.html  JDBC Database Access  http://docs.oracle.com/javase/tutorial/jdbc/basics/index.html  Internationalization  http://docs.oracle.com/javase/tutorial/i18n/index.html  JODD Email  http://jodd.org/doc/email.html  JUnit 4  1     http://www.vogella.com/tutorials/JUnit/article.html   Git  1     Pro Git Book [http://git-scm.com/book Chapters 1-3](http://git-scm.com/book%20Chapters%201-3)", 
            "title": "Readings"
        }, 
        {
            "location": "/Software-Project/outline/#required", 
            "text": "One 32 Gig USB 3.0 (not 2.0) flash drive.  An account on GitLab.com (not Github or any other service).  Four Gmail accounts for testing of the email application.", 
            "title": "Required"
        }, 
        {
            "location": "/Software-Project/outline/#assessment-of-student-performance", 
            "text": "Midterm Examination   Duration: 1   hours         20%  (Week 7)     Final Examination   Duration: 3 hours          35% (Exam period)     Quizzes   Weeks 2, 5, 8,   12  10%     Assignments   10%  Project 25%", 
            "title": "Assessment of student performance"
        }, 
        {
            "location": "/Software-Project/outline/#course-topics-labs", 
            "text": "Lectures  Topic  Lab Work      1  Presentation of the course project  The Daily Planner Project    2  Software Versioning and Code Revision Systems  Software Build System     Discuss how programmers manage code for themselves and as part of a team.      Learn to use the open source Git system.  Connect to a Git repository, download code and upload code.     Learn to use Maven to manage the building of Java application.  Create projects that use Maven    4  JDBC      Setup and configure the MySQL RDBMS      - Examine the principles of interacting with a DBMS from within a program.      - Examine the JDBC interface and classes that support database access.      Implement the tasks necessary to: Connect to a database Issue an SQL statement Process the result  Implement a database for storing appointments and a contact list    2  JUnit Testing      Examine how the Junit Framework supports unit testing      Learn to develop test cases and test suites  Develop a test plan and implement it    2  Mail      Review the principles of SMTP, POP, and IMAP systems.      Learn to use the JODD Email API to connects to SMTP and IMAP mail systems to send and retrieve emails  Implement the email portion of the project    6  JavaFX     ---  ---  ---         - Examine the architecture of JavaFX      - Scene Graph      - Java Public APIs for JavaFX Features      - Graphics System      - Media and Images      - Web Component      - CSS      - UI Controls      - Layout      Create form based user interfacesDesign the daily planner project s user interface           - Working with the Scene Builder tool use FXML to code user interfaces and implement MVC      - View created with FXML      - Model implemented as a Properties Bean      - Controller implemented in Java objects that defines the behavior of the GUI            Apply data validation to user input.  .    2  Internationalization and Properties          - Discuss how software is designed to work in multiple languages and locales.                - Examine the approach Java takes to support software that can dynamically change in different locales.      Implement internationalization in the daily planner so that it can work in both English and French           - Examine how programs can maintain configuration information                - Examine the Java Properties class to store and retrieve configuration data      Implement the daily planner configuration in a Properties file.      5  Sequential Data Structures  The following lab work will make up the assignments portion of the grading scheme         - Review the workings of and interface for static arrays and dynamic arrays.      Code a dynamic array that implements a supplied interface           - Examine the interface of a stack data structure and how it is implemented using a sequence data structure      Code a stack that implements a supplied interface such that it could use the dynamic array or linked list created in the previous labs           - Examine the interface of a queue and deque data structures and how they are implemented using a sequence data structure      Code a deque that implements a supplied interface such that it could use the dynamic array or linked list created in the previous labs           - Examine the workings of and interface for a linked list data structure      Code a linked list that implements a supplied interface           - Examine the Java Collections classes and interfaces for sequential data structures.           3  Non-sequential data structures          - Examine the Java Collections classes and interfaces for non-sequential or unordered data structures such as sets and maps.                - Compare the performance of the various collections classes to determine the best choice for an algorithm.", 
            "title": "Course Topics &amp; Labs"
        }, 
        {
            "location": "/Software-Project/outline/#lab-activities", 
            "text": "", 
            "title": "Lab Activities"
        }, 
        {
            "location": "/Software-Project/outline/#project", 
            "text": "", 
            "title": "Project"
        }, 
        {
            "location": "/Software-Project/outline/#during-the-first-9-weeks-of-the-term-you-will-work-individually-on-a-project-that-will-demonstrate-your-achievement-of-the-appropriate-objectives-in-this-course-the-project-will-be-broken-into-four-phases", 
            "text": "", 
            "title": "During the first 9 weeks of the term you will work individually on a project that will demonstrate your achievement of the appropriate objectives in this course. The project will be broken into four phases."
        }, 
        {
            "location": "/Software-Project/outline/#for-fall-2017-the-project-will-be-an-daily-planner-program-the-four-phases-of-this-project-will-be", 
            "text": "", 
            "title": "For Fall 2017 the project will be an Daily Planner program. The four phases of this project will be:"
        }, 
        {
            "location": "/Software-Project/outline/#1-design-implement-and-unit-test-the-database-business-and-data-classes", 
            "text": "", 
            "title": "1)        Design, implement, and unit test the database business and data classes"
        }, 
        {
            "location": "/Software-Project/outline/#due-on-september-18-1000-am", 
            "text": "", 
            "title": "Due on September 18 10:00 AM"
        }, 
        {
            "location": "/Software-Project/outline/#2-design-and-implement-the-email-business-and-data-classes", 
            "text": "", 
            "title": "2)        Design and implement the email business and data classes."
        }, 
        {
            "location": "/Software-Project/outline/#due-on-september-25-1000-am", 
            "text": "", 
            "title": "Due on September 25 10:00 AM"
        }, 
        {
            "location": "/Software-Project/outline/#3-design-and-implement-a-graphical-user-interface", 
            "text": "", 
            "title": "3)        Design and implement a graphical user interface"
        }, 
        {
            "location": "/Software-Project/outline/#due-on-october-16-1000-am", 
            "text": "", 
            "title": "Due on October 16 10:00 AM"
        }, 
        {
            "location": "/Software-Project/outline/#4-deliver-the-finished-application", 
            "text": "", 
            "title": "4)        Deliver the finished application."
        }, 
        {
            "location": "/Software-Project/outline/#due-on-october-30-1000-am", 
            "text": "", 
            "title": "Due on October 30 10:00 AM"
        }, 
        {
            "location": "/Software-Project/outline/#phases-1-must-include-unit-tests-these-tests-will-remain-a-part-of-the-project-till-the-end", 
            "text": "", 
            "title": "Phases 1 must include unit tests. These tests will remain a part of the project till the end."
        }, 
        {
            "location": "/Software-Project/outline/#the-project-will-be-completed-by-october-10-2017-or-sooner-there-will-be-no-extension-each-phase-is-worth-25-of-the-total-project-mark-if-one-of-the-first-three-phases-fails-to-meet-the-project-requirements-it-may-be-resubmitted-and-a-new-grade-not-exceeding-80-of-that-phases-grade-may-be-assigned-failure-to-successfully-complete-any-phase-by-october-30-2017-will-result-in-a-maximum-final-project-grade-of-725-and-a-failure-in-the-course", 
            "text": "", 
            "title": "The project will be completed by October 10, 2017 or sooner. There will be no extension. Each phase is worth 25% of the total project mark. If one of the first three phases fails to meet the project requirements it may be resubmitted and a new grade not exceeding 80% of that phase&#39;s grade may be assigned. Failure to successfully complete any phase by October 30, 2017 will result in a maximum final project grade of 7/25 and a failure in the course."
        }, 
        {
            "location": "/Software-Project/outline/#individual-labs", 
            "text": "", 
            "title": "Individual Labs"
        }, 
        {
            "location": "/Software-Project/outline/#during-the-last-6-weeks-of-the-course-you-will-complete-a-series-of-assignments-on-the-topic-of-data-structures-that-will-demonstrate-your-achievement-of-the-appropriate-objectives", 
            "text": "", 
            "title": "During the last 6 weeks of the course you will complete a series of assignments on the topic of data structures that will demonstrate your achievement of the appropriate objectives."
        }, 
        {
            "location": "/Software-Project/outline/#program-rules-and-regulations", 
            "text": "", 
            "title": "Program rules and regulations"
        }, 
        {
            "location": "/Software-Project/outline/#for-420-career-program-courses-students-must-receive-at-least-50-on-the-assignment-component-and-at-least-60-on-the-examination-component-in-order-to-obtain-a-passing-grade-for-the-course-failure-to-do-so-will-result-in-a-maximum-grade-of-50-the-lower-of-50-or-the-grade-earned-for-the-purpose-of-this-rule-quizzes-are-considered-exams", 
            "text": "Assignments are due at the due date specified by the instructor. Assignments received after this time are late. Assignments will not be accepted after due date set by instructor. In exceptional circumstances, such as illness, etc. labs submitted late will be graded provided that the student has received an extension from the instructor in advance.  Each student must submit their own individual answers to assignments, and shared solutions are not acceptable. Students must protect their work from being easily copied by others by introducing uniqueness into their work in the choice of images used, the display styles used in the presentation of documents, the originality of the written descriptive passages, and by placing digital signatures on their original images.  Students are reminded that they are responsible for all material presented in the lecture and during the lab, and are expected to obtain material they have missed.  Students must follow exactly the instructions in the lab exercises about how and where to store all computer files in order for their work to be accepted and properly evaluated.  This course outline has been prepared in conformity with the   Institutional Student Evaluation Policy (I.S.E.P.) . The  policy is designed to promote equitable and effective evaluation of student learning  and is   therefore a crucial policy for you to read and understand   . The policy describes the rights and obligations of students, faculty, departments, programs, and the College administration with regard to evaluation in all your courses.   I.S.E.P.   is published in the College Calendar and reference copies are available in the Library and in the offices of program chairs and the Dean of Social Science   Business Technologies .", 
            "title": "For 420 career program courses, students must receive at least 50% on the assignment component and at least 60% on the examination component in order to obtain a passing grade for the course. Failure to do so will result in a maximum grade of 50 (the lower of 50 or the grade earned). For the purpose of this rule, quizzes are considered exams.**"
        }, 
        {
            "location": "/Software-Project/outline/#dawson-college", 
            "text": "", 
            "title": "DAWSON COLLEGE**"
        }, 
        {
            "location": "/Software-Project/outline/#computer-science-department", 
            "text": "", 
            "title": "COMPUTER SCIENCE DEPARTMENT**"
        }, 
        {
            "location": "/Software-Project/outline/#policies", 
            "text": "", 
            "title": "POLICIES**"
        }, 
        {
            "location": "/Software-Project/outline/#1-academic-integrity", 
            "text": "The Computer Science Department adheres to the Dawson College Academic Conduct policy. Students have an obligation to inform themselves of all aspects of this policy. According to ISEP, the teacher is required to report to the Sector Dean all cases of cheating and plagiarism affecting a student s grade. (ISEP Section IV-C) Students may appeal any decision of the teacher regarding cheating and plagiarism according to the methods established by the College. The penalty for cheating or plagiarism may range from a zero on the work to a failure in the course.", 
            "title": "1.        ACADEMIC INTEGRITY**"
        }, 
        {
            "location": "/Software-Project/outline/#2-attendance-and-lateness", 
            "text": "Students are responsible for all material covered in classes and labs, whether or not they are present. Students have an obligation to arrive on time and to remain for the duration of scheduled classes, labs and activities. Students who disregard this obligation may be asked to leave the class, lab or activity. Students should refer to the Institutional Student Evaluation Policy (ISEP Section III-C) regarding attendance.", 
            "title": "2.        ATTENDANCE AND LATENESS**"
        }, 
        {
            "location": "/Software-Project/outline/#3-religious-holiday-observance", 
            "text": "Class period(s) may be cancelled in order that the teacher can observe religious holidays. Any material missed as a result, will be made up during labs, class periods and alternate tutorial sessions.  Students, who intend to observe religious holidays, must inform their teachers in writing as prescribed in the ISEP Policy on Religious Observances (ISEP Section III-D) Students absent from classes because of observance of religious holidays will not be penalized. It must be emphasized, however, that this College policy should not be interpreted to mean that a student can receive credit for work not performed. It is the student s responsibility to fulfill the requirements of the alternative arrangement.", 
            "title": "3.        RELIGIOUS HOLIDAY OBSERVANCE**"
        }, 
        {
            "location": "/Software-Project/outline/#4-software", 
            "text": "The Computer Science Department forbids the use of the computer labs it uses to make any copies of any software without the explicit authorization of the Department. Apart from any legal action that might arise from such unauthorized copying, the Computer Science Department reserves the right to discipline any student involved in such activity.  Students who borrow software from the College and fail to return it will be placed on the defaulter list and be subject to the appropriate penalties.  Viruses are programs that attach themselves to a computer system without the permission of those to whom the system belongs. They are deliberately written to be, at worst, harmful (e.g. destroying the contents of disks) and, at best, bothersome (e.g. disturbing the image shown on the screen). They can cause serious losses of time and effort for students, staff and faculty. Any student involved in the deliberate spreading of viruses is subject to the most severe penalties prescribed by College regulations, apart from any legal action that might arise from such acts.", 
            "title": "4.        SOFTWARE**"
        }, 
        {
            "location": "/Software-Project/outline/#5-literacy", 
            "text": "The Computer Science Department recognizes that literacy in all its forms (read, written, spoken) is essential to our students in their careers.  Teachers may choose to incorporate a literacy component into the marking scheme for any piece of work. Teachers may use their discretion to insist that any piece of work submitted for credit is revised by the student if it is unsatisfactory with regard to literacy.  Teachers will inform all students in their courses of this policy at the beginning of each semester either by including it in the course description or otherwise.", 
            "title": "5.        LITERACY**"
        }, 
        {
            "location": "/Software-Project/outline/#6-cell-phones", 
            "text": "The use of cell phones in all Computer Science lectures, labs and exams is prohibited.", 
            "title": "6.        CELL PHONES**"
        }, 
        {
            "location": "/Software-Project/outline/#7-portable-computers", 
            "text": "The use of portable computers in all Computer Science lectures for purposes other than note-taking is prohibited.", 
            "title": "7.        PORTABLE COMPUTERS**"
        }, 
        {
            "location": "/Software-Project/outline/#8-student-conduct", 
            "text": "Everyone has the right to a safe and non-violent environment. Students are obliged to conduct themselves as stated in the Student Code of Conduct and in the ISEP section on the roles and responsibilities of students. (ISEP section II-D)", 
            "title": "8.        STUDENT CONDUCT**"
        }, 
        {
            "location": "/Software-Project/outline/#9-intensive-course-conflicts", 
            "text": "If a student is attending an intensive course, the student must inform the teacher, within the first two weeks of class, of the specific dates of any anticipated absences.", 
            "title": "9.        INTENSIVE COURSE CONFLICTS**"
        }, 
        {
            "location": "/Software-Project/outline/#10-isep", 
            "text": "The Institutional Student Evaluation Policy (ISEP) is designed to promote equitable and effective evaluation of student learning and is therefore a crucial policy to read and understand. The policy describes the rights and obligations of students, faculty, departments, programs, and the College administration with regard to evaluation in all your courses, including grade reviews and resolution of academic grievance. The ISEP is available on the Dawson website.", 
            "title": "10.        ISEP**"
        }, 
        {
            "location": "/Software-Project/assignments/assignment2/", 
            "text": "Final Assignment The Evaluator\n\n\nDescription\n\n\nWrite the classes necessary to convert an infix expression to a postfix expression and then evaluate the postfix expression. The input to the evaluator is a queue containing the infix expression and the output is a queue with the result as the only entry.\n\n\nThe infix expression is made up of floating point numbers and four operators. The operators are add(+), subtract(-), multiply(*) and division(/). You will also implement parenthesis () on the calculator.\n\n\nCreate a suite of Unit Tests that proves that the Evaluator and all of its components work as expected. Use parameterized testing so that you can carry out at least 25 different infix expressions in the testing. \n\n\nIf the infix queue is not properly formatted then throw a named exception. Test that this exception is being thrown in at least 5 cases in addition to the 25 cases for evaluating a properly formatted queue.\n\n\nYou must write your own Stack and Queue for this assignment. You may not use the Java Collections for this assignment. \n\n\nThere is no user interface just unit testing.\n\n\nDue Date:\nFriday, December 8, 2017 at 11:59 PM.", 
            "title": "Assignment2"
        }, 
        {
            "location": "/Software-Project/assignments/assignment2/#final-assignment-the-evaluator", 
            "text": "", 
            "title": "Final Assignment The Evaluator"
        }, 
        {
            "location": "/Software-Project/assignments/assignment2/#description", 
            "text": "Write the classes necessary to convert an infix expression to a postfix expression and then evaluate the postfix expression. The input to the evaluator is a queue containing the infix expression and the output is a queue with the result as the only entry.  The infix expression is made up of floating point numbers and four operators. The operators are add(+), subtract(-), multiply(*) and division(/). You will also implement parenthesis () on the calculator.  Create a suite of Unit Tests that proves that the Evaluator and all of its components work as expected. Use parameterized testing so that you can carry out at least 25 different infix expressions in the testing.   If the infix queue is not properly formatted then throw a named exception. Test that this exception is being thrown in at least 5 cases in addition to the 25 cases for evaluating a properly formatted queue.  You must write your own Stack and Queue for this assignment. You may not use the Java Collections for this assignment.   There is no user interface just unit testing.  Due Date:\nFriday, December 8, 2017 at 11:59 PM.", 
            "title": "Description"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/", 
            "text": "Warning\n\n\n\ud83d\udea7 Under Construction\n\n\n\n\nContents\n\n\n1 Introduction 1\n\n\n1.1 System Overview 1\n\n\n1.2 Design Map 1\n\n\n1.3 Definitions and Acronyms 1\n\n\n1.4 Gmail Requirements 1\n\n\n2 Considerations 2\n\n\n2.1 Assumptions 2\n\n\n2.2 Constraints 2\n\n\n2.3 System Environment 2\n\n\n2.4 Repository and Naming 2\n\n\n2.4.1 GitLab Account Name 2\n\n\n2.4.2 Java Project Name 3\n\n\n2.4.3 GitLab Repository Name 3\n\n\n3 High Level Design 4\n\n\n3.1 Configuration Module 4\n\n\n3.2 Database Module 4\n\n\n3.3 Appointment Module 4\n\n\n3.4 Reminder Module 4\n\n\n3.5 Help Module 4\n\n\n3.6 Master GUI Module 4\n\n\n4 Low Level Design 5\n\n\n4.1 Configuration Module 5\n\n\n4.1.1 Database 5\n\n\n4.1.2 Email 5\n\n\n4.1.3 Appointment Group 5\n\n\n4.2 Database Module 5\n\n\n4.2.1 Email 5\n\n\n4.2.2 Appointment Group 6\n\n\n4.2.3 Appointments 6\n\n\n4.3 Appointment Module 6\n\n\n4.3.1 Monthly View 6\n\n\n4.3.2 Weekly View 6\n\n\n4.3.3 Daily View 6\n\n\n4.3.4 Appointment Dialog 6\n\n\n4.3.5 Search Dialog 6\n\n\n4.4 Reminder Module 7\n\n\n4.4.1 Timers 7\n\n\n4.5 Help Module 7\n\n\n4.6 Master GUI Module 7\n\n\n4.6.1 Menu 7\n\n\nFile 7\n\n\nView 7\n\n\nHelp 7\n\n\n4.6.2 Toolbar 8\n\n\n5 Data Structures 9\n\n\n5.1 DBMS Settings 9\n\n\n5.2 SMTP Settings 9\n\n\n5.3 Appointment Group Record 9\n\n\n5.4 Appointment Record 10\n\n\n5.5 Help Records 10\n\n\nIntroduction\n\n\nThe purpose of this project is to develop your individual skills as a\nJava application developer. The application described in this document\nis designed to have you apply what you have already learned in the\nComputer Science Technology Program and what you are continuing to learn\nthis semester. This is an individual student project in which you will\nwork alone.\n\n\nSystem Overview\n\n\n\n\nThe program that is\ndescribed in this document is called the Java Agenda Manager or JAM for\nshort. Its use case is to provide an interactive application in which\nappointments can be stored and reviewed along with reminders of upcoming\nevents. It will be written in the Java language and it is meant to be\nportable across all platforms that support Java\n\n\nDesign Map\n\n\nWithin this document you will find the features, specifications, and\ndesign of the JAM. The final product that you develop is required\nrespect this document. While you may add additional features, you are\nexpected to deliver the feature set described here. The following\nsections of this document will describe the features, organization and\nGUI design of the system.\n\n\nDefinitions and Acronyms\n\n\n\n\nAppointment\n\n\n\n\nAn event that the user of the program wishes to record and then be\nreminded of prior to its scheduled time.\n\n\n\n\nMonthly Calendar\n\n\n\n\nThe presentation of all the days in each month with an ordered list of\nany appointments presented for the specific day.\n\n\n\n\nWeekly Calendar\n\n\n\n\nThe presentation of the days in each week that shows the time\nintervals for the day and displays appointments at their specific day\nand time.\n\n\n\n\nDaily Calendar\n\n\n\n\nThe presentation of a single day that shows the time intervals for the\nday and displays appointments at their specific time.\n\n\n\n\nReminder\n\n\n\n\nA visual and audible alarm generated by the program to remind the user\nof an upcoming appointment. In addition, an email is sent to the user\nas a further reminder.\n\n\n\n\nAppointment Group\n\n\n\n\nAppointments can be grouped. A group displays a background color in\nthe display.\n\n\n\n\nGmail Requirements\n\n\nYou will need to create one Gmail account. This is the account thru\nwhich you will be sending reminders.\n\n\n\n\n\n\nConsiderations\n    ==============\n\n\n\n\nAssumptions\n    ---------------------------------------------------------------------------------------------------------\n\n\n\n\n\n\n\n\nThe program will be written using the standard features of the Java\nlanguage. Only third party open source libraries approved by your\ninstructor may be used. JUnit testing must be employed for all JDBC code\nyou write.\n\n\nConstraints\n\n\nThe primary constraint is\nthat the system must be completed by the end of week eight. You must\nlook for simplicity rather than complexity. Features not explicitly in\nthis document and not mentioned in class should be avoided unless they\nare recognized as critical to the operation of the program. Such changes\nmust be submitted to your instructor for approval.\n\n\nSystem Environment\n\n\nThe programming language will be Java\nversion 1.8 and the GUI will be JavaFX. You may use NetBeans or Eclipse\nfor your IDE. NetBeans is preferred.\n\n\nThe JAM will depend on an external DBMS for its appointment and contact\nstore. The DBMS will be MySQL.\n\n\nThe JAM is not dependent on any specific operating system. It should be\nable to run on any computer that supports Java. To be able to use the\nWaldo2 database server the computer must be connected to the Internet.\n\n\nRepository and Naming\n\n\nProjects must be stored in a Git repository. You are required to use a\nprivate repository on GitLab (gitlab.com). GitLab provides any developer\nwith a private repository. When you create your repository you must\ngrant the GitLab user \u201comniprof\u201d developer status. You may not use any\nother repository in this course. The naming rules are mandatory.\n\n\nGitLab Account Name\n\n\nYour GitLab account must be named \nJAM_Student Name\n. Use your name\nas it appears on college records. For example, if your name is Betty\nSmith then you must create an account named:\n\n\nJAM_BettySmith\n\n\nYou may leave out any middle names.\n\n\nJava Project Name\n\n\nWhen you create your project in the IDE it must be named \nJAM_Student\nID_Version\n. For example:\n\n\nJAM_9999999_1\n\n\nIf you must create a new project, for whatever reason, then use the same\nname with a different version number:\n\n\nJAM_9999999_2\n\n\nGitLab Repository Name\n\n\nThe repository that you create for your projects must have the same name\nas your Java project in the IDE. This means that when I need to retrieve\nyour code from GitLab the URL will look like:\n\n\nhttps://gitlab.com/JAM\n_BettySmith/JAM_9999999_1\n\n\nHigh Level Design\n\n\n===============================================================================================================\n\n\nThe overall design of the program will consist of modules that manage\nthe different features and functions of the program.\n\n\nConfiguration Module\n\n\nThis module is responsible for recording and storing information that\naffects the operation of the program. There will be GUI components in\nthis module.\n\n\nDatabase Module\n\n\nThis module is responsible for interacting with the DBMS on behalf of\nall other modules. It will provide specific services to meet the needs\nof other modules. There will not be any GUI components in this module.\n\n\nUnit testing of this module is required.\n\n\nAppointment Module\n\n\nThis module is responsible for the user interface for managing and\ndisplaying appointments. There will be GUI components in this module.\n\n\nReminder Module\n\n\nThis module is responsible for generating alarms prior to an\nappointment. There will not be any GUI components in this module.\n\n\nHelp Module\n\n\nThis module is responsible for displaying help screens. There will be\nGUI components in this module.\n\n\nMaster GUI Module\n\n\nThis module is responsible for the main application window, menus, and\ntoolbars. There will be GUI components in this module.\n\n\n\n\n\n\nLow Level Design\n    ================\n\n\n\n\nConfiguration Module\n    --------------------\n\n\n\n\n\n\n\n\nThis module will handle the data that configures the program. There are\nthree categories of configuration data. These are database, email and\nappointment group. Each category will require a GUI interface for input\nand editing.\n\n\nWhen the program is run for the very first time this module executes\nautomatically. This module can be accessed by the user at any time to\nmake changes to the configuration.\n\n\nDatabase\n\n\nThe program must have a MySQL database account ready to use. You can\ncreate a local account on your computer or use an account on a\ndepartment server. This information will be stored in a properties file\nusing the Properties API in Java. Properties files are plain text files.\nSee section 5.1 for the data that must be stored. You will need a popup\ndialog to enter or edit this data.\n\n\nEmail\n\n\nThe program, when running, will send an email to the program\u2019s user at a\npreset interval before an appointment. You will require an email account\non Gmail for this purpose. The necessary information will be stored in a\ntable in the database. You will need a popup dialog to enter or edit\nthis data.\n\n\nAppointment Group\n\n\nAn appointment group supports the concept of grouping appointments such\nas work appointments and personal appointments. The group determines the\nbackground colour of an appointment in the display. You must have five\ndefault groups with colors already assigned to them. You will need a\npopup dialog to enter or edit this data.\n\n\nDatabase Module\n\n\nThis module will manage the records for all modules. There should be a\nclass for each data table. It will create the required tables for the\ndatabase the first time the program is run. Then it will add or retrieve\nrecords based on requests from the other modules. Each of these modules\nmust have unit tests that demonstrate that the code functions as\nrequired.\n\n\nEmail\n\n\nThis module will be responsible for retrieving, inserting, updating or\ndeleting records for the Email configuration.\n\n\nAppointment Group\n\n\nThis module will be responsible for retrieving, inserting, updating or\ndeleting records for the Appointment Group configuration.\n\n\nAppointments\n\n\nThis module will be responsible for retrieving, inserting, updating or\ndeleting appointment records. There will need to be several retrieval\nroutines to match the various views. In addition, several search\nroutines will be required based on various criteria.\n\n\nAppointment Module\n\n\nThis module will be responsible for the user interface for inputting\nappointments and displaying appointments. It will consist of the\nfollowing:\n\n\nMonthly View\n\n\nThis will display a full month in a grid 6 rows by 7 columns. Titles of\nappointment will appear as a list in the day. In this display you will\nbe able to change months. Double clicking on a given day in a month will\nbring up the Daily View.\n\n\nWeekly View\n\n\nThis will display a full week. It should consist of 7 daily views.\nDouble clicking on a given day in a week will bring up the Daily View.\n\n\nDaily View\n\n\nThe daily view consists of a grid 2 x 48. The first column is the time\nand the second column will hold the appointment. There are 48 rows to\nrepresent every half hour in a day. Double clicking on anywhere in this\nview will bring up the Appointment Dialog. If the double click is on an\nexisting appointment then this is what will appear in the dialog.\nOtherwise a dialog without an appointment will appear.\n\n\nAppointment Dialog\n\n\nThis is a popup dialog that supports adding, editing or deleting an\nappointment. It will contain fields from the appointment data structure.\nThere needs to be a button to save an appointment and a button to delete\nan appointment. If the dialog contains an existing appointment, then\nsave will update the record otherwise a new record will be created.\n\n\nSearch Dialog\n\n\nThis is a popup dialog that supports searching for appointments by their\ntitle or description. The results of this search will be a list of\nmatching appointments. Double clicking on an appointment on this list\nwill display the Appointment Dialog with the selected appointment.\n\n\nReminder Module\n\n\nThis module will use timer events to generate alarms and reminders.\nWhenever the program is executed it will retrieve all future events and\nstart timer processes. When a timer process comes due the module will\ngenerate a visual and audible alarm.\n\n\nTimers\n\n\nWhen the program is loaded, this module will retrieve all the current\nday\u2019s appointments and create a timer event or thread for it. The\nthread, when its time is reached, will generate an audible and visual\nreminder as well as sending an email. Appointment records contain the\ninterval between an appointment and when a reminder must be issued.\n\n\nA special event is created to go off at midnight. If the program remains\nrunning continuously then at midnight it will retrieve the next day\u2019s\nappointments.\n\n\nHelp Module\n\n\nThis module will present the user with a list of the different tasks\nthat the program performs. Selecting a task will lead to a description\nof what this task is and how it is used. These descriptions will be\nformatted using HTML and stored in individual files in the project.\n\n\nMaster GUI Module\n\n\nThis module will act as the application manager. It will present all the\nvarious views of the program and receive user commands. The commands may\ncome either from a menu or a toolbar. The menus and toolbars will be\ndynamic. This means that the choices presented to the user may change\ndepending on the current view.\n\n\nMenu\n\n\nThe program main menu must contain the following:\n\n\nFile\n\n\n\n\nConfiguration\n\n\nNew Appointment\n\n\nExit\n\n\n\n\nView\n\n\n\n\nMonthly\n\n\nWeekly\n\n\nDaily\n\n\n\n\nHelp\n\n\n\n\nHelp Contents\n\n\nAbout\n\n\n\n\nAdditional menu items may be added as needed.\n\n\nToolbar\n\n\nThe toolbar must consist of the following items.\n\n\n\n\n\n\n### Configuration\n\n\n\n\n\n\n### New Appointment\n\n\n\n\n\n\n### Monthly\n\n\n\n\n\n\n### Weekly\n\n\n\n\n\n\n### Daily\n\n\n\n\n\n\n### Help Contents\n\n\n\n\n\n\nImages must be used in the toolbar.\n\n\n\n\n\n\nData Structures\n    ===============\n\n\n\n\nDBMS Settings\n    -------------\n\n\n\n\n\n\n\n\nStored in a properties file\n\n\n\n\n\n\nThe URL of the MySQL database\n\n\n\n\n\n\nThe database name\n\n\n\n\n\n\nThe port of the MySQL database (default 3306)\n\n\n\n\n\n\nThe user name for the MySQL database\n\n\n\n\n\n\nThe password for the MySQL database\n\n\n\n\nSMTP Settings\n    -------------\n\n\n\n\n\n\n\n\nStored in the DBMS\n\n\n\n\n\n\nThe user\u2019s name\n\n\n\n\n\n\nThe user\u2019s email address which is also the log in name for Gmail\n\n\n\n\n\n\nThe user\u2019s Gmail password\n\n\n\n\n\n\nThe URL of the SMTP server\n\n\n\n\n\n\nThe SMTP port number (default 465)\n\n\n\n\nAppointment Group Record\n    ------------------------\n\n\n\n\n\n\n\n\nStored in the DBMS\n\n\n\n\n\n\nGroup Number \u2013 int\n\n\n\n\n\n\nGroup Name \u2013 String\n\n\n\n\n\n\nColour - RGB color specified with an HTML or CSS attribute String\n\n\n\n\nAppointment Record\n    ------------------\n\n\n\n\n\n\n\n\nStored in the DBMS\n\n\n\n\n\n\nTitle - String\n\n\n\n\n\n\nLocation - String\n\n\n\n\n\n\nStart Time - Temporal\n\n\n\n\n\n\nEnd Time - Temporal\n\n\n\n\n\n\nDetails - String\n\n\n\n\n\n\nWhole Day \u2013 boolean\n\n\n\n\n\n\nAppointment Group \u2013 int\n\n\n\n\n\n\nReminder Interval - int\n\n\n\n\n\n\nAlarm Reminder Requested \u2013 Boolean\n\n\n\n\nHelp Records\n    ------------\n\n\n\n\n\n\n\n\nHelp information is text formatted with HTML. Each topic in the help\nlist is matched to a specific HTML file.", 
            "title": "Jam specifications"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#contents", 
            "text": "1 Introduction 1  1.1 System Overview 1  1.2 Design Map 1  1.3 Definitions and Acronyms 1  1.4 Gmail Requirements 1  2 Considerations 2  2.1 Assumptions 2  2.2 Constraints 2  2.3 System Environment 2  2.4 Repository and Naming 2  2.4.1 GitLab Account Name 2  2.4.2 Java Project Name 3  2.4.3 GitLab Repository Name 3  3 High Level Design 4  3.1 Configuration Module 4  3.2 Database Module 4  3.3 Appointment Module 4  3.4 Reminder Module 4  3.5 Help Module 4  3.6 Master GUI Module 4  4 Low Level Design 5  4.1 Configuration Module 5  4.1.1 Database 5  4.1.2 Email 5  4.1.3 Appointment Group 5  4.2 Database Module 5  4.2.1 Email 5  4.2.2 Appointment Group 6  4.2.3 Appointments 6  4.3 Appointment Module 6  4.3.1 Monthly View 6  4.3.2 Weekly View 6  4.3.3 Daily View 6  4.3.4 Appointment Dialog 6  4.3.5 Search Dialog 6  4.4 Reminder Module 7  4.4.1 Timers 7  4.5 Help Module 7  4.6 Master GUI Module 7  4.6.1 Menu 7  File 7  View 7  Help 7  4.6.2 Toolbar 8  5 Data Structures 9  5.1 DBMS Settings 9  5.2 SMTP Settings 9  5.3 Appointment Group Record 9  5.4 Appointment Record 10  5.5 Help Records 10", 
            "title": "Contents"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#introduction", 
            "text": "The purpose of this project is to develop your individual skills as a\nJava application developer. The application described in this document\nis designed to have you apply what you have already learned in the\nComputer Science Technology Program and what you are continuing to learn\nthis semester. This is an individual student project in which you will\nwork alone.", 
            "title": "Introduction"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#system-overview", 
            "text": "The program that is\ndescribed in this document is called the Java Agenda Manager or JAM for\nshort. Its use case is to provide an interactive application in which\nappointments can be stored and reviewed along with reminders of upcoming\nevents. It will be written in the Java language and it is meant to be\nportable across all platforms that support Java", 
            "title": "System Overview"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#design-map", 
            "text": "Within this document you will find the features, specifications, and\ndesign of the JAM. The final product that you develop is required\nrespect this document. While you may add additional features, you are\nexpected to deliver the feature set described here. The following\nsections of this document will describe the features, organization and\nGUI design of the system.", 
            "title": "Design Map"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#definitions-and-acronyms", 
            "text": "Appointment   An event that the user of the program wishes to record and then be\nreminded of prior to its scheduled time.   Monthly Calendar   The presentation of all the days in each month with an ordered list of\nany appointments presented for the specific day.   Weekly Calendar   The presentation of the days in each week that shows the time\nintervals for the day and displays appointments at their specific day\nand time.   Daily Calendar   The presentation of a single day that shows the time intervals for the\nday and displays appointments at their specific time.   Reminder   A visual and audible alarm generated by the program to remind the user\nof an upcoming appointment. In addition, an email is sent to the user\nas a further reminder.   Appointment Group   Appointments can be grouped. A group displays a background color in\nthe display.", 
            "title": "Definitions and Acronyms"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#gmail-requirements", 
            "text": "You will need to create one Gmail account. This is the account thru\nwhich you will be sending reminders.    Considerations\n    ==============   Assumptions\n    ---------------------------------------------------------------------------------------------------------     The program will be written using the standard features of the Java\nlanguage. Only third party open source libraries approved by your\ninstructor may be used. JUnit testing must be employed for all JDBC code\nyou write.", 
            "title": "Gmail Requirements"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#constraints", 
            "text": "The primary constraint is\nthat the system must be completed by the end of week eight. You must\nlook for simplicity rather than complexity. Features not explicitly in\nthis document and not mentioned in class should be avoided unless they\nare recognized as critical to the operation of the program. Such changes\nmust be submitted to your instructor for approval.", 
            "title": "Constraints"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#system-environment", 
            "text": "The programming language will be Java\nversion 1.8 and the GUI will be JavaFX. You may use NetBeans or Eclipse\nfor your IDE. NetBeans is preferred.  The JAM will depend on an external DBMS for its appointment and contact\nstore. The DBMS will be MySQL.  The JAM is not dependent on any specific operating system. It should be\nable to run on any computer that supports Java. To be able to use the\nWaldo2 database server the computer must be connected to the Internet.", 
            "title": "System Environment"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#repository-and-naming", 
            "text": "Projects must be stored in a Git repository. You are required to use a\nprivate repository on GitLab (gitlab.com). GitLab provides any developer\nwith a private repository. When you create your repository you must\ngrant the GitLab user \u201comniprof\u201d developer status. You may not use any\nother repository in this course. The naming rules are mandatory.", 
            "title": "Repository and Naming"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#gitlab-account-name", 
            "text": "Your GitLab account must be named  JAM_Student Name . Use your name\nas it appears on college records. For example, if your name is Betty\nSmith then you must create an account named:  JAM_BettySmith  You may leave out any middle names.", 
            "title": "GitLab Account Name"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#java-project-name", 
            "text": "When you create your project in the IDE it must be named  JAM_Student\nID_Version . For example:  JAM_9999999_1  If you must create a new project, for whatever reason, then use the same\nname with a different version number:  JAM_9999999_2", 
            "title": "Java Project Name"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#gitlab-repository-name", 
            "text": "The repository that you create for your projects must have the same name\nas your Java project in the IDE. This means that when I need to retrieve\nyour code from GitLab the URL will look like:  https://gitlab.com/JAM _BettySmith/JAM_9999999_1", 
            "title": "GitLab Repository Name"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#high-level-design", 
            "text": "===============================================================================================================  The overall design of the program will consist of modules that manage\nthe different features and functions of the program.", 
            "title": "High Level Design"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#configuration-module", 
            "text": "This module is responsible for recording and storing information that\naffects the operation of the program. There will be GUI components in\nthis module.", 
            "title": "Configuration Module"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#database-module", 
            "text": "This module is responsible for interacting with the DBMS on behalf of\nall other modules. It will provide specific services to meet the needs\nof other modules. There will not be any GUI components in this module.  Unit testing of this module is required.", 
            "title": "Database Module"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#appointment-module", 
            "text": "This module is responsible for the user interface for managing and\ndisplaying appointments. There will be GUI components in this module.", 
            "title": "Appointment Module"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#reminder-module", 
            "text": "This module is responsible for generating alarms prior to an\nappointment. There will not be any GUI components in this module.", 
            "title": "Reminder Module"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#help-module", 
            "text": "This module is responsible for displaying help screens. There will be\nGUI components in this module.", 
            "title": "Help Module"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#master-gui-module", 
            "text": "This module is responsible for the main application window, menus, and\ntoolbars. There will be GUI components in this module.    Low Level Design\n    ================   Configuration Module\n    --------------------     This module will handle the data that configures the program. There are\nthree categories of configuration data. These are database, email and\nappointment group. Each category will require a GUI interface for input\nand editing.  When the program is run for the very first time this module executes\nautomatically. This module can be accessed by the user at any time to\nmake changes to the configuration.", 
            "title": "Master GUI Module"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#database", 
            "text": "The program must have a MySQL database account ready to use. You can\ncreate a local account on your computer or use an account on a\ndepartment server. This information will be stored in a properties file\nusing the Properties API in Java. Properties files are plain text files.\nSee section 5.1 for the data that must be stored. You will need a popup\ndialog to enter or edit this data.", 
            "title": "Database"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#email", 
            "text": "The program, when running, will send an email to the program\u2019s user at a\npreset interval before an appointment. You will require an email account\non Gmail for this purpose. The necessary information will be stored in a\ntable in the database. You will need a popup dialog to enter or edit\nthis data.", 
            "title": "Email"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#appointment-group", 
            "text": "An appointment group supports the concept of grouping appointments such\nas work appointments and personal appointments. The group determines the\nbackground colour of an appointment in the display. You must have five\ndefault groups with colors already assigned to them. You will need a\npopup dialog to enter or edit this data.", 
            "title": "Appointment Group"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#database-module_1", 
            "text": "This module will manage the records for all modules. There should be a\nclass for each data table. It will create the required tables for the\ndatabase the first time the program is run. Then it will add or retrieve\nrecords based on requests from the other modules. Each of these modules\nmust have unit tests that demonstrate that the code functions as\nrequired.", 
            "title": "Database Module"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#email_1", 
            "text": "This module will be responsible for retrieving, inserting, updating or\ndeleting records for the Email configuration.", 
            "title": "Email"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#appointment-group_1", 
            "text": "This module will be responsible for retrieving, inserting, updating or\ndeleting records for the Appointment Group configuration.", 
            "title": "Appointment Group"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#appointments", 
            "text": "This module will be responsible for retrieving, inserting, updating or\ndeleting appointment records. There will need to be several retrieval\nroutines to match the various views. In addition, several search\nroutines will be required based on various criteria.", 
            "title": "Appointments"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#appointment-module_1", 
            "text": "This module will be responsible for the user interface for inputting\nappointments and displaying appointments. It will consist of the\nfollowing:", 
            "title": "Appointment Module"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#monthly-view", 
            "text": "This will display a full month in a grid 6 rows by 7 columns. Titles of\nappointment will appear as a list in the day. In this display you will\nbe able to change months. Double clicking on a given day in a month will\nbring up the Daily View.", 
            "title": "Monthly View"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#weekly-view", 
            "text": "This will display a full week. It should consist of 7 daily views.\nDouble clicking on a given day in a week will bring up the Daily View.", 
            "title": "Weekly View"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#daily-view", 
            "text": "The daily view consists of a grid 2 x 48. The first column is the time\nand the second column will hold the appointment. There are 48 rows to\nrepresent every half hour in a day. Double clicking on anywhere in this\nview will bring up the Appointment Dialog. If the double click is on an\nexisting appointment then this is what will appear in the dialog.\nOtherwise a dialog without an appointment will appear.", 
            "title": "Daily View"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#appointment-dialog", 
            "text": "This is a popup dialog that supports adding, editing or deleting an\nappointment. It will contain fields from the appointment data structure.\nThere needs to be a button to save an appointment and a button to delete\nan appointment. If the dialog contains an existing appointment, then\nsave will update the record otherwise a new record will be created.", 
            "title": "Appointment Dialog"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#search-dialog", 
            "text": "This is a popup dialog that supports searching for appointments by their\ntitle or description. The results of this search will be a list of\nmatching appointments. Double clicking on an appointment on this list\nwill display the Appointment Dialog with the selected appointment.", 
            "title": "Search Dialog"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#reminder-module_1", 
            "text": "This module will use timer events to generate alarms and reminders.\nWhenever the program is executed it will retrieve all future events and\nstart timer processes. When a timer process comes due the module will\ngenerate a visual and audible alarm.", 
            "title": "Reminder Module"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#timers", 
            "text": "When the program is loaded, this module will retrieve all the current\nday\u2019s appointments and create a timer event or thread for it. The\nthread, when its time is reached, will generate an audible and visual\nreminder as well as sending an email. Appointment records contain the\ninterval between an appointment and when a reminder must be issued.  A special event is created to go off at midnight. If the program remains\nrunning continuously then at midnight it will retrieve the next day\u2019s\nappointments.", 
            "title": "Timers"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#help-module_1", 
            "text": "This module will present the user with a list of the different tasks\nthat the program performs. Selecting a task will lead to a description\nof what this task is and how it is used. These descriptions will be\nformatted using HTML and stored in individual files in the project.", 
            "title": "Help Module"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#master-gui-module_1", 
            "text": "This module will act as the application manager. It will present all the\nvarious views of the program and receive user commands. The commands may\ncome either from a menu or a toolbar. The menus and toolbars will be\ndynamic. This means that the choices presented to the user may change\ndepending on the current view.", 
            "title": "Master GUI Module"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#menu", 
            "text": "The program main menu must contain the following:", 
            "title": "Menu"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#file", 
            "text": "Configuration  New Appointment  Exit", 
            "title": "File"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#view", 
            "text": "Monthly  Weekly  Daily", 
            "title": "View"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#help", 
            "text": "Help Contents  About   Additional menu items may be added as needed.", 
            "title": "Help"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#toolbar", 
            "text": "The toolbar must consist of the following items.", 
            "title": "Toolbar"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#configuration", 
            "text": "", 
            "title": "### Configuration"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#new-appointment", 
            "text": "", 
            "title": "### New Appointment"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#monthly", 
            "text": "", 
            "title": "### Monthly"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#weekly", 
            "text": "", 
            "title": "### Weekly"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#daily", 
            "text": "", 
            "title": "### Daily"
        }, 
        {
            "location": "/Software-Project/assignments/jam-specifications/#help-contents", 
            "text": "Images must be used in the toolbar.    Data Structures\n    ===============   DBMS Settings\n    -------------     Stored in a properties file    The URL of the MySQL database    The database name    The port of the MySQL database (default 3306)    The user name for the MySQL database    The password for the MySQL database   SMTP Settings\n    -------------     Stored in the DBMS    The user\u2019s name    The user\u2019s email address which is also the log in name for Gmail    The user\u2019s Gmail password    The URL of the SMTP server    The SMTP port number (default 465)   Appointment Group Record\n    ------------------------     Stored in the DBMS    Group Number \u2013 int    Group Name \u2013 String    Colour - RGB color specified with an HTML or CSS attribute String   Appointment Record\n    ------------------     Stored in the DBMS    Title - String    Location - String    Start Time - Temporal    End Time - Temporal    Details - String    Whole Day \u2013 boolean    Appointment Group \u2013 int    Reminder Interval - int    Alarm Reminder Requested \u2013 Boolean   Help Records\n    ------------     Help information is text formatted with HTML. Each topic in the help\nlist is matched to a specific HTML file.", 
            "title": "### Help Contents"
        }, 
        {
            "location": "/Software-Project/labs/warmup-dice-game/", 
            "text": "Pass Line Casino Dice Game\n\n\nThe goal of this assignment is to reactivate your Java skills. You may use a console or GUI interface. In next week\u2019s labs I will sit with you and we will do a code review of your work.\n\n\nRules\n\n\nIn this game you roll the dice (called the come-out roll) and look at the total. If this total is equal to 7 or 11, then you win the amount of the bet. If the total is equal to 2, 3 or 12, then you lose the bet. Any other total of the dice becomes the \"point\", and you continue to roll the dice until you either (a) roll the point total again, in which case you win the amount of the bet, or (b) roll a total of 7, in which case you lose the amount of the bet. If the total of the dice is not 7 and not equal to the point, then you roll again, and continue to roll, until either condition (a) or (b) is met. Once the point has been determined, it does not change for subsequent rolls of the dice.\n\n\nThe game will begin by asking the user how much money they have to start with. The game will run until the player exits or the total money drops to zero. Each time the game is played ask the user for the amount they wish to bet. If they win then this amount is added to their total and if they loose it is subtracted from their total. After each game display whether they won or lost, how much total money they have and ask if they want to play again. If they do not want to play again then the program exits.", 
            "title": "Warmup dice game"
        }, 
        {
            "location": "/Software-Project/labs/warmup-dice-game/#pass-line-casino-dice-game", 
            "text": "The goal of this assignment is to reactivate your Java skills. You may use a console or GUI interface. In next week\u2019s labs I will sit with you and we will do a code review of your work.", 
            "title": "Pass Line Casino Dice Game"
        }, 
        {
            "location": "/Software-Project/labs/warmup-dice-game/#rules", 
            "text": "In this game you roll the dice (called the come-out roll) and look at the total. If this total is equal to 7 or 11, then you win the amount of the bet. If the total is equal to 2, 3 or 12, then you lose the bet. Any other total of the dice becomes the \"point\", and you continue to roll the dice until you either (a) roll the point total again, in which case you win the amount of the bet, or (b) roll a total of 7, in which case you lose the amount of the bet. If the total of the dice is not 7 and not equal to the point, then you roll again, and continue to roll, until either condition (a) or (b) is met. Once the point has been determined, it does not change for subsequent rolls of the dice.  The game will begin by asking the user how much money they have to start with. The game will run until the player exits or the total money drops to zero. Each time the game is played ask the user for the amount they wish to bet. If they win then this amount is added to their total and if they loose it is subtracted from their total. After each game display whether they won or lost, how much total money they have and ask if they want to play again. If they do not want to play again then the program exits.", 
            "title": "Rules"
        }
    ]
}
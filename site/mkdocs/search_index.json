{
    "docs": [
        {
            "location": "/", 
            "text": "This is my notes for semester 5 of Dawson's Computer Science program. It consists, among other things, of PHP, Java, Android and Git.", 
            "title": "Home"
        }, 
        {
            "location": "/PHP/introduction/", 
            "text": "Introduction\n\n\nWe will have three projects. One a web scraping one, one a speed reading (heavy js) and a combined android/php web app for students.\n\n\nHistory\n\n\n\n\n1996 - PHP first release\n\n\nPerl, C\n\n\n\n\n\n\nLarabel -\n really popular\n\n\n2017 - PHP 7.1\n~ 00 - Java\n\n\n\n\nClient side\n\n\n\n\nWeb browser\n\n\nHTML\n\n\nCSS\n\n\nJS\n\n\n\n\nServer side\n\n\n\n\nDatabase (ex: Oracle)\n\n\nMySQL\n\n\nPostgres (using this one)\n\n\n\n\nWeb Server\n\n\n\n\nIIS (ASP.NET)\n\n\nApache\n\n\nNGING (using this one)\n\n\n\n\nNGinx will tell the PHP interpreter to interpret the file, and the interpreter will create an html based on the request.\n\n\nDevelopment Environment\n\n\n\n\nVirtual Machine\n\n\nLinux Ubuntu\n\n\nNGINX\n\n\npostgres\n\n\n\n\nLab and Home setup\n\n\n\n\nVagrant\n\n\nPreprovision VM so that each vagrant box is exactly the same\n\n\n\n\n\n\nHomestead\n\n\nVagrant box preprovisioned with recommended \"Stack\" for \nphp-laravel\n, which has above\n\n\n\n\n\n\nDocker\n\n\nLighter than the Vagrant engine\n\n\nHowever, only available on Windows 10 and we have systems in Windows 7 \ud83d\ude22\n\n\n\n\n\n\n\n\nThis will all be completely headless (no GUI).\n\n\nHello PHP\n\n\nExample 1 - \nHTML \n PHP embedded index.php \n\n\n!DOCTYPE html\n\n\nhtml\n\n\n    \nhead\n\n\n    \n/head\n\n\n    \nbody\n\n\n        \np\n Plain HTML \n/p\n\n\n        \np\n\n\n            \n?php\n \necho\n \nHello World\n;\n \n?\n\n\n        \n/p\n\n\n    \n/body\n\n\n\n\n\nExample 2 - \nOnly PHP\n\n\n?php\n \n    \necho\n \n!DOCTYPE html\n;\n\n    \necho\n \nhtml\n;\n\n\n?\n\n\n\n\n\nVariables\n\n\n\n\nWeakly typed =\n \nNo decorations\n\n\n\n\n| Datatypes |\n| interger |\n| floatingpoint |\n| string |\n| boolean |\n| array |\n\n\nVariable Naming\n\n\n\n\nStart with $\n\n\nnext char must be letter or _\n\n\nonly alphanumeric and _\n\n\ncase sensitive (\nexcept functions\n)\n\n\n\n\nExample 3 - \nUsing Variables\n\n\n?php\n \n    \n$quantity\n \n=\n \n50\n;\n\n    \n$price\n \n=\n \n119.50\n;\n\n    \n$tax\n \n=\n \n0.01\n;\n\n    \n$total\n \n=\n \n(\n$quantity\n \n*\n \n$price\n)\n \n*\n \n(\n1\n \n+\n \n$tax\n);\n\n    \n$total\n \n=\n \nnumber_format\n(\n$total\n,\n2\n);\n\n    \necho\n \np\nThe total is \n.\n$total\n.\n/p\n\n\n?\n\n\n\n\n\nOperators\n\n\n\n\n*\n \n/\n \n%\n\n\n++\n \n--\n\n\n+\n \n-\n\n\n**\n (power)\n\n\n=\n\n\n+=\n\n\n.=\n (concatenation)\n\n\n\n\n|\n\n\nxor\n (exclusive or)\n\n\n==\n equals (value)\n\n\n===\n identity (value and type)\n\n\n!=\n \n\n\n!==\n\n\n \n\n\n= \n=\n \n\n\n==\n like compareto, negative 0 positive\n\n\n??\n null", 
            "title": "Introduction"
        }, 
        {
            "location": "/PHP/introduction/#introduction", 
            "text": "We will have three projects. One a web scraping one, one a speed reading (heavy js) and a combined android/php web app for students.", 
            "title": "Introduction"
        }, 
        {
            "location": "/PHP/introduction/#history", 
            "text": "1996 - PHP first release  Perl, C    Larabel -  really popular  2017 - PHP 7.1\n~ 00 - Java", 
            "title": "History"
        }, 
        {
            "location": "/PHP/introduction/#client-side", 
            "text": "Web browser  HTML  CSS  JS", 
            "title": "Client side"
        }, 
        {
            "location": "/PHP/introduction/#server-side", 
            "text": "Database (ex: Oracle)  MySQL  Postgres (using this one)", 
            "title": "Server side"
        }, 
        {
            "location": "/PHP/introduction/#web-server", 
            "text": "IIS (ASP.NET)  Apache  NGING (using this one)   NGinx will tell the PHP interpreter to interpret the file, and the interpreter will create an html based on the request.", 
            "title": "Web Server"
        }, 
        {
            "location": "/PHP/introduction/#development-environment", 
            "text": "Virtual Machine  Linux Ubuntu  NGINX  postgres", 
            "title": "Development Environment"
        }, 
        {
            "location": "/PHP/introduction/#lab-and-home-setup", 
            "text": "Vagrant  Preprovision VM so that each vagrant box is exactly the same    Homestead  Vagrant box preprovisioned with recommended \"Stack\" for  php-laravel , which has above    Docker  Lighter than the Vagrant engine  However, only available on Windows 10 and we have systems in Windows 7 \ud83d\ude22     This will all be completely headless (no GUI).", 
            "title": "Lab and Home setup"
        }, 
        {
            "location": "/PHP/introduction/#hello-php", 
            "text": "", 
            "title": "Hello PHP"
        }, 
        {
            "location": "/PHP/introduction/#example-1-html-php-embedded-indexphp", 
            "text": "!DOCTYPE html  html       head       /head       body           p  Plain HTML  /p           p               ?php   echo   Hello World ;   ?           /p       /body", 
            "title": "Example 1 - HTML &amp; PHP embedded index.php "
        }, 
        {
            "location": "/PHP/introduction/#example-2-only-php", 
            "text": "?php  \n     echo   !DOCTYPE html ; \n     echo   html ;  ?", 
            "title": "Example 2 - Only PHP"
        }, 
        {
            "location": "/PHP/introduction/#variables", 
            "text": "Weakly typed =   No decorations   | Datatypes |\n| interger |\n| floatingpoint |\n| string |\n| boolean |\n| array |", 
            "title": "Variables"
        }, 
        {
            "location": "/PHP/introduction/#variable-naming", 
            "text": "Start with $  next char must be letter or _  only alphanumeric and _  case sensitive ( except functions )", 
            "title": "Variable Naming"
        }, 
        {
            "location": "/PHP/introduction/#example-3-using-variables", 
            "text": "?php  \n     $quantity   =   50 ; \n     $price   =   119.50 ; \n     $tax   =   0.01 ; \n     $total   =   ( $quantity   *   $price )   *   ( 1   +   $tax ); \n     $total   =   number_format ( $total , 2 ); \n     echo   p The total is  . $total . /p  ?", 
            "title": "Example 3 - Using Variables"
        }, 
        {
            "location": "/PHP/introduction/#operators", 
            "text": "*   /   %  ++   --  +   -  **  (power)  =  +=  .=  (concatenation)   |  xor  (exclusive or)  ==  equals (value)  ===  identity (value and type)  !=    !==     =  =    ==  like compareto, negative 0 positive  ??  null", 
            "title": "Operators"
        }, 
        {
            "location": "/PHP/labs/lab1/", 
            "text": "Note\n\n\nI personally be using my own Ubuntu system and not a VM. You are free to do whichever you wish, but the VM environment below is quite slow.\n\n\n\n\nIntroduction to Vagrant and PHP with text editor, Home setup\n\n\nPart 1 \u2013 Vagrant virtual machine provisioning\n\n\nWe are using Vagrant in this course to ensure all students have the same\nvirtual machine configured on all lab computers and at home. Vagrant is\na tool that greatly helps sharing Virtual Machines with the exact same\nconfiguration. The vagrant box that we use is Homestead, which is\nrecommended by Laravel (a PHP framework that we will use later in the\nsemester).\n\n\nHomestead has the following development stack preinstalled: Ubuntu\nLinux, NginX web server, PostGres database, PHP.\n\n\nIn the first part of the lab, we will explore our system, make sure that\nwe can boot the virtual machine on the lab workstation and execute a\nbasic PHP script.\n\n\nCreate the Homestead folder\n\n\nCopy the folder \nS:\\\\CompSci\\\\524\\\\Homestead to your H: drive\n. You should\nnow have H:\\Homestead directory with the same contents as\n\nS:\\\\CompSci\\\\524\\\\Homestead\n.\n\n\n**Create the shared folder\n\n\nOne of the really nice features of Vagrant is how easy it is to get both\nthe host system (Windows 10 machine) and the virtual machine (Ubuntu) to\nsee and share the same directory.\n\n\nCreate a folder called PHPCode in your H: drive. You will save all your\nlabs and projects in this folder. Create the following directories\nwithin PHPCode to match the lab setup:\n\n\n\n\n\n\n\n\nlabs\n\n\n\n\n\n\nbadresto\n\n\n\n\n\n\nreader\n\n\n\n\n\n\ndawson\n\n\n\n\n\n\nnews\n\n\n\n\n\n\ntodo\n\n\n\n\n\n\n\n\n(spoiler: these are some of the labs and projects you\u2019ll be working on\nthis semester!)\n\n\nGet your ssh keys\n\n\nCheck if you already have a .ssh folder in your home directory (H: drive\nshould be setup as your $HOME in the labs). If you have an .ssh\ndirectory, you have already generated ssh keys (probably for git). If\nnot:\n\n\nOpen a Git Bash console in your H drive (right-click in Windows\nExplorer, Git Bash Here)\n\n\nMake sure you are in H: \n pwd\n\n\nRun these commands:\n\n$ mkdir -p .ssh \n \ncd\n .ssh\n\n\n\n$ ssh-keygen -t rsa -b \n4096\n -C \nyouremail@address.here\n\n\n\nPress enter to save the key in \n/h/.ssh/id\\_rsa\n\n\nBoot the virtual machine configured for the PHP course\n\n\nYou will be doing this every lab:\n\n\nOpen a Git Bash window in \nH:/Homestead\n (right-click in explorer). This\nopens a Bash shell emulator on your Window system.\n\n\nMake sure you are in \n/h/Homestead\n\n\nRun this command:\n\n$ vagrant up\n\n\n\nWhen this command finishes (a few minutes) your Virtual Machine is up\nand running!!\n\n\nSSH into the virtual machine\n\n\nOur Ubuntu VM is headless \u2013 meaning that we don\u2019t have a GUI interface\nto Linux. Yay Command line only\n\n\nWhenever you want to log into the booted VM (e.g., to check the\nconfiguration or access the database), type in this command from your\nGit Bash window in \nH:\\\\Homestead\n.\n\n\n$ vagrant ssh\n\n\nYou are now in the VM!\n\n\ncd\n to the Code directory \n-\ngt\n; you are now in the PHPCode shared folder\nSo the \nH:/PHPCode\n folder in Windows is the same as the\n\n/home/vagrant/Code\n folder in the VM.\n\n\n\n\nNOTE: there is a known Vagrant bug where you may not see the command\nprompt while \nssh\n-ing with vagrant \nssh\n. If that is that case, exit and\ntry \nssh vagrant@192.168.10.10\n, with password \nvagrant\n\n\n\n\nThis \u201cmagic\u201d of the shared directory is courtesy of the \nHomestead.yaml\n\nfile. If you open it in Notepad++ (or use less or nano or vim from the\nLinux side), you\u2019ll see a section that indicates the folder mapping.\n\n\nRun a simple script\n\n\nOnce the VM is up and running, we can run PHP scripts.\n\n\nCopy \nS:/CompSci/524/lab0\n to your \nH:/PHPCode/labs folder\n.\n\n\nOpen a browser (hint: Firefox is my favourite), and go to\n\nhttp://labs.app/lab0\n\n\nYou should see a page that contains output of the PHP configuration on\nthe VM. Don\u2019t worry too much about the content, if you see it, you know\nyour VM is serving up your PHP files as required.\n\n\nHow does this work?\n\n\nAll the lab computers have been set to associate certain hostnames to\nitself: you can see this in the file\n\n\nC:/Windows/System32/drivers/etc/hosts\n\n\nNotice, for example, that the host labs.app is associated with the IP\naddress \n192.168.10.10\n (in fact all hostnames are associated with this IP\naddress). The hosts file enables you to override the DNS for a domain on\nthat machine. Your machine will look at the IP address provided\n(\n192.168.10.10\n) instead of going through a DNS. This IP address\n(\n192.168\n) is in the private IP address range, so we can map with no\nworries.\n\n\nNow look at \nH:/Homestead/Homestead.yaml\n: you will see that the IP\naddress is the one being used by you Vagrant VM 9and its NginX web\nserver. Further down, you see that the sites are associated with\ndifferent folders in VM; these folders are all in the shared\n\n/home/vagrant/Code\n folder (which is your \nH:/PHPCode\n folder)\n\n\nIf you open the \nlab0/index.php file\n, you will a single line in the php\ntags \n\u2013 phpinfo()\n is the function that outputs the PHP configuration.\n\n\nNginX, the web server, is configured by default to return \nindex.html\n,\n\nindex.html\n directly, or interpret \nindex.php\n through the PHP interpreter.\nThat\u2019s what happened when you browsed to \nlabs.app/lab0\n.\n\n\nCreate and debug your own PHP Script\n\n\nCreate a folder \nH:\\\\PHPCode\\\\labs\\\\lab1\n (or in the Linux VM\n\nCode/labs/lab1\n in the VM), and write a PHP script named index.php that\nwill create the output as shown in the image, using a text editor like\nNotepad++ or Atom.\n\n\n\n\n\n\n use HTML5\n    tags, including doctype and html tag\n\n\n\n\n\n\nthe php code will fill in the contents of a table, with echo\u2019s\n    within a nested loop\n\n\n\n\n\n\nno styling is required\n\n\n\n\n\n\nrecall: PHP variable names start with $; for loops look pretty much\n    the same as java.\n\n\n\n\n\n\nPHP coding\n    conventions\n\n    use the \u201cEgyptian brackets\u201d/\u201dK\nR style braces\u201d in control structures\n    \u2013 which means the opening brace is written on the same line as the\n    conditional clause and the closing brace is always written on its\n    own line.\n\n\n\n\n\n\n\n\nE.g.:\n\n\nif ($a != 2) {\n\n\n$a = 2;\n\n\n}\n\n\n(As an aside, this is also the\n \n*common Java style\n*\n).\n\n\n\n\nTesting the PHP Script\n\n\nBrowse to \nhttp://labs.app/lab1\n. Since we\nnamed the file index.php, NginX will open it by default. If you named it\nsomething else, write it in the address bar.\n\n\n\nThe results of the program should appear!\n\n\nRecall: Firefox (as well as the other major browsers) come with a suite\nof developer tools. Open the menu in Firefox, select Developer and\nToggle Tools (or Ctrl+Shift+I). You will see the http messages and other\ninformation that is \nvery\n useful when debugging web applications.\n\n\nShutting down the VM\n\n\nUse the command vagrant halt to gracefully shutdown your VM. Note that\nthe VM is subject to deep-freeze, so any changes anywhere except the\nshared folder will be lost the next time you log in.\n\n\nSOLVING INTERMITTENT 502 BAD GATEWAY ISSUES\n\n\nIf you are victim, you may have to make sure that nginx and php config\nmatch:\n\n\nGo to /etc/php/7.1/fpm/pool.d/ , edit www.conf (use sudo nano) and edit\nthe line listen = /run/php/php7.1-fpm.sock to\n/\nvar\n/run/php/php7.1-fpm.sock\n\n\nExit and save the file, then run sudo service php7.1-fpm restart\n\n\nSetting up your laptop/home system\n\n\nThe following instructions are provided for a Windows 7.1+ syste, If you\nare running Linux or IOS, the steps will be simpler. See this\n\nlink\n, and compare to the notes\nbelow.\n\n\n\n\n\n\nmake sure your BIOS/UEFI supports hardware virtualization and it is\n    enabled\n\n\n\n\n\n\nmake sure HyperV is disabled (Control panel - uninstall a program \u2013\n    program and features \u2013 turn Windows features on/off \u2013\n    uncheck HyperV)\n\n\n\n\n\n\ninstall Git for Windows to have gitbash:\n    \nhttps://git-for-windows.github.io\n\n\n\n\nchoose default install options (select Windows\n    Explorer Integration. Select \nUse Git from the Windows Command\n    Prompt\n radio button so that Git can be run from the\n    command line.)\n\n\n\n\n\n\n\n\ninstall VirtualBox 5.1.x (latest version) :\n    \nhttps://www.virtualbox.org/wiki/Downloads\n\n\n\n\n\n\ninstall Vagrant 1.9.x (latest version):\n    \nhttps://www.vagrantup.com/downloads.html\n\n\n\n\n\n\nif desired, setup your hosts to be the same as school\n\n\n\n\n\n\nopen Notepad as admin\n\n\n\n\n\n\nEdit C:/Windows/System32/drivers/etc/hosts (nb: make sure Notepad is\n    looking at all files, not just .txt)\n\n\n\n\n\n\nAdd to the end:\n\n\n\n\n\n\n192.168.10.10 dawson.app\n\n\n192.168.10.10 news.app\n\n\n192.168.10.10 todo.app\n\n\n192.168.10.10 labs.app\n\n\n192.168.10.10 reader.app\n\n\n192.168.10.10 badresto.app\n\n\n\n\n\n\nget your ssh keys, if required. Follow the steps in the lab above to\n    check if they exist in the $HOME directory\n\n\n\n\n\n\ndecide where you want your Homestead and PHPCode directories and\n    make them\n\n\n\n\n\n\nIn the containing directory:\n\n\n\n\n\n\nopen gitbash\n\n\n\n\n\n\nrun the following commands:\n\n\n\n\n\n\n\n\n\n\nvagrant box add laravel/homestead\n\n\ngit clone \nhttps://github.com/laravel/homestead.git\n Homestead\n\n\ncd Homestead\n\n\ngit checkout v5.4.0\n\n\nbash init.sh\n\n\n\n\n\n\nedit the Homestead/Homestead.yaml file (look at the one you have in\n    your H: drive)\n\n\n\n\n\n\nin the folders section, provide to mapping to the PHPCode folder you\n    created in step 8. e.g.,\n\n\n\n\n\n\nfolders:\n\n\n\n\nmap: h:/PHPCode\n\n\n\n\nto: /home/vagrant/Code\n\n\n\n\nif you added the sites to the etc/hosts files, also add them to\n    the Homestead.yaml. For example:\n\n\n\n\nsites:\n\n\n\n\nmap: labs.app\n\n\n\n\nto: /home/vagrant/Code/labs\n\n\n\n\n\n\neach time you want to boot up:vagrant up\n\n\n\n\n\n\nto ssh in: either vagrant ssh or ssh vagrant@192.168.10.10, with\n    password vagrant\n\n\n\n\n\n\nto shut down: vagrant halt", 
            "title": "Lab1"
        }, 
        {
            "location": "/PHP/labs/lab1/#introduction-to-vagrant-and-php-with-text-editor-home-setup", 
            "text": "", 
            "title": "Introduction to Vagrant and PHP with text editor, Home setup"
        }, 
        {
            "location": "/PHP/labs/lab1/#part-1-vagrant-virtual-machine-provisioning", 
            "text": "We are using Vagrant in this course to ensure all students have the same\nvirtual machine configured on all lab computers and at home. Vagrant is\na tool that greatly helps sharing Virtual Machines with the exact same\nconfiguration. The vagrant box that we use is Homestead, which is\nrecommended by Laravel (a PHP framework that we will use later in the\nsemester).  Homestead has the following development stack preinstalled: Ubuntu\nLinux, NginX web server, PostGres database, PHP.  In the first part of the lab, we will explore our system, make sure that\nwe can boot the virtual machine on the lab workstation and execute a\nbasic PHP script.", 
            "title": "Part 1 \u2013 Vagrant virtual machine provisioning"
        }, 
        {
            "location": "/PHP/labs/lab1/#create-the-homestead-folder", 
            "text": "Copy the folder  S:\\\\CompSci\\\\524\\\\Homestead to your H: drive . You should\nnow have H:\\Homestead directory with the same contents as S:\\\\CompSci\\\\524\\\\Homestead .  **Create the shared folder  One of the really nice features of Vagrant is how easy it is to get both\nthe host system (Windows 10 machine) and the virtual machine (Ubuntu) to\nsee and share the same directory.  Create a folder called PHPCode in your H: drive. You will save all your\nlabs and projects in this folder. Create the following directories\nwithin PHPCode to match the lab setup:     labs    badresto    reader    dawson    news    todo     (spoiler: these are some of the labs and projects you\u2019ll be working on\nthis semester!)", 
            "title": "Create the Homestead folder"
        }, 
        {
            "location": "/PHP/labs/lab1/#get-your-ssh-keys", 
            "text": "Check if you already have a .ssh folder in your home directory (H: drive\nshould be setup as your $HOME in the labs). If you have an .ssh\ndirectory, you have already generated ssh keys (probably for git). If\nnot:  Open a Git Bash console in your H drive (right-click in Windows\nExplorer, Git Bash Here)  Make sure you are in H:   pwd  Run these commands: $ mkdir -p .ssh    cd  .ssh  $ ssh-keygen -t rsa -b  4096  -C  youremail@address.here  \nPress enter to save the key in  /h/.ssh/id\\_rsa", 
            "title": "Get your ssh keys"
        }, 
        {
            "location": "/PHP/labs/lab1/#boot-the-virtual-machine-configured-for-the-php-course", 
            "text": "You will be doing this every lab:  Open a Git Bash window in  H:/Homestead  (right-click in explorer). This\nopens a Bash shell emulator on your Window system.  Make sure you are in  /h/Homestead  Run this command: $ vagrant up  When this command finishes (a few minutes) your Virtual Machine is up\nand running!!", 
            "title": "Boot the virtual machine configured for the PHP course"
        }, 
        {
            "location": "/PHP/labs/lab1/#ssh-into-the-virtual-machine", 
            "text": "Our Ubuntu VM is headless \u2013 meaning that we don\u2019t have a GUI interface\nto Linux. Yay Command line only  Whenever you want to log into the booted VM (e.g., to check the\nconfiguration or access the database), type in this command from your\nGit Bash window in  H:\\\\Homestead .  $ vagrant ssh \nYou are now in the VM!  cd  to the Code directory  - gt ; you are now in the PHPCode shared folder\nSo the  H:/PHPCode  folder in Windows is the same as the /home/vagrant/Code  folder in the VM.   NOTE: there is a known Vagrant bug where you may not see the command\nprompt while  ssh -ing with vagrant  ssh . If that is that case, exit and\ntry  ssh vagrant@192.168.10.10 , with password  vagrant   This \u201cmagic\u201d of the shared directory is courtesy of the  Homestead.yaml \nfile. If you open it in Notepad++ (or use less or nano or vim from the\nLinux side), you\u2019ll see a section that indicates the folder mapping.", 
            "title": "SSH into the virtual machine"
        }, 
        {
            "location": "/PHP/labs/lab1/#run-a-simple-script", 
            "text": "Once the VM is up and running, we can run PHP scripts.  Copy  S:/CompSci/524/lab0  to your  H:/PHPCode/labs folder .  Open a browser (hint: Firefox is my favourite), and go to http://labs.app/lab0  You should see a page that contains output of the PHP configuration on\nthe VM. Don\u2019t worry too much about the content, if you see it, you know\nyour VM is serving up your PHP files as required.  How does this work?  All the lab computers have been set to associate certain hostnames to\nitself: you can see this in the file  C:/Windows/System32/drivers/etc/hosts  Notice, for example, that the host labs.app is associated with the IP\naddress  192.168.10.10  (in fact all hostnames are associated with this IP\naddress). The hosts file enables you to override the DNS for a domain on\nthat machine. Your machine will look at the IP address provided\n( 192.168.10.10 ) instead of going through a DNS. This IP address\n( 192.168 ) is in the private IP address range, so we can map with no\nworries.  Now look at  H:/Homestead/Homestead.yaml : you will see that the IP\naddress is the one being used by you Vagrant VM 9and its NginX web\nserver. Further down, you see that the sites are associated with\ndifferent folders in VM; these folders are all in the shared /home/vagrant/Code  folder (which is your  H:/PHPCode  folder)  If you open the  lab0/index.php file , you will a single line in the php\ntags  \u2013 phpinfo()  is the function that outputs the PHP configuration.  NginX, the web server, is configured by default to return  index.html , index.html  directly, or interpret  index.php  through the PHP interpreter.\nThat\u2019s what happened when you browsed to  labs.app/lab0 .", 
            "title": "Run a simple script"
        }, 
        {
            "location": "/PHP/labs/lab1/#create-and-debug-your-own-php-script", 
            "text": "Create a folder  H:\\\\PHPCode\\\\labs\\\\lab1  (or in the Linux VM Code/labs/lab1  in the VM), and write a PHP script named index.php that\nwill create the output as shown in the image, using a text editor like\nNotepad++ or Atom.     use HTML5\n    tags, including doctype and html tag    the php code will fill in the contents of a table, with echo\u2019s\n    within a nested loop    no styling is required    recall: PHP variable names start with $; for loops look pretty much\n    the same as java.    PHP coding\n    conventions \n    use the \u201cEgyptian brackets\u201d/\u201dK R style braces\u201d in control structures\n    \u2013 which means the opening brace is written on the same line as the\n    conditional clause and the closing brace is always written on its\n    own line.     E.g.:  if ($a != 2) {  $a = 2;  }  (As an aside, this is also the   *common Java style\n* ).", 
            "title": "Create and debug your own PHP Script"
        }, 
        {
            "location": "/PHP/labs/lab1/#testing-the-php-script", 
            "text": "Browse to  http://labs.app/lab1 . Since we\nnamed the file index.php, NginX will open it by default. If you named it\nsomething else, write it in the address bar.  \nThe results of the program should appear!  Recall: Firefox (as well as the other major browsers) come with a suite\nof developer tools. Open the menu in Firefox, select Developer and\nToggle Tools (or Ctrl+Shift+I). You will see the http messages and other\ninformation that is  very  useful when debugging web applications.", 
            "title": "Testing the PHP Script"
        }, 
        {
            "location": "/PHP/labs/lab1/#shutting-down-the-vm", 
            "text": "Use the command vagrant halt to gracefully shutdown your VM. Note that\nthe VM is subject to deep-freeze, so any changes anywhere except the\nshared folder will be lost the next time you log in.", 
            "title": "Shutting down the VM"
        }, 
        {
            "location": "/PHP/labs/lab1/#solving-intermittent-502-bad-gateway-issues", 
            "text": "If you are victim, you may have to make sure that nginx and php config\nmatch:  Go to /etc/php/7.1/fpm/pool.d/ , edit www.conf (use sudo nano) and edit\nthe line listen = /run/php/php7.1-fpm.sock to\n/ var /run/php/php7.1-fpm.sock  Exit and save the file, then run sudo service php7.1-fpm restart", 
            "title": "SOLVING INTERMITTENT 502 BAD GATEWAY ISSUES"
        }, 
        {
            "location": "/PHP/labs/lab1/#setting-up-your-laptophome-system", 
            "text": "The following instructions are provided for a Windows 7.1+ syste, If you\nare running Linux or IOS, the steps will be simpler. See this link , and compare to the notes\nbelow.    make sure your BIOS/UEFI supports hardware virtualization and it is\n    enabled    make sure HyperV is disabled (Control panel - uninstall a program \u2013\n    program and features \u2013 turn Windows features on/off \u2013\n    uncheck HyperV)    install Git for Windows to have gitbash:\n     https://git-for-windows.github.io   choose default install options (select Windows\n    Explorer Integration. Select  Use Git from the Windows Command\n    Prompt  radio button so that Git can be run from the\n    command line.)     install VirtualBox 5.1.x (latest version) :\n     https://www.virtualbox.org/wiki/Downloads    install Vagrant 1.9.x (latest version):\n     https://www.vagrantup.com/downloads.html    if desired, setup your hosts to be the same as school    open Notepad as admin    Edit C:/Windows/System32/drivers/etc/hosts (nb: make sure Notepad is\n    looking at all files, not just .txt)    Add to the end:    192.168.10.10 dawson.app  192.168.10.10 news.app  192.168.10.10 todo.app  192.168.10.10 labs.app  192.168.10.10 reader.app  192.168.10.10 badresto.app    get your ssh keys, if required. Follow the steps in the lab above to\n    check if they exist in the $HOME directory    decide where you want your Homestead and PHPCode directories and\n    make them    In the containing directory:    open gitbash    run the following commands:      vagrant box add laravel/homestead  git clone  https://github.com/laravel/homestead.git  Homestead  cd Homestead  git checkout v5.4.0  bash init.sh    edit the Homestead/Homestead.yaml file (look at the one you have in\n    your H: drive)    in the folders section, provide to mapping to the PHPCode folder you\n    created in step 8. e.g.,    folders:   map: h:/PHPCode   to: /home/vagrant/Code   if you added the sites to the etc/hosts files, also add them to\n    the Homestead.yaml. For example:   sites:   map: labs.app   to: /home/vagrant/Code/labs    each time you want to boot up:vagrant up    to ssh in: either vagrant ssh or ssh vagrant@192.168.10.10, with\n    password vagrant    to shut down: vagrant halt", 
            "title": "Setting up your laptop/home system"
        }
    ]
}